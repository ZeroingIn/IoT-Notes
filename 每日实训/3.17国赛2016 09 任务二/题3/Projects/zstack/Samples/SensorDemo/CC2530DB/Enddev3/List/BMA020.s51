///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        23/Mar/2017  16:10:47 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\IoT Notes\每日实训\3.17国赛2016 09             /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\SEN /
//                          SOR_DRV\BMA020.c                                  /
//    Command line       =  -f "F:\IoT Notes\每日实训\3.17国赛2016 09         /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"       /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"      /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00100000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x8888                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "F:\IoT                    /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\SEN /
//                          SOR_DRV\BMA020.c" -D VER=2.3 -D ZIGBEEPRO -D      /
//                          NWK_AUTO_POLL -D HOLD_AUTO_START -D               /
//                          BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D      /
//                          xNV_RESTORE -D ZTOOL_P1 -D MT_TASK -D             /
//                          DEVICE_LOGICAL_TYPE=01 -D LOG_TYPE=02 -D          /
//                          xUART_SENSOR -D xLCD_SUPPORTED -D UART_LOOK -lC   /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\Enddev3\List\" -lA "F:\IoT                  /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\Enddev3\List\" --diag_suppress Pe001,Pa010  /
//                          -o "F:\IoT Notes\每日实训\3.17国赛2016 09         /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\Enddev3\Obj\" -e --debug --core=plain       /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "F:\IoT                   /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\" -I "F:\IoT Notes\每日实训\3.17国赛2016    /
//                          09 任务二\题3\Projects\zstack\Samples\SensorDemo\ /
//                          CC2530DB\..\SOURCE\" -I "F:\IoT                   /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\MYAPP\" -I "F:\IoT                       /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\sensor_drv\" -I "F:\IoT                  /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\ZMAIN\TI2530DB\" -I "F:\IoT        /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\MT\" -I "F:\IoT   /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I  /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530 /
//                          EB\" -I "F:\IoT Notes\每日实训\3.17国赛2016 09    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"  /
//                          -I "F:\IoT Notes\每日实训\3.17国赛2016 09         /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"    /
//                          -I "F:\IoT Notes\每日实训\3.17国赛2016 09         /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\STACK\AF\" -I     /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\" -I    /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\" -I    /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\" -I   /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\" -I    /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\" -I    /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\" -I     /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I         /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"  /
//                          -I "F:\IoT Notes\每日实训\3.17国赛2016 09         /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\"  /
//                          -I "F:\IoT Notes\每日实训\3.17国赛2016 09         /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\" -I  /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"  /
//                          -I "F:\IoT Notes\每日实训\3.17国赛2016 09         /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf /
//                          04\" -I "F:\IoT Notes\每日实训\3.17国赛2016 09    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf /
//                          04\SINGLE_CHIP\" -Ohz --require_prototypes        /
//    List file          =  F:\IoT Notes\每日实训\3.17国赛2016 09             /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\Enddev3\List\BMA020.s51                     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME BMA020

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?S_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??BMA_Pooling?relay
        FUNCTION ??BMA_Pooling?relay,0203H
        FUNCTION ??M2_I2cAck?relay,0203H
        FUNCTION ??M2_I2cRead?relay,0203H
        FUNCTION ??M2_I2cStart?relay,0203H
        FUNCTION ??M2_I2cWrite?relay,0203H
        FUNCTION ??M3_ReadEEPROM?relay,0203H
        FUNCTION ??McuWaitUs2?relay,0203H
        PUBLIC BMA_Pooling
        FUNCTION BMA_Pooling,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION M2_I2cAck,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION M2_I2cRead,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION M2_I2cStart,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION M2_I2cWrite,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION M3_ReadEEPROM,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION McuWaitUs2,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK P1DIR
        PUBWEAK P1INP
        PUBWEAK P1SEL
        PUBWEAK P2INP
        PUBWEAK _A_P1
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
BMA_Pooling         SYMBOL "BMA_Pooling"
??BMA_Pooling?relay SYMBOL "?relay", BMA_Pooling

// F:\IoT Notes\每日实训\3.17国赛2016 09 任务二\题3\Projects\zstack\Samples\SensorDemo\SENSOR_DRV\BMA020.c
//    1 //-------------------------------------------------------------------
//    2 // Filename: dma_bma.c
//    3 // Description:  dma_bma module library (I2C)
//    4 //-------------------------------------------------------------------
//    5 //-------------------------------------------------------------------
//    6 // INCLUDES
//    7 //-------------------------------------------------------------------
//    8 /******************************************************************************
//    9  * INCLUDES
//   10  */
//   11  #include "ioCC2530.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f6H
// unsigned char volatile __sfr P1INP
P1INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f7H
// unsigned char volatile __sfr P2INP
P2INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   12 #include "hal_types.h"
//   13 #include "hal_defs.h"
//   14 #include "BMA020.h"
//   15 
//   16 
//   17 
//   18 #define BM(n)      (1 << (n))
//   19 
//   20 #define MCU_IO_TRISTATE   1             
//   21 #define MCU_IO_PULLUP     2
//   22 #define MCU_IO_PULLDOWN   3
//   23 
//   24 #define MCU_IO_OUTPUT(port, pin, val)  MCU_IO_OUTPUT_PREP(port, pin, val)
//   25 #define MCU_IO_OUTPUT_PREP(port, pin, val)  st( P##port##SEL &= ~BM(pin); P##port##_##pin## = val; P##port##DIR |= BM(pin); )
//   26 #define MCU_IO_INPUT(port, pin, func)  MCU_IO_INPUT_PREP(port, pin, func)
//   27 #define MCU_IO_INPUT_PREP(port, pin, func)  st( P##port##SEL &= ~BM(pin); P##port##DIR &= ~BM(pin); switch (func) { case MCU_IO_PULLUP: P##port##INP &= ~BM(pin); P2INP &= ~BM(port + 5); break; case MCU_IO_PULLDOWN: P##port##INP &= ~BM(pin); P2INP |= BM(port + 5); break; default: P##port##INP |= BM(pin); break; } )
//   28 #define MCU_IO_GET(port, pin)          MCU_IO_GET_PREP(port, pin)
//   29 #define MCU_IO_GET_PREP(port, pin)          (P##port## & BM(pin))
//   30 
//   31 
//   32 
//   33 #define HAL_BOARD_IO_SHT_SCK_PORT           1
//   34 #define HAL_BOARD_IO_SHT_SCK_PIN             6
//   35 #define HAL_BOARD_IO_SHT_SDA_PORT           1
//   36 #define HAL_BOARD_IO_SHT_SDA_PIN             5
//   37 
//   38 #define HAL_BOARD_IO_E2PROM_SCL_PORT  HAL_BOARD_IO_SHT_SCK_PORT
//   39 #define HAL_BOARD_IO_E2PROM_SCL_PIN    HAL_BOARD_IO_SHT_SCK_PIN
//   40 
//   41 
//   42 #define HAL_E2PROM_SCK_DIR_OUT()          MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SCK_PORT, HAL_BOARD_IO_SHT_SCK_PIN,0)
//   43 #define HAL_E2PROM_SCK_SET()                  MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SCK_PORT, HAL_BOARD_IO_SHT_SCK_PIN,1)
//   44 #define HAL_E2PROM_SCK_CLR()                  MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SCK_PORT, HAL_BOARD_IO_SHT_SCK_PIN,0)
//   45 #define HAL_E2PROM_SCL_DIR_OUT        HAL_E2PROM_SCK_DIR_OUT
//   46 #define HAL_E2PROM_SCL_SET                 HAL_E2PROM_SCK_SET
//   47 #define HAL_E2PROM_SCL_CLR                HAL_E2PROM_SCK_CLR
//   48 
//   49 #define HAL_E2PROM_SDA_SET()                 MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN,1)
//   50 #define HAL_E2PROM_SDA_CLR()                 MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN,0)
//   51 #define HAL_E2PROM_SDA_DIR_OUT()         MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN,1)
//   52 #define HAL_E2PROM_SDA_DIR_IN()           MCU_IO_INPUT(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN,2)
//   53 #define HAL_E2PROM_SDA_VAL()                MCU_IO_GET(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN)   
//   54 #define halMcuWaitUs  McuWaitUs
//   55 #define NOP()    asm("NOP")
//   56 //-------------------------------------------------------------------
//   57 // LOCAL FUNCTIONS
//   58 //-------------------------------------------------------------------
//   59 static void McuWaitUs2(uint16 usec);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   60 void McuWaitUs2(uint16 usec)
McuWaitUs2:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function McuWaitUs2
        CODE
//   61 {
        ; Saved register size: 0
        ; Auto size: 0
//   62     usec >>= 1;
        MOV     A,R3
        CLR     C
        RRC     A
        MOV     R3,A
        MOV     A,R2
        RRC     A
        MOV     R2,A
        SJMP    ??McuWaitUs2_0
//   63     while (usec--)
//   64     {
//   65         NOP();
??McuWaitUs2_1:
        NOP
//   66         NOP();
        NOP
//   67         NOP();
        NOP
//   68         NOP();
        NOP
//   69         NOP();
        NOP
//   70         NOP();
        NOP
//   71         NOP();
        NOP
//   72         NOP();
        NOP
//   73         NOP();
        NOP
//   74         NOP();
        NOP
//   75         NOP();
        NOP
//   76         NOP();
        NOP
//   77         NOP();
        NOP
//   78         NOP();
        NOP
//   79         NOP();
        NOP
//   80         NOP();
        NOP
//   81         //NOP();
//   82     }
??McuWaitUs2_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??McuWaitUs2_1
//   83 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   84 //-------------------------------------------------------------------
//   85 // LOCAL FUNCTIONS
//   86 //-------------------------------------------------------------------
//   87 static void M2_I2cStart(void);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   88 void M2_I2cStart(void)//在SCL保持高电平期间，SDA由高变低，为起始信号
M2_I2cStart:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function M2_I2cStart
        CODE
//   89 {
        FUNCALL M2_I2cStart, McuWaitUs2
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M2_I2cStart, McuWaitUs2
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M2_I2cStart, McuWaitUs2
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   90     HAL_E2PROM_SCL_SET();  //SCL=1
        LCALL   ??Subroutine12_0 & 0xFFFF
//   91 
//   92     HAL_E2PROM_SDA_SET();  //SDA=1
??CrossCallReturnLabel_22:
        LCALL   ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock1
//   93     McuWaitUs2(2);
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function McuWaitUs2
        REQUIRE ?Subroutine0
        REQUIRE P1SEL
        REQUIRE _A_P1
        REQUIRE P1DIR
        ; // Fall through to label ?Subroutine0
//   94     HAL_E2PROM_SDA_CLR();  //SDA=0
//   95     McuWaitUs2(2);
//   96 
//   97     HAL_E2PROM_SCL_CLR();  //SCL=0
//   98     McuWaitUs2(2);
//   99 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_17:
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??McuWaitUs2?relay
        ANL     0xf4,#0xdf
        SETB    0x90.5
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond7) CFA_SP SP+-5
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        ORL     0xfe,#0x20
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10
        ; Setup parameters for call to function McuWaitUs2
        ; Setup parameters for call to function McuWaitUs2
        ; Setup parameters for call to function McuWaitUs2
        ; Setup parameters for call to function McuWaitUs2
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine10_0:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond13) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond13) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond13) CFA_SP SP+-5
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond14) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond14) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond14) CFA_SP SP+-5
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??McuWaitUs2?relay
        ANL     0xf4,#0xbf
        CLR     0x90.6
        ORL     0xfe,#0x40
        ; Setup parameters for call to function McuWaitUs2
        ; Setup parameters for call to function McuWaitUs2
        ; Setup parameters for call to function McuWaitUs2
        ; Setup parameters for call to function McuWaitUs2
        ; Setup parameters for call to function McuWaitUs2
        ; Setup parameters for call to function McuWaitUs2
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??McuWaitUs2?relay
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17
//  100 
//  101 //-------------------------------------------------------------------
//  102 static void M2_I2cStop(void);
//  103 void M2_I2cStop(void)//在SCL保持高电平期间，SDA由低变高，为停止信号
//  104 {
//  105     HAL_E2PROM_SCL_SET();  //SCL=1
//  106     McuWaitUs2(2);
//  107     
//  108     HAL_E2PROM_SDA_CLR();  //SDA=0
//  109     McuWaitUs2(2);
//  110 
//  111     HAL_E2PROM_SDA_SET();  //SDA=1
//  112     McuWaitUs2(2);
//  113     
//  114     HAL_E2PROM_SCL_CLR();  //SCL=0
//  115     McuWaitUs2(2);
//  116 }
//  117 
//  118 //-------------------------------------------------------------------
//  119 static void M2_I2cAck(void);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  120 void M2_I2cAck(void)//当SDA=0时产生应答信号
M2_I2cAck:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function M2_I2cAck
        CODE
//  121 {
        FUNCALL M2_I2cAck, McuWaitUs2
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M2_I2cAck, McuWaitUs2
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M2_I2cAck, McuWaitUs2
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  122     HAL_E2PROM_SCL_SET();
        LCALL   ??Subroutine12_0 & 0xFFFF
//  123     McuWaitUs2(2);
??CrossCallReturnLabel_23:
        ; Setup parameters for call to function McuWaitUs2
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock18
        REQUIRE P1SEL
        REQUIRE _A_P1
        REQUIRE P1DIR
//  124     
//  125     HAL_E2PROM_SDA_CLR();
//  126     McuWaitUs2(2);
//  127     
//  128     HAL_E2PROM_SCL_CLR();
//  129     McuWaitUs2(2);
//  130 }
//  131 
//  132 //-------------------------------------------------------------------
//  133 static void M2_I2cNack(void);
//  134 void M2_I2cNack(void)//当SDA=1时产生非应答信号
//  135 {
//  136     HAL_E2PROM_SCL_SET();
//  137     McuWaitUs2(2);
//  138     
//  139     HAL_E2PROM_SDA_SET();
//  140     McuWaitUs2(2);
//  141     
//  142     HAL_E2PROM_SCL_CLR();
//  143     McuWaitUs2(2);
//  144 }
//  145 
//  146 //-------------------------------------------------------------------
//  147 static void M2_I2cWrite(uint8 dat);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  148 void M2_I2cWrite(uint8 dat)//在传送数据时，数据线保持稳定不能有跳变
M2_I2cWrite:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function M2_I2cWrite
        CODE
//  149 {
        FUNCALL M2_I2cWrite, McuWaitUs2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M2_I2cWrite, McuWaitUs2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  150     uint8 i;
//  151 
//  152     for (i = 0; i < 8; i++)
        MOV     R6,#0x8
//  153     {
//  154         if (dat &0x80)
??M2_I2cWrite_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.7
        ANL     0xf4,#0xdf
        JNC     ??M2_I2cWrite_1
//  155         {
//  156             HAL_E2PROM_SDA_SET();
        SETB    0x90.5
        SJMP    ??M2_I2cWrite_2
//  157         }
//  158         else
//  159         {
//  160             HAL_E2PROM_SDA_CLR();
??M2_I2cWrite_1:
        CLR     0x90.5
//  161         }
??M2_I2cWrite_2:
        LCALL   ?Subroutine3 & 0xFFFF
//  162         HAL_E2PROM_SCL_SET();//当时钟线为高电平(SCL=1)时开始传送数据
//  163         dat = dat << 1;
??CrossCallReturnLabel_20:
        CLR     C
        RLC     A
        MOV     R7,A
//  164         McuWaitUs2(2);
        ; Setup parameters for call to function McuWaitUs2
        LCALL   ??Subroutine10_0 & 0xFFFF
//  165         HAL_E2PROM_SCL_CLR();//传送完后释放总线（SCL=0）
//  166         McuWaitUs2(2);
//  167     }
??CrossCallReturnLabel_18:
        DEC     R6
        MOV     A,R6
        JNZ     ??M2_I2cWrite_0
//  168 }
        SJMP    ??Subroutine11_0
        CFI EndBlock cfiBlock19
        REQUIRE P1SEL
        REQUIRE _A_P1
        REQUIRE P1DIR
//  169 
//  170 //-------------------------------------------------------------------
//  171 static uint8 M2_I2cRead(void);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  172 uint8 M2_I2cRead(void)
M2_I2cRead:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function M2_I2cRead
        CODE
//  173 {
        FUNCALL M2_I2cRead, McuWaitUs2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M2_I2cRead, McuWaitUs2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M2_I2cRead, McuWaitUs2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  174     uint8 res = 0;
        MOV     R6,#0x0
//  175     uint8 cnt;
//  176 
//  177     HAL_E2PROM_SDA_SET();//在读数据之前，把数据线拉高（datesheet上有介绍）,然后把数据线端口对CPU设置成输入端口
        LCALL   ?Subroutine8 & 0xFFFF
//  178     HAL_E2PROM_SDA_DIR_IN();
??CrossCallReturnLabel_13:
        ANL     0xf4,#0xdf
        ANL     0xfe,#0xdf
        ANL     0xf6,#0xdf
        ANL     0xf7,#0xbf
//  179     McuWaitUs2(2);
        ; Setup parameters for call to function McuWaitUs2
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??McuWaitUs2?relay
//  180 
//  181     for (cnt = 0; cnt < 8; cnt++)
        MOV     R7,#0x8
//  182     {
//  183         HAL_E2PROM_SCL_SET();
??M2_I2cRead_0:
        LCALL   ??Subroutine12_0 & 0xFFFF
//  184         res <<= 1;
??CrossCallReturnLabel_24:
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R6,A
//  185         if (HAL_E2PROM_SDA_VAL())//cpu获取SDA端口上的值
        MOV     C,0x90.5
        JNC     ??M2_I2cRead_1
//  186         {
//  187             res |= 0x01;
        SETB    0xE0 /* A   */.0
        MOV     R6,A
//  188         }
//  189         McuWaitUs2(2);
??M2_I2cRead_1:
        ; Setup parameters for call to function McuWaitUs2
        LCALL   ??Subroutine10_0 & 0xFFFF
//  190         HAL_E2PROM_SCL_CLR();
//  191         McuWaitUs2(2);
//  192     }
??CrossCallReturnLabel_19:
        DEC     R7
        MOV     A,R7
        JNZ     ??M2_I2cRead_0
//  193     HAL_E2PROM_SDA_DIR_OUT();//cpu获取完一个字节后，再将SDA端口设置成输出，且置高此端口
        LCALL   ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock20
//  194     return res;
??CrossCallReturnLabel_4:
        REQUIRE ?Subroutine1
        REQUIRE P1SEL
        REQUIRE _A_P1
        REQUIRE P1DIR
        REQUIRE P1INP
        REQUIRE P2INP
        ; // Fall through to label ?Subroutine1
//  195 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,R6
        MOV     R1,A
        CFI EndBlock cfiBlock21
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_3
        CFI (cfiCond27) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond27) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond27) CFA_SP SP+-5
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_4
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        ANL     0xf4,#0xdf
        SETB    0x90.5
        ORL     0xfe,#0x20
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29
//  196 
//  197 //-------------------------------------------------------------------
//  198 // GLOBAL FUNCTIONS
//  199 //-------------------------------------------------------------------
//  200 static void M2_Init(void);
//  201 void M2_Init(void)//初始化 SDA=1、SCL=1
//  202 {
//  203     HAL_E2PROM_SDA_DIR_OUT();
//  204     MCU_IO_OUTPUT(HAL_BOARD_IO_E2PROM_SCL_PORT, HAL_BOARD_IO_E2PROM_SCL_PIN,1);
//  205 }
//  206 
//  207 
//  208 //-------------------------------------------------------------------
//  209 static void M2_WriteEEPROM(uint8 addr, uint8 ch);
//  210 void M2_WriteEEPROM(uint8 addr, uint8 ch)//往EEPROM里写数据（先写地址，在写数据）
//  211 {
//  212     M2_I2cStart();
//  213     
//  214     M2_I2cWrite(0x70);//写器件地址，对于AT24C02来说，高四位固定为1010,后三位没有意义，最后一位为0时写，为1时读
//  215     M2_I2cAck();
//  216     
//  217     M2_I2cWrite(addr);
//  218     M2_I2cAck();
//  219     
//  220     M2_I2cWrite(ch); //data
//  221     M2_I2cAck();
//  222     
//  223     M2_I2cStop();
//  224    // halMcuWaitMs(5);
//  225 }
//  226 
//  227 //-------------------------------------------------------------------
//  228 static uint8 M3_ReadEEPROM(uint8 addr);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  229 uint8 M3_ReadEEPROM(uint8 addr)
M3_ReadEEPROM:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI Function M3_ReadEEPROM
        CODE
//  230 {
        FUNCALL M3_ReadEEPROM, M2_I2cStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M2_I2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M2_I2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M2_I2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M2_I2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M2_I2cStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M2_I2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M2_I2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M2_I2cRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, McuWaitUs2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, McuWaitUs2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, McuWaitUs2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, McuWaitUs2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, McuWaitUs2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, McuWaitUs2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, McuWaitUs2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  231     uint8 res;
//  232     
//  233     M2_I2cStart();
        ; Setup parameters for call to function M2_I2cStart
        LCALL   ??M2_I2cStart?relay
//  234     
//  235     M2_I2cWrite(0x70); //器件设置为写状态
        ; Setup parameters for call to function M2_I2cWrite
        MOV     R1,#0x70
        LCALL   ?Subroutine4 & 0xFFFF
//  236     M2_I2cAck();
//  237     
//  238     M2_I2cWrite(addr);
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function M2_I2cWrite
        MOV     A,R7
        MOV     R1,A
        LCALL   ?Subroutine4 & 0xFFFF
//  239     M2_I2cAck();
//  240 
//  241     
//  242     M2_I2cStart();
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function M2_I2cStart
        LCALL   ??M2_I2cStart?relay
//  243     
//  244     M2_I2cWrite(0x71); //器件设置为写状态
        ; Setup parameters for call to function M2_I2cWrite
        MOV     R1,#0x71
        LCALL   ?Subroutine4 & 0xFFFF
//  245     M2_I2cAck();
//  246       
//  247     res = M2_I2cRead();
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function M2_I2cRead
        LCALL   ??M2_I2cRead?relay
        MOV     A,R1
        MOV     R6,A
//  248     
//  249     M2_I2cNack();
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_25:
        ; Setup parameters for call to function McuWaitUs2
        LCALL   ?Subroutine2 & 0xFFFF
//  250     M2_I2cStop();
??CrossCallReturnLabel_15:
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_26:
        ; Setup parameters for call to function McuWaitUs2
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        ORL     0xfe,#0x20
        ; Setup parameters for call to function McuWaitUs2
        LCALL   ?Subroutine2 & 0xFFFF
//  251 
//  252     return res;
??CrossCallReturnLabel_16:
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock30
        REQUIRE P1SEL
        REQUIRE _A_P1
        REQUIRE P1DIR
//  253 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond32) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond32) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond32) CFA_SP SP+-5
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??McuWaitUs2?relay
        ANL     0xf4,#0xdf
        CLR     0x90.5
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        LCALL   ??M2_I2cWrite?relay
        ; Setup parameters for call to function M2_I2cAck
        ; Setup parameters for call to function M2_I2cAck
        ; Setup parameters for call to function M2_I2cAck
        LCALL   ??M2_I2cAck?relay
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        ORL     0xfe,#0x20
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond43) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond43) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond43) CFA_SP SP+-5
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        ANL     0xf4,#0xbf
        SETB    0x90.6
        ORL     0xfe,#0x40
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49
//  254 
//  255 
//  256 /******************************************************************************
//  257  * 名称       BMA_Pooling
//  258  * 功能       读取bma020的X,Y Z的重力加速度值
//  259  * 入口参数 (int16 *BMA_X_Value,int16 *BMA_Y_Value,int16 *BMA_Z_Value)
//  260             *BMA_X_Value：X的重力加速度值存放地址
//  261             *BMA_Y_Value：Y的重力加速度值存放地址
//  262             *BMA_Z_Value：Z的重力加速度值存放地址
//  263             加速度值为16位有符号数，分辨率为 2/512 (g), g=9.8m/s
//  264  * 出口参数  无  
//  265  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  266 void BMA_Pooling(int16 *BMA_X_Value,int16 *BMA_Y_Value,int16 *BMA_Z_Value)
BMA_Pooling:
        CFI Block cfiBlock50 Using cfiCommon0
        CFI Function BMA_Pooling
        CODE
//  267 {
        FUNCALL BMA_Pooling, M3_ReadEEPROM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMA_Pooling, M3_ReadEEPROM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMA_Pooling, M3_ReadEEPROM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMA_Pooling, M3_ReadEEPROM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMA_Pooling, M3_ReadEEPROM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMA_Pooling, M3_ReadEEPROM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
//  268     uint16 BMA_XM_Value,BMA_YM_Value,BMA_ZM_Value;
//  269     uint16 BMA_XL_Value,BMA_YL_Value,BMA_ZL_Value;
//  270     int16 value;
//  271     M2_Init();
        ANL     0xf4,#0xdf
        SETB    0x90.5
        LCALL   ?Subroutine3 & 0xFFFF
//  272     BMA_XL_Value = M3_ReadEEPROM(0x02);
??CrossCallReturnLabel_21:
        ; Setup parameters for call to function M3_ReadEEPROM
        MOV     R1,#0x2
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     ?V0 + 8,A
//  273     BMA_XM_Value = M3_ReadEEPROM(0x03);
        ; Setup parameters for call to function M3_ReadEEPROM
        MOV     R1,#0x3
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     ?V0 + 7,A
//  274     BMA_YL_Value = M3_ReadEEPROM(0x04);
        ; Setup parameters for call to function M3_ReadEEPROM
        MOV     R1,#0x4
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     ?V0 + 6,A
//  275     BMA_YM_Value = M3_ReadEEPROM(0x05);
        ; Setup parameters for call to function M3_ReadEEPROM
        MOV     R1,#0x5
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     ?V0 + 5,A
//  276     BMA_ZL_Value = M3_ReadEEPROM(0x06);
        ; Setup parameters for call to function M3_ReadEEPROM
        MOV     R1,#0x6
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     ?V0 + 4,A
//  277     BMA_ZM_Value = M3_ReadEEPROM(0x07);
        ; Setup parameters for call to function M3_ReadEEPROM
        MOV     R1,#0x7
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     R4,A
//  278     value = (BMA_XM_Value << 8) | ((BMA_XL_Value&0xc0));
//  279     *BMA_X_Value= value/64;
        MOV     A,?V0 + 8
        ANL     A,#0xc0
        MOV     R0,A
        MOV     R1,?V0 + 7
        MOV     R2,#0x40
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  280     value = (BMA_YM_Value << 8) | ((BMA_YL_Value&0xc0));
//  281     *BMA_Y_Value= value/64;
        MOV     A,?V0 + 6
        ANL     A,#0xc0
        MOV     R0,A
        MOV     R1,?V0 + 5
        MOV     R2,#0x40
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  282     value = (BMA_ZM_Value << 8) | ((BMA_ZL_Value&0xc0));
//  283     *BMA_Z_Value= value/64;
        MOV     A,R4
        MOV     R1,A
        MOV     A,?V0 + 4
        ANL     A,#0xc0
        MOV     R2,A
        CLR     A
        MOV     R3,A
        MOV     A,R2
        MOV     R0,A
        MOV     R2,#0x40
        LCALL   ?S_DIV_MOD
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  284 }
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock50
        REQUIRE P1SEL
        REQUIRE _A_P1
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        LCALL   ??M3_ReadEEPROM?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??McuWaitUs2?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    McuWaitUs2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M2_I2cStart?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M2_I2cStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M2_I2cAck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M2_I2cAck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M2_I2cWrite?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M2_I2cWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M2_I2cRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M2_I2cRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M3_ReadEEPROM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M3_ReadEEPROM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BMA_Pooling?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BMA_Pooling

        END
//  285 
// 
// 473 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//   5 bytes in segment SFR_AN
// 
// 515 bytes of CODE memory
//   0 bytes of DATA memory (+ 5 bytes shared)
//
//Errors: none
//Warnings: 1
