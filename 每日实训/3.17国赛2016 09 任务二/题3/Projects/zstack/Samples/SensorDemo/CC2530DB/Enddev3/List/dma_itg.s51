///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        23/Mar/2017  16:10:55 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\IoT Notes\每日实训\3.17国赛2016 09             /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\SEN /
//                          SOR_DRV\dma_itg.c                                 /
//    Command line       =  -f "F:\IoT Notes\每日实训\3.17国赛2016 09         /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"       /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"      /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00100000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x8888                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "F:\IoT                    /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\SEN /
//                          SOR_DRV\dma_itg.c" -D VER=2.3 -D ZIGBEEPRO -D     /
//                          NWK_AUTO_POLL -D HOLD_AUTO_START -D               /
//                          BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D      /
//                          xNV_RESTORE -D ZTOOL_P1 -D MT_TASK -D             /
//                          DEVICE_LOGICAL_TYPE=01 -D LOG_TYPE=02 -D          /
//                          xUART_SENSOR -D xLCD_SUPPORTED -D UART_LOOK -lC   /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\Enddev3\List\" -lA "F:\IoT                  /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\Enddev3\List\" --diag_suppress Pe001,Pa010  /
//                          -o "F:\IoT Notes\每日实训\3.17国赛2016 09         /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\Enddev3\Obj\" -e --debug --core=plain       /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "F:\IoT                   /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\" -I "F:\IoT Notes\每日实训\3.17国赛2016    /
//                          09 任务二\题3\Projects\zstack\Samples\SensorDemo\ /
//                          CC2530DB\..\SOURCE\" -I "F:\IoT                   /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\MYAPP\" -I "F:\IoT                       /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\sensor_drv\" -I "F:\IoT                  /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\ZMAIN\TI2530DB\" -I "F:\IoT        /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\MT\" -I "F:\IoT   /
//                          Notes\每日实训\3.17国赛2016 09                    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\" -I  /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530 /
//                          EB\" -I "F:\IoT Notes\每日实训\3.17国赛2016 09    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"  /
//                          -I "F:\IoT Notes\每日实训\3.17国赛2016 09         /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"    /
//                          -I "F:\IoT Notes\每日实训\3.17国赛2016 09         /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\STACK\AF\" -I     /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\" -I    /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\" -I    /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\" -I   /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\" -I    /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\" -I    /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\" -I     /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I         /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"  /
//                          -I "F:\IoT Notes\每日实训\3.17国赛2016 09         /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\"  /
//                          -I "F:\IoT Notes\每日实训\3.17国赛2016 09         /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\" -I  /
//                          "F:\IoT Notes\每日实训\3.17国赛2016 09            /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\"  /
//                          -I "F:\IoT Notes\每日实训\3.17国赛2016 09         /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf /
//                          04\" -I "F:\IoT Notes\每日实训\3.17国赛2016 09    /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf /
//                          04\SINGLE_CHIP\" -Ohz --require_prototypes        /
//    List file          =  F:\IoT Notes\每日实训\3.17国赛2016 09             /
//                          任务二\题3\Projects\zstack\Samples\SensorDemo\CC2 /
//                          530DB\Enddev3\List\dma_itg.s51                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME dma_itg

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_DIV
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?L_TO_FLT
        EXTERN ?S_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??ITGMcuWaitUs?relay,0203H
        PUBLIC ??ITG_Pooling?relay
        FUNCTION ??ITG_Pooling?relay,0203H
        FUNCTION ??M3_I2cAck?relay,0203H
        FUNCTION ??M3_I2cRead?relay,0203H
        FUNCTION ??M3_I2cStart?relay,0203H
        FUNCTION ??M3_I2cStop?relay,0203H
        FUNCTION ??M3_I2cWrite?relay,0203H
        FUNCTION ??M3_ReadEEPROM?relay,0203H
        FUNCTION ITGMcuWaitUs,080203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC ITG_Pooling
        FUNCTION ITG_Pooling,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 26, STACK
        FUNCTION M3_I2cAck,0203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCTION M3_I2cRead,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION M3_I2cStart,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION M3_I2cStop,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION M3_I2cWrite,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION M3_ReadEEPROM,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK P1DIR
        PUBWEAK P1INP
        PUBWEAK P1SEL
        PUBWEAK P2INP
        PUBWEAK _A_P1
        PUBWEAK __Constant_41660000
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
ITG_Pooling         SYMBOL "ITG_Pooling"
??ITG_Pooling?relay SYMBOL "?relay", ITG_Pooling

// F:\IoT Notes\每日实训\3.17国赛2016 09 任务二\题3\Projects\zstack\Samples\SensorDemo\SENSOR_DRV\dma_itg.c
//    1 //-------------------------------------------------------------------
//    2 // Filename: dma_bma.c
//    3 // Description:  dma_bma module library (I2C)
//    4 //-------------------------------------------------------------------
//    5 //-------------------------------------------------------------------
//    6 // INCLUDES
//    7 //-------------------------------------------------------------------
//    8 /******************************************************************************
//    9  * INCLUDES
//   10  */
//   11 #include "ioCC2530.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f6H
// unsigned char volatile __sfr P1INP
P1INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f7H
// unsigned char volatile __sfr P2INP
P2INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   12 #include "hal_defs.h"
//   13 #include "hal_types.h"
//   14 #include "dma_itg.h"
//   15 
//   16 
//   17 
//   18 #define BM(n)      (1 << (n))
//   19 
//   20 #define MCU_IO_TRISTATE   1             
//   21 #define MCU_IO_PULLUP     2
//   22 #define MCU_IO_PULLDOWN   3
//   23 
//   24 #define MCU_IO_OUTPUT(port, pin, val)  MCU_IO_OUTPUT_PREP(port, pin, val)
//   25 #define MCU_IO_OUTPUT_PREP(port, pin, val)  st( P##port##SEL &= ~BM(pin); P##port##_##pin## = val; P##port##DIR |= BM(pin); )
//   26 #define MCU_IO_INPUT(port, pin, func)  MCU_IO_INPUT_PREP(port, pin, func)
//   27 #define MCU_IO_INPUT_PREP(port, pin, func)  st( P##port##SEL &= ~BM(pin); P##port##DIR &= ~BM(pin); switch (func) { case MCU_IO_PULLUP: P##port##INP &= ~BM(pin); P2INP &= ~BM(port + 5); break; case MCU_IO_PULLDOWN: P##port##INP &= ~BM(pin); P2INP |= BM(port + 5); break; default: P##port##INP |= BM(pin); break; } )
//   28 #define MCU_IO_GET(port, pin)          MCU_IO_GET_PREP(port, pin)
//   29 #define MCU_IO_GET_PREP(port, pin)          (P##port## & BM(pin))
//   30 
//   31 
//   32 
//   33 /***********新板板IO设置********************/
//   34 #define HAL_BOARD_IO_SHT_SCK_PORT           1
//   35 #define HAL_BOARD_IO_SHT_SCK_PIN             6
//   36 #define HAL_BOARD_IO_SHT_SDA_PORT           1
//   37 #define HAL_BOARD_IO_SHT_SDA_PIN             5
//   38 
//   39 #define HAL_BOARD_IO_E2PROM_SCL_PORT  HAL_BOARD_IO_SHT_SCK_PORT
//   40 #define HAL_BOARD_IO_E2PROM_SCL_PIN    HAL_BOARD_IO_SHT_SCK_PIN
//   41 
//   42 
//   43 #define HAL_E2PROM_SCK_DIR_OUT()          MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SCK_PORT, HAL_BOARD_IO_SHT_SCK_PIN,0)
//   44 #define HAL_E2PROM_SCK_SET()                  MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SCK_PORT, HAL_BOARD_IO_SHT_SCK_PIN,1)
//   45 #define HAL_E2PROM_SCK_CLR()                  MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SCK_PORT, HAL_BOARD_IO_SHT_SCK_PIN,0)
//   46 #define HAL_E2PROM_SCL_DIR_OUT        HAL_E2PROM_SCK_DIR_OUT
//   47 #define HAL_E2PROM_SCL_SET                 HAL_E2PROM_SCK_SET
//   48 #define HAL_E2PROM_SCL_CLR                HAL_E2PROM_SCK_CLR
//   49 
//   50 #define HAL_E2PROM_SDA_SET()                 MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN,1)
//   51 #define HAL_E2PROM_SDA_CLR()                 MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN,0)
//   52 #define HAL_E2PROM_SDA_DIR_OUT()         MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN,1)
//   53 #define HAL_E2PROM_SDA_DIR_IN()           MCU_IO_INPUT(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN,2)
//   54 #define HAL_E2PROM_SDA_VAL()                MCU_IO_GET(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN)   
//   55 #define halMcuWaitUs  ITGMcuWaitUs
//   56 #define NOP()    asm("NOP")
//   57 //-------------------------------------------------------------------
//   58 // LOCAL FUNCTIONS
//   59 //-------------------------------------------------------------------
//   60 static void ITGMcuWaitUs(uint16 usec);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   61 void ITGMcuWaitUs(uint16 usec)
ITGMcuWaitUs:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ITGMcuWaitUs
        CODE
//   62 {
        ; Saved register size: 0
        ; Auto size: 0
//   63     usec >>= 1;
        MOV     A,R3
        CLR     C
        RRC     A
        MOV     R3,A
        MOV     A,R2
        RRC     A
        MOV     R2,A
        SJMP    ??ITGMcuWaitUs_0
//   64     while (usec--)
//   65     {
//   66         NOP();
??ITGMcuWaitUs_1:
        NOP
//   67         NOP();
        NOP
//   68         NOP();
        NOP
//   69         NOP();
        NOP
//   70         NOP();
        NOP
//   71         NOP();
        NOP
//   72         NOP();
        NOP
//   73         NOP();
        NOP
//   74         NOP();
        NOP
//   75         NOP();
        NOP
//   76         NOP();
        NOP
//   77         NOP();
        NOP
//   78         NOP();
        NOP
//   79         NOP();
        NOP
//   80         NOP();
        NOP
//   81         NOP();
        NOP
//   82         //NOP();
//   83     }
??ITGMcuWaitUs_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ITGMcuWaitUs_1
//   84 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   85 //-------------------------------------------------------------------
//   86 // LOCAL FUNCTIONS
//   87 //-------------------------------------------------------------------
//   88 //--------- write a byte and checks the ack signal----------------- 
//   89 static void M3_I2cWrite(uint8 dat);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   90 void M3_I2cWrite(uint8 dat)//在传送数据时，数据线保持稳定不能有跳变
M3_I2cWrite:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function M3_I2cWrite
        CODE
//   91 {
        FUNCALL M3_I2cWrite, ITGMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_I2cWrite, ITGMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//   92     uint8 i;
//   93 
//   94     for (i = 0; i < 8; i++)
        MOV     R6,#0x8
//   95     {
//   96         if (dat &0x80)
??M3_I2cWrite_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.7
        ANL     0xf4,#0xdf
        JNC     ??M3_I2cWrite_1
//   97         {
//   98             HAL_E2PROM_SDA_SET();
        SETB    0x90.5
        SJMP    ??M3_I2cWrite_2
//   99         }
//  100         else
//  101         {
//  102             HAL_E2PROM_SDA_CLR();
??M3_I2cWrite_1:
        CLR     0x90.5
//  103         }
??M3_I2cWrite_2:
        LCALL   ?Subroutine6 & 0xFFFF
//  104         HAL_E2PROM_SCK_SET();//当时钟线为高电平(SCL=1)时开始传送数据
//  105         dat = dat << 1;
??CrossCallReturnLabel_21:
        CLR     C
        RLC     A
        MOV     R7,A
//  106         halMcuWaitUs(2);
        ; Setup parameters for call to function ITGMcuWaitUs
        LCALL   ?Subroutine3 & 0xFFFF
//  107         HAL_E2PROM_SCK_CLR();//传送完后释放总线（SCL=0）
//  108         halMcuWaitUs(2);
//  109     }
??CrossCallReturnLabel_0:
        DEC     R6
        MOV     A,R6
        JNZ     ??M3_I2cWrite_0
//  110     
//  111 }
        SJMP    ??Subroutine15_0
        CFI EndBlock cfiBlock1
        REQUIRE P1SEL
        REQUIRE _A_P1
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond3) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond3) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond3) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond3) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond3) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        ORL     0xfe,#0x20
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_25:
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_22
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_23
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_24
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_2
        CFI (cfiCond14) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond14) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond14) CFA_SP SP+-5
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_3
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        ANL     0xf4,#0xbf
        SETB    0x90.6
        ORL     0xfe,#0x40
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
//  112 
//  113 //--------- read a byte and checks the ack signal----------------- 
//  114 static uint8 M3_I2cRead(void);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  115 uint8 M3_I2cRead(void)
M3_I2cRead:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function M3_I2cRead
        CODE
//  116 {
        FUNCALL M3_I2cRead, ITGMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_I2cRead, ITGMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_I2cRead, ITGMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_I2cRead, ITGMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  117     uint8 res = 0;
        MOV     R6,#0x0
//  118     uint8 cnt;
//  119 
//  120     HAL_E2PROM_SDA_SET();//在读数据之前，把数据线拉高（datesheet上有介绍）,然后把数据线端口对CPU设置成输入端口
        LCALL   ?Subroutine11 & 0xFFFF
//  121     HAL_E2PROM_SDA_DIR_IN();
??CrossCallReturnLabel_30:
        ANL     0xf4,#0xdf
        ANL     0xfe,#0xdf
        ANL     0xf6,#0xdf
        ANL     0xf7,#0xbf
//  122     halMcuWaitUs(2);
        ; Setup parameters for call to function ITGMcuWaitUs
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??ITGMcuWaitUs?relay
//  123 
//  124     for (cnt = 0; cnt < 8; cnt++)
        MOV     R7,#0x8
//  125     {
//  126         res <<= 1;
??M3_I2cRead_0:
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R6,A
//  127         if (HAL_E2PROM_SDA_VAL())//cpu获取SDA端口上的值
        MOV     C,0x90.5
        JNC     ??M3_I2cRead_1
//  128         {
//  129             res |= 0x01;
        SETB    0xE0 /* A   */.0
        MOV     R6,A
//  130         }
//  131         HAL_E2PROM_SCK_SET();
??M3_I2cRead_1:
        LCALL   ??Subroutine14_0 & 0xFFFF
//  132         halMcuWaitUs(2);
??CrossCallReturnLabel_23:
        ; Setup parameters for call to function ITGMcuWaitUs
        LCALL   ?Subroutine3 & 0xFFFF
//  133         HAL_E2PROM_SCK_CLR();
//  134         halMcuWaitUs(2);
//  135     }
??CrossCallReturnLabel_1:
        DEC     R7
        MOV     A,R7
        JNZ     ??M3_I2cRead_0
//  136  // MCU_IO_OUTPUT(HAL_BOARD_IO_E2PROM_SDA_PORT, HAL_BOARD_IO_E2PROM_SDA_PIN,!ack);   /*当ack＝1时拉低数据线*/
//  137   //  HAL_E2PROM_SDA_SET();
//  138     
//  139     HAL_E2PROM_SCK_SET();                            /*clk #9 for ack*/
        LCALL   ??Subroutine14_0 & 0xFFFF
//  140     halMcuWaitUs(1);                  /*pulswith approx 1 us */
??CrossCallReturnLabel_24:
        ; Setup parameters for call to function ITGMcuWaitUs
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??ITGMcuWaitUs?relay
//  141     HAL_E2PROM_SCK_CLR();
        ANL     0xf4,#0xbf
        CLR     0x90.6
        LCALL   ??Subroutine16_0 & 0xFFFF
        CFI EndBlock cfiBlock17
//  142     HAL_E2PROM_SDA_SET();
//  143   
//  144     return res;
??CrossCallReturnLabel_29:
        REQUIRE ?Subroutine1
        REQUIRE P1SEL
        REQUIRE _A_P1
        REQUIRE P1DIR
        REQUIRE P1INP
        REQUIRE P2INP
        ; // Fall through to label ?Subroutine1
//  145 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,R6
        MOV     R1,A
        CFI EndBlock cfiBlock18
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??ITGMcuWaitUs?relay
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function ITGMcuWaitUs
        ; Setup parameters for call to function ITGMcuWaitUs
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??ITGMcuWaitUs?relay
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22
//  146 static void M3_I2cStart(void);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  147 void M3_I2cStart(void)//在SCL保持高电平期间，SDA由高变低，为起始信号
M3_I2cStart:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function M3_I2cStart
        CODE
//  148 {
        FUNCALL M3_I2cStart, ITGMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_I2cStart, ITGMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  149     HAL_E2PROM_SCK_SET();  //SCL=1
        LCALL   ?Subroutine2 & 0xFFFF
//  150 
//  151     HAL_E2PROM_SDA_SET();  //SDA=1
//  152     halMcuWaitUs(2);
??CrossCallReturnLabel_27:
        ; Setup parameters for call to function ITGMcuWaitUs
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??ITGMcuWaitUs?relay
//  153     HAL_E2PROM_SDA_CLR();  //SDA=0
        ANL     0xf4,#0xdf
        CLR     0x90.5
        CFI EndBlock cfiBlock23
        REQUIRE ?Subroutine0
        REQUIRE P1SEL
        REQUIRE _A_P1
        REQUIRE P1DIR
        ; // Fall through to label ?Subroutine0
//  154     halMcuWaitUs(2);
//  155 
//  156     HAL_E2PROM_SCK_CLR();  //SCL=0
//  157 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        ORL     0xfe,#0x20
        ; Setup parameters for call to function ITGMcuWaitUs
        ; Setup parameters for call to function ITGMcuWaitUs
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??ITGMcuWaitUs?relay
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_28
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        ANL     0xf4,#0xbf
        SETB    0x90.6
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond29) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond29) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond29) CFA_SP SP+-5
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_28
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        ORL     0xfe,#0x40
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_31:
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_27
        CFI (cfiCond33) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond33) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond33) CFA_SP SP+-5
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_28
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_29
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        ANL     0xf4,#0xdf
        SETB    0x90.5
        ORL     0xfe,#0x20
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36
//  158 
//  159 //-------------------------------------------------------------------
//  160 static void M3_I2cStop(void);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  161 void M3_I2cStop(void)//在SCL保持高电平期间，SDA由低变高，为停止信号
M3_I2cStop:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI Function M3_I2cStop
        CODE
//  162 {    
        FUNCALL M3_I2cStop, ITGMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_I2cStop, ITGMcuWaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  163       
//  164    HAL_E2PROM_SCK_SET();  //SCL=1
        LCALL   ?Subroutine5 & 0xFFFF
//  165 
//  166     HAL_E2PROM_SDA_CLR();  //SDA=0
//  167     halMcuWaitUs(2);
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function ITGMcuWaitUs
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??ITGMcuWaitUs?relay
//  168 
//  169     HAL_E2PROM_SDA_SET();  //SDA=1
        ANL     0xf4,#0xdf
        SETB    0x90.5
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock37
        REQUIRE P1SEL
        REQUIRE _A_P1
        REQUIRE P1DIR
//  170     halMcuWaitUs(2);
//  171     
//  172     HAL_E2PROM_SCK_CLR();  //SCL=0
//  173 }
//  174 
//  175 //-------------------------------------------------------------------
//  176 static void M3_I2cAck(void);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  177 void  M3_I2cAck(void)
M3_I2cAck:
        CFI Block cfiBlock38 Using cfiCommon0
        CFI Function M3_I2cAck
        CODE
//  178 {
        ; Saved register size: 0
        ; Auto size: 0
//  179     HAL_E2PROM_SCK_SET();     
        LCALL   ?Subroutine2 & 0xFFFF
//  180     HAL_E2PROM_SDA_SET();
//  181     HAL_E2PROM_SCK_CLR();
??CrossCallReturnLabel_28:
        LCALL   ?Subroutine7 & 0xFFFF
//  182 }
??CrossCallReturnLabel_5:
        LJMP    ?BRET
        CFI EndBlock cfiBlock38
        REQUIRE P1SEL
        REQUIRE _A_P1
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond40) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond40) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond40) CFA_SP SP+-5
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_5
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_20:
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_1
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_4
        CFI (cfiCond46) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond46) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond46) CFA_SP SP+-5
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_4
        CFI (cfiCond47) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond47) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond47) CFA_SP SP+-5
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_5
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_6
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        ANL     0xf4,#0xbf
        CLR     0x90.6
        ORL     0xfe,#0x40
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50
//  183 
//  184 //-------------------------------------------------------------------
//  185 static void M3_I2cNAck(void);
//  186 void M3_I2cNAck(void)
//  187 {
//  188     HAL_E2PROM_SCK_SET();
//  189     HAL_E2PROM_SDA_CLR(); 
//  190     HAL_E2PROM_SCK_CLR();
//  191 }
//  192 
//  193 
//  194 static void M3_WriteEEPROM(uint8 addr, uint8 ch);
//  195 void M3_WriteEEPROM(uint8 addr, uint8 ch)//往EEPROM里写数据（先写地址，在写数据）
//  196 {
//  197     M3_I2cStart();
//  198     
//  199     M3_I2cWrite(0xD2);//写器件地址，对于AT24C02来说，高四位固定为1010,后三位没有意义，最后一位为0时写，为1时读
//  200     M3_I2cAck();
//  201     
//  202     M3_I2cWrite(addr);
//  203     M3_I2cAck();
//  204     
//  205     M3_I2cWrite(ch); //data
//  206     M3_I2cAck();
//  207     
//  208     M3_I2cStop();
//  209 }
//  210 static uint8 M3_ReadEEPROM(uint8 addr);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  211 uint8 M3_ReadEEPROM(uint8 addr)
M3_ReadEEPROM:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI Function M3_ReadEEPROM
        CODE
//  212 {
        FUNCALL M3_ReadEEPROM, M3_I2cStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M3_I2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M3_I2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M3_I2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M3_I2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M3_I2cStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M3_I2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M3_I2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M3_I2cRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M3_ReadEEPROM, M3_I2cStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  213     uint8 res; 
//  214     
//  215     M3_I2cStart();    
        ; Setup parameters for call to function M3_I2cStart
        LCALL   ?Subroutine4 & 0xFFFF
//  216     M3_I2cWrite(0xD2); //器件设置为写状态
//  217     M3_I2cAck();     
//  218     M3_I2cWrite(addr);
??CrossCallReturnLabel_32:
        ; Setup parameters for call to function M3_I2cWrite
        MOV     A,R7
        MOV     R1,A
        LCALL   ??Subroutine17_0 & 0xFFFF
//  219     M3_I2cAck();
//  220     
//  221     M3_I2cStart();    
??CrossCallReturnLabel_34:
        ; Setup parameters for call to function M3_I2cStart
        LCALL   ??M3_I2cStart?relay
//  222     M3_I2cWrite(0xD3); //器件设置为读状态
        ; Setup parameters for call to function M3_I2cWrite
        MOV     R1,#-0x2d
        LCALL   ??Subroutine17_0 & 0xFFFF
//  223     M3_I2cAck();  
//  224     
//  225     res = M3_I2cRead();  
??CrossCallReturnLabel_35:
        ; Setup parameters for call to function M3_I2cRead
        LCALL   ??M3_I2cRead?relay
        MOV     A,R1
        MOV     R6,A
//  226     M3_I2cNAck();
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?Subroutine7 & 0xFFFF
//  227     M3_I2cStop();
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function M3_I2cStop
        LCALL   ??M3_I2cStop?relay
//  228 
//  229     return res;
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock51
        REQUIRE P1SEL
        REQUIRE _A_P1
        REQUIRE P1DIR
//  230 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_26:
        ANL     0xf4,#0xdf
        CLR     0x90.5
        ORL     0xfe,#0x20
        RET
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54
//  231 static void M3_Init(void);
//  232 void M3_Init(void)//初始化 SDA=1、SCL=1
//  233 {

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  234     static char initflg=0;
??initflg:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  235     HAL_E2PROM_SDA_DIR_OUT();
//  236     MCU_IO_OUTPUT(HAL_BOARD_IO_E2PROM_SCL_PORT, HAL_BOARD_IO_E2PROM_SCL_PIN,1);
//  237     if(initflg==0)
//  238         {
//  239              M3_WriteEEPROM(0x16,0x18);
//  240             initflg=1 ;           
//  241         }
//  242 }
//  243 
//  244 /*******************************************************************
//  245  * 名称      ITG_Pooling
//  246  * 功能      读取itg_3200的X,Y Z的角速度
//  247  * 入口参数  (int16* X_Value, int16* Y_Value, int16* Z_Value  )
//  248             *X_Value：X轴的16位角速度存放地址
//  249             *Y_Value：Y轴的16位角速度存放地址
//  250             *Z_Value：Z轴的16位角速度存放地址
//  251             角速度值为16位有符号数，单位为 度/S
//  252  * 出口参数  无  
//  253  *****************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  254 void  ITG_Pooling(int16* X_Value, int16* Y_Value, int16* Z_Value  )
ITG_Pooling:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI Function ITG_Pooling
        CODE
//  255 {
        FUNCALL ITG_Pooling, M3_I2cStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, M3_I2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, M3_I2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, M3_I2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, M3_I2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, M3_I2cWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, M3_I2cAck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, M3_I2cStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, M3_ReadEEPROM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, M3_ReadEEPROM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, ITGMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, M3_ReadEEPROM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, ITGMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, M3_ReadEEPROM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, ITGMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, M3_ReadEEPROM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, ITGMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, M3_ReadEEPROM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, ITGMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, M3_ReadEEPROM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ITG_Pooling, ITGMcuWaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     ?V0 + 14,R2
        MOV     ?V0 + 15,R3
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  256     int8 BMA_XM_Value,BMA_YM_Value,BMA_ZM_Value;
//  257     int8 BMA_XL_Value,BMA_YL_Value,BMA_ZL_Value;
//  258     int16 num_x1=0,num_y1=0,num_z1=0;
//  259     int16 num_x=0,num_y=0,num_z=0;
        MOV     ?V0 + 4,#0x0
        MOV     ?V0 + 5,#0x0
        MOV     R6,#0x0
        MOV     R7,#0x0
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R6
//  260     uint8 i = 0;
//  261     M3_Init();
        ANL     0xf4,#0xdf
        SETB    0x90.5
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     DPTR,#??initflg
        MOVX    A,@DPTR
        JNZ     ??ITG_Pooling_0
        ; Setup parameters for call to function M3_I2cStart
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_33:
        ; Setup parameters for call to function M3_I2cWrite
        MOV     R1,#0x16
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_36:
        ; Setup parameters for call to function M3_I2cWrite
        MOV     R1,#0x18
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_37:
        ; Setup parameters for call to function M3_I2cStop
        LCALL   ??M3_I2cStop?relay
        MOV     DPTR,#??initflg
        MOV     A,#0x1
        MOVX    @DPTR,A
//  262     for(i=0;i<10;i++)
??ITG_Pooling_0:
        MOV     ?V0 + 6,#0xa
//  263    {
//  264         while (!(M3_ReadEEPROM(0x1A) & 0x01)); 
??ITG_Pooling_1:
        ; Setup parameters for call to function M3_ReadEEPROM
        MOV     R1,#0x1a
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     C,0xE0 /* A   */.0
        JNC     ??ITG_Pooling_1
//  265         BMA_XM_Value = M3_ReadEEPROM(0x1D); 
        ; Setup parameters for call to function M3_ReadEEPROM
        MOV     R1,#0x1d
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     ?V0 + 7,A
//  266         halMcuWaitUs(5);
        ; Setup parameters for call to function ITGMcuWaitUs
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??ITGMcuWaitUs?relay
//  267         BMA_XL_Value = M3_ReadEEPROM(0x1E); 
        ; Setup parameters for call to function M3_ReadEEPROM
        MOV     R1,#0x1e
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     ?V0 + 8,A
//  268         halMcuWaitUs(5);
        ; Setup parameters for call to function ITGMcuWaitUs
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??ITGMcuWaitUs?relay
//  269         BMA_YM_Value = M3_ReadEEPROM(0x1F);
        ; Setup parameters for call to function M3_ReadEEPROM
        MOV     R1,#0x1f
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     ?V0 + 9,A
//  270         halMcuWaitUs(5);
        ; Setup parameters for call to function ITGMcuWaitUs
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??ITGMcuWaitUs?relay
//  271         BMA_YL_Value = M3_ReadEEPROM(0x20);
        ; Setup parameters for call to function M3_ReadEEPROM
        MOV     R1,#0x20
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     ?V0 + 10,A
//  272         halMcuWaitUs(5);       
        ; Setup parameters for call to function ITGMcuWaitUs
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??ITGMcuWaitUs?relay
//  273         BMA_ZM_Value = M3_ReadEEPROM(0x21);
        ; Setup parameters for call to function M3_ReadEEPROM
        MOV     R1,#0x21
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     ?V0 + 11,A
//  274         halMcuWaitUs(5);
        ; Setup parameters for call to function ITGMcuWaitUs
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??ITGMcuWaitUs?relay
//  275         BMA_ZL_Value = M3_ReadEEPROM(0x22);
        ; Setup parameters for call to function M3_ReadEEPROM
        MOV     R1,#0x22
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     ?V0 + 12,A
//  276         halMcuWaitUs(5);
        ; Setup parameters for call to function ITGMcuWaitUs
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??ITGMcuWaitUs?relay
//  277         num_x1 = (BMA_XM_Value << 8) | BMA_XL_Value;
//  278         num_y1 = (BMA_YM_Value << 8) | BMA_YL_Value;
//  279         num_z1 = (BMA_ZM_Value << 8) | BMA_ZL_Value;
//  280         num_x = num_x + num_x1;
        MOV     A,?V0 + 7
        MOV     R0,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     A,R0
        MOV     R1,A
        MOV     A,?V0 + 8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,?V0 + 4
        ADD     A,R0
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,R1
        MOV     ?V0 + 5,A
//  281         num_y = num_y + num_y1;
        MOV     A,?V0 + 9
        MOV     R0,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     A,R0
        MOV     R1,A
        MOV     A,?V0 + 10
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     A,R6
        ADD     A,R0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R7,A
//  282         num_z = num_z + num_z1;
        MOV     A,?V0 + 11
        MOV     R0,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     A,R0
        MOV     R1,A
        MOV     A,?V0 + 12
        LCALL   ?Subroutine8 & 0xFFFF
//  283    }
??CrossCallReturnLabel_9:
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,R1
        MOV     ?V0 + 1,A
        DEC     ?V0 + 6
        MOV     A,?V0 + 6
        JZ      $+5
        LJMP    ??ITG_Pooling_1 & 0xFFFF
//  284     // 换算成 度/S
//  285     *X_Value = (int16)(num_x/10/14.375);
        MOV     R0,?V0 + 4
        MOV     R1,?V0 + 5
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 8,R0
        MOV     A,R1
        MOV     ?V0 + 9,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 8
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_41660000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     R0,#?V0 + 8
        LCALL   ?FLT_TO_L
        MOV     DPL,?V0 + 14
        MOV     DPH,?V0 + 15
        MOV     A,?V0 + 8
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 9
        MOVX    @DPTR,A
//  286     *Y_Value = (int16)(num_y/10/14.375);
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_41660000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_DIV
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  287     *Z_Value = (int16)(num_z/10/14.375);
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_41660000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_DIV
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  288 }
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock55
        REQUIRE P1SEL
        REQUIRE _A_P1
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond56 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker58 Using cfiCommon1
        CFI (cfiPicker58) NoFunction
        CFI (cfiPicker58) Picker
        MOV     ?V0 + 4,R0
        MOV     A,R1
        MOV     ?V0 + 5,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker66 Using cfiCommon1
        CFI (cfiPicker66) NoFunction
        CFI (cfiPicker66) Picker
        LCALL   ??M3_ReadEEPROM?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond67 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        MOV     R2,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R3,A
        MOV     A,R2
        MOV     R0,A
        MOV     A,R1
        ORL     A,R3
        MOV     R1,A
        RET
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker73 Using cfiCommon1
        CFI (cfiPicker73) NoFunction
        CFI (cfiPicker73) Picker
        LCALL   ??M3_I2cStart?relay
        ; Setup parameters for call to function M3_I2cWrite
        ; Setup parameters for call to function M3_I2cWrite
        MOV     R1,#-0x2e
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiPicker73
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine17_0:
        CFI Block cfiCond74 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker80 Using cfiCommon1
        CFI (cfiPicker80) NoFunction
        CFI (cfiPicker80) Picker
        LCALL   ??M3_I2cWrite?relay
        ; Setup parameters for call to function M3_I2cAck
        ; Setup parameters for call to function M3_I2cAck
        ; Setup parameters for call to function M3_I2cAck
        ; Setup parameters for call to function M3_I2cAck
        ; Setup parameters for call to function M3_I2cAck
        ; Setup parameters for call to function M3_I2cAck
        LCALL   ??M3_I2cAck?relay
        RET
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiPicker80

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_41660000:
        DD 41660000H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ITGMcuWaitUs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ITGMcuWaitUs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M3_I2cWrite?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M3_I2cWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M3_I2cRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M3_I2cRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M3_I2cStart?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M3_I2cStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M3_I2cStop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M3_I2cStop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M3_I2cAck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M3_I2cAck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M3_ReadEEPROM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M3_ReadEEPROM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ITG_Pooling?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ITG_Pooling

        END
//  289 
//  290 
//  291 
//  292 
// 
// 827 bytes in segment BANKED_CODE
//  48 bytes in segment BANK_RELAYS
//   5 bytes in segment SFR_AN
//   4 bytes in segment XDATA_ROM_C
//   1 byte  in segment XDATA_Z
// 
// 875 bytes of CODE  memory
//   0 bytes of CONST memory (+ 4 bytes shared)
//   0 bytes of DATA  memory (+ 5 bytes shared)
//   1 byte  of XDATA memory
//
//Errors: none
//Warnings: none
