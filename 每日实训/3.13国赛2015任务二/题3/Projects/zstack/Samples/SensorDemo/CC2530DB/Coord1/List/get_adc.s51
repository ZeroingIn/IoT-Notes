///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        14/Mar/2017  10:37:43 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\SENSOR_DRV\get_adc.c         /
//    Command line       =  -f F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zs /
//                          tack\Samples\SensorDemo\CC2530DB\..\..\..\Tools\C /
//                          C2530DB\f8wCoord.cfg (-DCPU32MHZ                  /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f   /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\Tools\CC25 /
//                          30DB\f8wConfig.cfg (-DSECURE=0                    /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00100000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x8888                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ /
//                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\SENSO /
//                          R_DRV\get_adc.c -D ZIGBEEPRO -D HOLD_AUTO_START   /
//                          -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D   /
//                          NV_RESTORE -D ZTOOL_P1 -D xMT_TASK -D             /
//                          DEVICE_LOGICAL_TYPE=0 -D LOG_TYPE=0 -D            /
//                          xLCD_SUPPORTED -D xMT_TASK -lC                    /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\Coord1\List\ -lA    /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\Coord1\List\        /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\Coord1\Obj\ -e      /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zs /
//                          tack\Samples\SensorDemo\CC2530DB\ -I              /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\SOURCE\ -I       /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\MYAPP\ -I        /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\sensor_drv\ -I   /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\ZMAIN\TI25 /
//                          30DB\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Proje /
//                          cts\zstack\Samples\SensorDemo\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\MT\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ /
//                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I     /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\HAL\TARGET\CC2530EB\ -I                    /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\OSAL\MCU\CCSOC\ -I                         /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\OSAL\INCLUDE\ -I                           /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\STACK\AF\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶ /
//                          þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\NWK\ -I          /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\STACK\SEC\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ /
//                          ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I        /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\STACK\SYS\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ /
//                          ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I         /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\ZMAC\F8W\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶ /
//                          þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\ZMAC\ -I               /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\SERVICES\SADDR\ -I                         /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\SERVICES\SDATA\ -I                         /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\MAC\INCLUDE\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ /
//                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I  /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\MAC\LOW_LEVEL\srf04\ -I                    /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz      /
//                          --require_prototypes                              /
//    List file          =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\Coord1\List\get_adc /
//                          .s51                                              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME get_adc

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?L_IOR
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?L_SHL
        EXTERN ?SL_SHR
        EXTERN ?US_SHR
        EXTERN ?V0

        PUBLIC ??adC_ch?relay
        FUNCTION ??adC_ch?relay,0203H
        PUBLIC ??get_adc4ch?relay
        FUNCTION ??get_adc4ch?relay,0203H
        PUBLIC ??get_adc?relay
        FUNCTION ??get_adc?relay,0203H
        PUBLIC ??hal_adc4_Init?relay
        FUNCTION ??hal_adc4_Init?relay,0203H
        PUBLIC ??hal_adc_Init?relay
        FUNCTION ??hal_adc_Init?relay,0203H
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBWEAK APCFG
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK _A_TCON
        PUBWEAK __Constant_0
        PUBWEAK __Constant_14a
        PUBLIC adC_ch
        FUNCTION adC_ch,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC get_adc
        FUNCTION get_adc,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC get_adc4ch
        FUNCTION get_adc4ch,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC hal_adc4_Init
        FUNCTION hal_adc4_Init,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC hal_adc_Init
        FUNCTION hal_adc_Init,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
adC_ch              SYMBOL "adC_ch"
??adC_ch?relay      SYMBOL "?relay", adC_ch
get_adc4ch          SYMBOL "get_adc4ch"
??get_adc4ch?relay  SYMBOL "?relay", get_adc4ch
get_adc             SYMBOL "get_adc"
??get_adc?relay     SYMBOL "?relay", get_adc
hal_adc4_Init       SYMBOL "hal_adc4_Init"
??hal_adc4_Init?relay SYMBOL "?relay", hal_adc4_Init
hal_adc_Init        SYMBOL "hal_adc_Init"
??hal_adc_Init?relay SYMBOL "?relay", hal_adc_Init

// F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\SENSOR_DRV\get_adc.c
//    1 /**************************************************************************************************
//    2   Filename:      sh10.c
//    3 
//    4   Description:    sh10 driver 
//    5                   
//    6 **************************************************************************************************/
//    7 
//    8 /******************************************************************************
//    9  * INCLUDES
//   10  */
//   11 #include "ioCC2530.h"

        ASEGN SFR_AN:DATA:NOROOT,088H
// union <unnamed> volatile __sfr _A_TCON
_A_TCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr APCFG
APCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//   12 #include "hal_defs.h"
//   13 #include "hal_types.h"
//   14 #include "get_adc.h"
//   15 
//   16 
//   17 /******************************************************************************
//   18  * GLOBAL VARIABLES
//   19  */
//   20 void hal_adc_Init(void);
//   21  uint16 readVoltage(void);
//   22 //static volatile uint32 value;
//   23 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   24 void hal_adc_Init(void)
hal_adc_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function hal_adc_Init
        CODE
//   25 {
        ; Saved register size: 0
        ; Auto size: 0
//   26 	    APCFG  |=1;   
        ORL     0xf2,#0x1
//   27         P0SEL  |= (1 << (0));	
        ORL     0xf3,#0x1
//   28         P0DIR  &= ~(1 << (0));	
        ANL     0xfd,#0xfe
//   29     
//   30 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE APCFG
        REQUIRE P0SEL
        REQUIRE P0DIR
//   31 /******************************************************************************
//   32  * Ãû³Æ       get_adc
//   33  * ¹¦ÄÜ       ¶ÁÈ¡A/DÖµ
//   34  * Èë¿Ú²ÎÊý   ÎÞ
//   35  * ³ö¿Ú²ÎÊý   16Î»µçÑ¹Öµ£¬·Ö±æÂÊÎª10mV, Èç0x0102±íÊ¾2.58V
//   36  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   37 uint16 get_adc(void)
get_adc:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function get_adc
        CODE
//   38 {
        FUNCALL get_adc, hal_adc_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//   39    int32 value;
//   40    hal_adc_Init(); // ADC³õÊ¼»¯
        ; Setup parameters for call to function hal_adc_Init
        LCALL   ??hal_adc_Init?relay
//   41    ADCIF = 0;   //ÇåADC ÖÐ¶Ï±êÖ¾
        CLR     0x88.5
//   42    //²ÉÓÃ»ù×¼µçÑ¹avdd5:3.3V£¬Í¨µÀ0£¬Æô¶¯AD×ª»¯
//   43    ADCCON3 = (0x80 | 0x10 | 0x00);
        MOV     0xb6,#-0x70
//   44    while ( !ADCIF )
??get_adc_0:
        MOV     C,0x88.5
        JNC     ??get_adc_0
//   45    {
//   46        ;  //µÈ´ýAD×ª»¯½áÊø
//   47    }
//   48    value = ADCH;
        MOV     A,0xbb
        MOV     ?V0 + 4,A
//   49    value = value<< 8;
//   50    value |= ADCL;
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     A,#0x8
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     ?V0 + 0,0xba
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
//   51    if(value&0x8000)
        MOV     ?V0 + 1,?V0 + 5
        MOV     A,?V0 + 1
        ANL     A,#0x80
        JZ      ??get_adc_1
//   52        value=0;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
//   53   // ADÖµ×ª»¯³ÉµçÑ¹Öµ
//   54   // 0 ±íÊ¾ 0V £¬32768 ±íÊ¾ 3.3V
//   55   // µçÑ¹Öµ = (value*3.3)/32768 £¨V)
//   56   value = (value * 330);
//   57   value = value >> 15;   // ³ýÒÔ32768
//   58   // ·µ»Ø·Ö±æÂÊÎª0.01VµÄµçÑ¹Öµ
//   59   return (uint16)value;
??get_adc_1:
        MOV     DPTR,#__Constant_14a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        MOV     A,#0xf
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        REQUIRE _A_TCON
        REQUIRE ADCCON3
        REQUIRE ADCH
        REQUIRE ADCL
        ; // Fall through to label ?Subroutine0
//   60 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//   61 #define ACH1    0
//   62 #define ACH2    4
//   63 #define ACH3    5
//   64 #define ACH4    6
//   65 
//   66 void hal_adc4_Init(void);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   67 void hal_adc4_Init(void)
hal_adc4_Init:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function hal_adc4_Init
        CODE
//   68 {
        ; Saved register size: 0
        ; Auto size: 0
//   69 	    APCFG  |= (1 << ACH1) | (1 << ACH2)| (1 << ACH3)| (1 << ACH4);   
        ORL     0xf2,#0x71
//   70         P0SEL  |= (1 << ACH1) | (1 << ACH2)| (1 << ACH3)| (1 << ACH4);	
        ORL     0xf3,#0x71
//   71         P0DIR  &= ~((1 << ACH1) | (1 << ACH2)| (1 << ACH3)| (1 << ACH4));	
        ANL     0xfd,#0x8e
//   72     
//   73 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
        REQUIRE APCFG
        REQUIRE P0SEL
        REQUIRE P0DIR
//   74 #define AD4MA 32768*150*4/3300
//   75 #define AD20MA 32768*150*20/3300
//   76 //return 10ADÖµ£¬0---0v, 3ff---3.3v
//   77 uint16 adC_ch(uint8 ch);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   78 uint16 adC_ch(uint8 ch)
adC_ch:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function adC_ch
        CODE
//   79 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
//   80     int32 value;
//   81     ADCIF = 0;   //ÇåADC ÖÐ¶Ï±êÖ¾
        CLR     0x88.5
//   82    //²ÉÓÃ»ù×¼µçÑ¹avdd5:3.3V£¬Í¨µÀch£¬Æô¶¯AD×ª»¯
//   83    ADCCON3 = (0x80 | 0x10 | (ch&0x0f) );
        MOV     A,#0xf
        ANL     A,R4
        ORL     A,#0x90
        MOV     0xb6,A
//   84    while ( !ADCIF )
??adC_ch_0:
        MOV     C,0x88.5
        JNC     ??adC_ch_0
//   85    {
//   86        ;  //µÈ´ýAD×ª»¯½áÊø
//   87    }
//   88    value = ADCH;
        MOV     A,0xbb
        MOV     ?V0 + 4,A
//   89    value = value<< 8;
//   90    value |= ADCL;
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     A,#0x8
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     ?V0 + 0,0xba
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
//   91    if(value&0x8000)
        MOV     ?V0 + 1,?V0 + 5
        MOV     A,?V0 + 1
        ANL     A,#0x80
        JZ      ??adC_ch_1
//   92        value=0;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
//   93    value= value>>5;
//   94    return (uint16)value;
??adC_ch_1:
        MOV     A,#0x5
        MOV     R0,#?V0 + 4
        LCALL   ?US_SHR
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock4
        REQUIRE _A_TCON
        REQUIRE ADCCON3
        REQUIRE ADCH
        REQUIRE ADCL
//   95    /*
//   96   // ADÖµ×ª»¯³ÉµçÑ¹Öµ
//   97   // 0 ±íÊ¾ 0V £¬32768 ±íÊ¾ 3.3V
//   98   // µçÁ÷ 0--4ma, 255--20ma, µç×è150r
//   99   value = (value - AD4MA)*255/(AD20MA - AD4MA);
//  100   if(value<0)
//  101       return    0;
//  102   if(value>255)
//  103       return    255;
//  104   return    (uint8)value&0xff;*/
//  105 }
//  106 /******************************************************************************
//  107  * Ãû³Æ       get_adc4
//  108  * ¹¦ÄÜ       ¶ÁÈ¡ËÄÍ¨µÀA/DÖµ ch0 ch4 ch5 ch6 
//  109  * Èë¿Ú²ÎÊý   ÎÞ
//  110  * ³ö¿Ú²ÎÊý   
//  111  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  112 void get_adc4ch(uint8 *buf)
get_adc4ch:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function get_adc4ch
        CODE
//  113 {
        FUNCALL get_adc4ch, hal_adc4_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_adc4ch, adC_ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_adc4ch, adC_ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_adc4ch, adC_ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_adc4ch, adC_ch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  114    uint16 value;
//  115    hal_adc4_Init(); // ADC³õÊ¼»¯
        ; Setup parameters for call to function hal_adc4_Init
        LCALL   ??hal_adc4_Init?relay
//  116    value=adC_ch(ACH1);
        ; Setup parameters for call to function adC_ch
        MOV     R1,#0x0
        LCALL   ?Subroutine2 & 0xFFFF
//  117    *buf=value;
//  118    buf++;
//  119    *buf=value>>8;
//  120    buf++;
??CrossCallReturnLabel_2:
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  121    value=adC_ch(ACH2);
        ; Setup parameters for call to function adC_ch
        MOV     R1,#0x4
        LCALL   ?Subroutine1 & 0xFFFF
//  122    *buf=value;
//  123    buf++;
//  124    *buf=value>>8;
//  125    buf++;
//  126    value=adC_ch(ACH3);
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function adC_ch
        MOV     R1,#0x5
        LCALL   ?Subroutine1 & 0xFFFF
//  127    *buf=value;
//  128    buf++;
//  129    *buf=value>>8;
//  130    buf++;
//  131    value=adC_ch(ACH4);
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function adC_ch
        MOV     R1,#0x6
        LCALL   ?Subroutine2 & 0xFFFF
//  132    *buf=value;
//  133    buf++;
//  134    *buf=value>>8;
//  135 }
??CrossCallReturnLabel_3:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_3
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_0
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_1
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        LCALL   ??adC_ch?relay
        MOV     A,R2
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        INC     DPTR
        INC     R6
        INC     R6
        MOV     R7,DPH
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_14a:
        DD 330

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??hal_adc_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    hal_adc_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??get_adc?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    get_adc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??hal_adc4_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    hal_adc4_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??adC_ch?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    adC_ch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??get_adc4ch?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    get_adc4ch

        END
//  136 
//  137 
//  138 
//  139 
//  140 
//  141 
//  142 
//  143 
//  144 
//  145 
//  146 
//  147 
//  148 
//  149 
//  150 
//  151 
//  152 
//  153 
//  154 
//  155 
//  156 
//  157 
//  158 
//  159 
//  160 
// 
// 271 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//   7 bytes in segment SFR_AN
//   8 bytes in segment XDATA_ROM_C
// 
// 301 bytes of CODE  memory
//   0 bytes of CONST memory (+ 8 bytes shared)
//   0 bytes of DATA  memory (+ 7 bytes shared)
//
//Errors: none
//Warnings: none
