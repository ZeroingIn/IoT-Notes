###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         14/Mar/2017  16:39:07 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\MYAPP\UART_PRINT.c             #
#    Command line       =  -f F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zst #
#                          ack\Samples\SensorDemo\CC2530DB\..\..\..\Tools\CC2 #
#                          530DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\Tools\CC2530 #
#                          DB\f8wConfig.cfg (-DSECURE=0                       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00100000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x8888                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\MYAPP\UART_PRINT.c -D VER=2.3  #
#                          -D ZIGBEEPRO -D NWK_AUTO_POLL -D HOLD_AUTO_START   #
#                          -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D    #
#                          xNV_RESTORE -D ZTOOL_P1 -D MT_TASK -D              #
#                          DEVICE_LOGICAL_TYPE=01 -D LOG_TYPE=02 -D           #
#                          xUART_SENSOR -D xLCD_SUPPORTED -D UART_LOOK -lC    #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev2\List\ -lA     #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev2\List\         #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev2\Obj\ -e       #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zst #
#                          ack\Samples\SensorDemo\CC2530DB\ -I                #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\SOURCE\ -I         #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\MYAPP\ -I          #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\sensor_drv\ -I     #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\ZMAIN\TI2530 #
#                          DB\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects #
#                          \zstack\Samples\SensorDemo\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\MT\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\ #
#                          Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\HAL\TARGET\CC2530EB\ -I                       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\OSAL\MCU\CCSOC\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ #
#                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I      #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\AF\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ì #
#                          â3\Projects\zstack\Samples\SensorDemo\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I               #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\SEC\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\ #
#                          Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\SAPI\ -I             #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\SYS\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\ #
#                          Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\ZDO\ -I              #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\ZMAC\F8W\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ì #
#                          â3\Projects\zstack\Samples\SensorDemo\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\ZMAC\ -I                    #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\SERVICES\SADDR\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ #
#                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I    #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\INCLUDE\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶ #
#                          þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\LOW_LEVEL\srf04\ -I                       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz         #
#                          --require_prototypes                               #
#    List file          =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev2\List\UART_PRI #
#                          NT.lst                                             #
#    Object file        =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev2\Obj\UART_PRIN #
#                          T.r51                                              #
#                                                                             #
#                                                                             #
###############################################################################

F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\MYAPP\UART_PRINT.c
      1          #include "hal_defs.h"
      2          #include "hal_uart.h"
      3          #include "OnBoard.h"
      4          #include "UART_PRINT.h"
      5          #include <stdio.h>
      6          #include <string.h>
      7          #include	<stdarg.h>
      8          
      9          
     10          
     11          /**********************************************************
     12          func: ½ÓÊÕ´®¿ÚÊý¾Ý°ü
     13          ²ÎÊý£º
     14                1. *buf -- ´®¿Ú½ÓÊÕÊý¾ÝËù´æ·ÅµÄµØ·½
     15                2. maxlen -- ´®¿Ú½ÓÊÕÊý¾ÝµÄ×î´ó³¤¶È
     16          retuen: uint16 ½ÓÊÕµ½µÄÊý¾Ý³¤¶È
     17          ***********************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     18          uint16  uart_read(uint8 *buf, uint16 maxlen)
   \                     uart_read:
     19          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
     20              uint16 slen=0; 
   \   00000D   7E00         MOV     R6,#0x0
   \   00000F   7F00         MOV     R7,#0x0
     21              uint8 dtime=0;
   \   000011   8E..         MOV     ?V0 + 4,R6
   \   000013   8003         SJMP    ??uart_read_0
     22              while(dtime<20)
     23              {    
     24                  while(HalUARTRead(HAL_UART_PORT_0,buf+slen, 1))
     25                  {
     26                      slen++;
     27                      if(slen>=maxlen)
     28                          return  slen;
     29                      dtime=0;
   \                     ??uart_read_1:
   \   000015   75..00       MOV     ?V0 + 4,#0x0
   \                     ??uart_read_0:
   \   000018                ; Setup parameters for call to function HalUARTRead
   \   000018   7C01         MOV     R4,#0x1
   \   00001A   7D00         MOV     R5,#0x0
   \   00001C   E5..         MOV     A,?V0 + 2
   \   00001E   2E           ADD     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   E5..         MOV     A,?V0 + 3
   \   000022   3F           ADDC    A,R7
   \   000023   FB           MOV     R3,A
   \   000024   7900         MOV     R1,#0x0
   \   000026   12....       LCALL   ??HalUARTRead?relay
   \   000029   8B..         MOV     ?V0 + 7,R3
   \   00002B   EA           MOV     A,R2
   \   00002C   45..         ORL     A,?V0 + 7
   \   00002E   601A         JZ      ??uart_read_2
   \   000030   EE           MOV     A,R6
   \   000031   2401         ADD     A,#0x1
   \   000033   0E           INC     R6
   \   000034   EF           MOV     A,R7
   \   000035   3400         ADDC    A,#0x0
   \   000037   FF           MOV     R7,A
   \   000038   C3           CLR     C
   \   000039   EE           MOV     A,R6
   \   00003A   95..         SUBB    A,?V0 + 0
   \   00003C   EF           MOV     A,R7
   \   00003D   95..         SUBB    A,?V0 + 1
   \   00003F   40D4         JC      ??uart_read_1
   \                     ??uart_read_3:
   \   000041   EE           MOV     A,R6
   \   000042   FA           MOV     R2,A
   \   000043   EF           MOV     A,R7
   \   000044   FB           MOV     R3,A
   \   000045   7F08         MOV     R7,#0x8
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA
     30                  }
     31                  MicroWait (30);     // Wait 30us; 
   \                     ??uart_read_2:
   \   00004A                ; Setup parameters for call to function Onboard_wait
   \   00004A   7A1E         MOV     R2,#0x1e
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   12....       LCALL   ??Onboard_wait?relay
     32                  dtime++;
   \   000051   05..         INC     ?V0 + 4
     33              }    
   \   000053   E5..         MOV     A,?V0 + 4
   \   000055   C3           CLR     C
   \   000056   9414         SUBB    A,#0x14
   \   000058   50E7         JNC     ??uart_read_3
   \   00005A   80BC         SJMP    ??uart_read_0
     34             return  slen; 
     35          }
     36          /*****
     37          °´printf¸ñÊ½´òÓ¡Êä³ö×Ö·û´®
     38          
     39          ***/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     40          void	printf_str( char *buf, char *fmt,... )
   \                     printf_str:
     41          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
     42              va_list ap;
     43              va_start(ap,fmt);
   \   00000A   740C         MOV     A,#0xc
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine2 & 0xFFFF
     44              vsprintf(buf,fmt,ap);
   \                     ??CrossCallReturnLabel_0:
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   12....       LCALL   ??vsprintf?relay
   \   000018   7402         MOV     A,#0x2
   \   00001A   12....       LCALL   ?DEALLOC_XSTACK8
     45              va_end(ap);
     46          }
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000022                REQUIRE ?Subroutine0
   \   000022                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   A882         MOV     R0,DPL
   \   000002   A983         MOV     R1,DPH
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   E8           MOV     A,R0
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   E9           MOV     A,R1
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F                ; Setup parameters for call to function vsprintf
   \   00000F                ; Setup parameters for call to function vsprintf
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   8582..       MOV     ?V0 + 0,DPL
   \   000018   8583..       MOV     ?V0 + 1,DPH
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   22           RET
     47          /********/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     48          void	uart_printf(unsigned char *fmt,...)
   \                     uart_printf:
     49          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 258
   \   000005   7582FE       MOV     DPL,#-0x2
   \   000008   7583FE       MOV     DPH,#-0x2
   \   00000B   12....       LCALL   ?ADD_XSTACK_DISP0_16
     50              va_list ap;
     51              unsigned char str[256];
     52          
     53              va_start(ap,fmt);
   \   00000E   75820C       MOV     DPL,#0xc
   \   000011   758301       MOV     DPH,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_16
   \   000017   12....       LCALL   ?Subroutine2 & 0xFFFF
     54              vsprintf(str,fmt,ap);
                              ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

      vsprintf(str,fmt,ap);
                   ^
"F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\MYAPP\UART_PRINT.c",54  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \                     ??CrossCallReturnLabel_1:
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   EA           MOV     A,R2
   \   00001E   FC           MOV     R4,A
   \   00001F   EB           MOV     A,R3
   \   000020   FD           MOV     R5,A
   \   000021   7404         MOV     A,#0x4
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   AA82         MOV     R2,DPL
   \   000028   AB83         MOV     R3,DPH
   \   00002A   12....       LCALL   ??vsprintf?relay
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?DEALLOC_XSTACK8
     55              UartWrite(str,strlen(str));
                                          ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \   000032                ; Setup parameters for call to function HalUARTWrite
   \   000032                ; Setup parameters for call to function strlen
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   AA82         MOV     R2,DPL
   \   000039   AB83         MOV     R3,DPH
   \   00003B   12....       LCALL   ??strlen?relay
   \   00003E   EA           MOV     A,R2
   \   00003F   FC           MOV     R4,A
   \   000040   EB           MOV     A,R3
   \   000041   FD           MOV     R5,A
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   AA82         MOV     R2,DPL
   \   000049   AB83         MOV     R3,DPH
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   12....       LCALL   ??HalUARTWrite?relay
     56              va_end(ap);
     57          }
   \   000050   758202       MOV     DPL,#0x2
   \   000053   758301       MOV     DPH,#0x1
   \   000056   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   000059   80..         SJMP    ?Subroutine0
     58          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     59          void	uart_enter(void)
   \                     uart_enter:
     60          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     61              
     62                 uart_printf("\r\n");
   \   000004                ; Setup parameters for call to function uart_printf
   \   000004   7A..         MOV     R2,#`?<Constant "\\r\\n">` & 0xff
   \   000006   7B..         MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000008   12....       LCALL   ??uart_printf?relay
     63                
     64          }
   \   00000B                REQUIRE ?Subroutine1
   \   00000B                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
     65          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     66          void	uart_datas(void * fmt,uint16 len)
   \                     uart_datas:
     67          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
     68              char * ptr;
     69              ptr=fmt;
   \   000009   EA           MOV     A,R2
   \   00000A   FE           MOV     R6,A
   \   00000B   EB           MOV     A,R3
   \   00000C   FF           MOV     R7,A
   \   00000D   8024         SJMP    ??uart_datas_0
     70              while(len--)
     71              {
     72                  uart_printf("%02x ",*ptr );
   \                     ??uart_datas_1:
   \   00000F                ; Setup parameters for call to function uart_printf
   \   00000F   8E82         MOV     DPL,R6
   \   000011   8F83         MOV     DPH,R7
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 2,A
   \   000016   75..00       MOV     ?V0 + 3,#0x0
   \   000019   78..         MOV     R0,#?V0 + 2
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   7A..         MOV     R2,#`?<Constant "%02x ">` & 0xff
   \   000020   7B..         MOV     R3,#(`?<Constant "%02x ">` >> 8) & 0xff
   \   000022   12....       LCALL   ??uart_printf?relay
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?DEALLOC_XSTACK8
     73                  ptr++;
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   A3           INC     DPTR
   \   00002F   AE82         MOV     R6,DPL
   \   000031   AF83         MOV     R7,DPH
     74              }
   \                     ??uart_datas_0:
   \   000033   A8..         MOV     R0,?V0 + 0
   \   000035   A9..         MOV     R1,?V0 + 1
   \   000037   E8           MOV     A,R0
   \   000038   24FF         ADD     A,#-0x1
   \   00003A   F5..         MOV     ?V0 + 0,A
   \   00003C   E9           MOV     A,R1
   \   00003D   34FF         ADDC    A,#-0x1
   \   00003F   F5..         MOV     ?V0 + 1,A
   \   000041   E8           MOV     A,R0
   \   000042   49           ORL     A,R1
   \   000043   70CA         JNZ     ??uart_datas_1
     75               uart_enter();   
   \   000045                ; Setup parameters for call to function uart_printf
   \   000045   7A..         MOV     R2,#`?<Constant "\\r\\n">` & 0xff
   \   000047   7B..         MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000049   12....       LCALL   ??uart_printf?relay
     76          }
   \   00004C   7F04         MOV     R7,#0x4
   \   00004E   02....       LJMP    ?BANKED_LEAVE_XDATA
     77          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     78          uint8   lrc_checksum(uint8* buf, uint8 len)
   \                     lrc_checksum:
     79          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
     80             uint8    lrc=0;
   \   000006   7800         MOV     R0,#0x0
   \   000008   800C         SJMP    ??lrc_checksum_0
     81             while(len--)
     82             {
     83                  lrc+=*buf;
   \                     ??lrc_checksum_1:
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   28           ADD     A,R0
   \   000010   F8           MOV     R0,A
     84                  buf++;
   \   000011   A3           INC     DPTR
   \   000012   AA82         MOV     R2,DPL
   \   000014   AB83         MOV     R3,DPH
     85             }
   \                     ??lrc_checksum_0:
   \   000016   EC           MOV     A,R4
   \   000017   FD           MOV     R5,A
   \   000018   74FF         MOV     A,#-0x1
   \   00001A   2D           ADD     A,R5
   \   00001B   1C           DEC     R4
   \   00001C   04           INC     A
   \   00001D   70EB         JNZ     ??lrc_checksum_1
     86             lrc =~lrc;
     87             lrc++;
     88             return   lrc;
   \   00001F   E8           MOV     A,R0
   \   000020   F4           CPL     A
   \   000021   04           INC     A
   \   000022   F9           MOV     R1,A
   \   000023   80..         SJMP    ?Subroutine1
     89          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??uart_read?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uart_read

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??printf_str?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    printf_str

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??uart_printf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uart_printf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??uart_enter?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uart_enter

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??uart_datas?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uart_datas

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??lrc_checksum?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    lrc_checksum

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%02x ">`:
   \   000000   25303278     DB "%02x "
   \            2000    

   Maximum stack usage in bytes:

     Function          ISTACK PSTACK XSTACK
     --------          ------ ------ ------
     lrc_checksum          2      0      0
     printf_str            0      0     14
       -> vsprintf         0      0     28
     uart_datas            0      0     14
       -> uart_printf      0      0     28
       -> uart_printf      0      0     24
     uart_enter            2      0      0
       -> uart_printf      4      0      0
     uart_printf           0      0    284
       -> vsprintf         0      0    540
       -> strlen           0      0    536
       -> HalUARTWrite     0      0    536
     uart_read             0      0     16
       -> HalUARTRead      0      0     32
       -> Onboard_wait     0      0     32


   Segment part sizes:

     Function/Label       Bytes
     --------------       -----
     uart_read              92
     printf_str             34
     ?Subroutine0            5
     ?Subroutine2           30
     uart_printf            91
     uart_enter             11
     ?Subroutine1            7
     uart_datas             81
     lrc_checksum           37
     ??uart_read?relay       6
     ??printf_str?relay      6
     ??uart_printf?relay     6
     ??uart_enter?relay      6
     ??uart_datas?relay      6
     ??lrc_checksum?relay    6
     ?<Constant "\r\n">      3
     ?<Constant "%02x ">     6

 
 388 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   9 bytes in segment XDATA_ROM_C
 
 424 bytes of CODE  memory
   9 bytes of CONST memory

Errors: none
Warnings: 3
