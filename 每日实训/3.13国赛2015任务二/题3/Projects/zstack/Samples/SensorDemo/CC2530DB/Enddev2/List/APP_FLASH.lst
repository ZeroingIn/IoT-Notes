###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         14/Mar/2017  16:39:04 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\MYAPP\APP_FLASH.c              #
#    Command line       =  -f F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zst #
#                          ack\Samples\SensorDemo\CC2530DB\..\..\..\Tools\CC2 #
#                          530DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\Tools\CC2530 #
#                          DB\f8wConfig.cfg (-DSECURE=0                       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00100000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x8888                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\MYAPP\APP_FLASH.c -D VER=2.3   #
#                          -D ZIGBEEPRO -D NWK_AUTO_POLL -D HOLD_AUTO_START   #
#                          -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D    #
#                          xNV_RESTORE -D ZTOOL_P1 -D MT_TASK -D              #
#                          DEVICE_LOGICAL_TYPE=01 -D LOG_TYPE=02 -D           #
#                          xUART_SENSOR -D xLCD_SUPPORTED -D UART_LOOK -lC    #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev2\List\ -lA     #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev2\List\         #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev2\Obj\ -e       #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zst #
#                          ack\Samples\SensorDemo\CC2530DB\ -I                #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\SOURCE\ -I         #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\MYAPP\ -I          #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\sensor_drv\ -I     #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\ZMAIN\TI2530 #
#                          DB\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects #
#                          \zstack\Samples\SensorDemo\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\MT\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\ #
#                          Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\HAL\TARGET\CC2530EB\ -I                       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\OSAL\MCU\CCSOC\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ #
#                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I      #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\AF\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ì #
#                          â3\Projects\zstack\Samples\SensorDemo\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I               #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\SEC\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\ #
#                          Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\SAPI\ -I             #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\SYS\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\ #
#                          Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\ZDO\ -I              #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\ZMAC\F8W\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ì #
#                          â3\Projects\zstack\Samples\SensorDemo\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\ZMAC\ -I                    #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\SERVICES\SADDR\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ #
#                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I    #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\INCLUDE\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶ #
#                          þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\LOW_LEVEL\srf04\ -I                       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz         #
#                          --require_prototypes                               #
#    List file          =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev2\List\APP_FLAS #
#                          H.lst                                              #
#    Object file        =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev2\Obj\APP_FLASH #
#                          .r51                                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\MYAPP\APP_FLASH.c
      1          /**************************************************************************************************
      2            Filename:       appflash.c
      3            Revised:        $Date: 2010-01-06 16:39:32 -0800 (Wed, 06 Jan 2010) $
      4            Revision:       $Revision: 21446 $
      5          
      6            Description:    Z-Stack Simple Application Interface.
      7          
      8          **************************************************************************************************/
      9          
     10          /******************************************************************************
     11           * INCLUDES
     12           */
     13          
     14          #include "ZComDef.h"
     15          #include "hal_drivers.h"
     16          #include "OSAL.h"
     17          #include "OSAL_Tasks.h"
     18          //#include "OSAL_Custom.h"
     19          
     20          #if defined ( MT_TASK )
     21            #include "MT.h"
     22            #include "MT_TASK.h"
     23          #endif
     24          
     25          #include "nwk.h"
     26          #include "APS.h"
     27          #include "ZDApp.h"
     28          
     29          #include "osal_nv.h"
     30          #include "NLMEDE.h"
     31          #include "AF.h"
     32          #include "OnBoard.h"
     33          #include "nwk_util.h"
     34          #include "ZDProfile.h"
     35          #include "ZDObject.h"
     36          #include "hal_led.h"
     37          #include "hal_key.h"
     38          #include "hal_lcd.h"
     39          #include "sapi.h"
     40          #include "MT_SAPI.h"
     41          #include "UART_PRINT.h"
     42          #include "app_flash.h"
     43          #include "DemoApp.h"
     44          
     45          void test_read_flash2 (void );
     46          void test_read_flash1 (void );
     47          void    test_nv_item(void);
     48          void    delay(uint16 i);
     49          uint8   zb_Readchannel(void);
     50          void   zb_Writechannel(uint8 ch);
     51          void    read_appnv(uint16 id, uint8 len,void * buf);
     52          void    write_appnv(uint16 id, uint8 len,void * buf);
     53          void    zb_Readpandid(void * buf);
     54          void   zb_Writepandid(void * buf);
     55          
     56          #define TYPE_RAL    0x12

   \                                 In  segment XDATA_ROM_C, align 1
     57          const uint32 chn[16]={0x800,0x1000,0x2000,0x4000,0x8000,0x10000,0x20000,0x40000,
   \                     chn:
   \   000000   00080000     DD 2048
   \   000004   00100000     DD 4096
   \   000008   00200000     DD 8192
   \   00000C   00400000     DD 16384
   \   000010   00800000     DD 32768
   \   000014   00000100     DD 65536
   \   000018   00000200     DD 131072
   \   00001C   00000400     DD 262144
   \   000020   00000800     DD 524288
   \   000024   00001000     DD 1048576
   \   000028   00002000     DD 2097152
   \   00002C   00004000     DD 4194304
   \   000030   00008000     DD 8388608
   \   000034   00000001     DD 16777216
   \   000038   00000002     DD 33554432
   \   00003C   00000004     DD 67108864
     58              0x80000,0x100000,0x200000,0x400000,0x800000,0x1000000,0x2000000,0x4000000};
     59          /******************************************************************************
     60           * @fn          
     61           *
     62           * @brief       .
     63           *
     64           * @param       
     65           *
     66           *
     67           * @return      
     68           *
     69           *******************************************************************/
     70          
     71          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     72          void    delay(uint16 i)
   \                     delay:
     73          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     74              uint8   j;
     75              while(i--)
   \                     ??delay_0:
   \   000000   EA           MOV     A,R2
   \   000001   F8           MOV     R0,A
   \   000002   EB           MOV     A,R3
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   24FF         ADD     A,#-0x1
   \   000007   1A           DEC     R2
   \   000008   E9           MOV     A,R1
   \   000009   34FF         ADDC    A,#-0x1
   \   00000B   FB           MOV     R3,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   6013         JZ      ??delay_1
     76              {
     77                  for(j=0; j<250; j--)
   \   000010   7800         MOV     R0,#0x0
     78                  {
     79                      asm("NOP");
   \                     ??delay_2:
   \   000012   00           NOP
     80                      asm("NOP");
   \   000013   00           NOP
     81                      asm("NOP");
   \   000014   00           NOP
     82                      asm("NOP");
   \   000015   00           NOP
     83                      asm("NOP");
   \   000016   00           NOP
     84                      asm("NOP");
   \   000017   00           NOP
     85                      asm("NOP");
   \   000018   00           NOP
     86                      asm("NOP");
   \   000019   00           NOP
     87                  }
   \   00001A   18           DEC     R0
   \   00001B   E8           MOV     A,R0
   \   00001C   C3           CLR     C
   \   00001D   94FA         SUBB    A,#-0x6
   \   00001F   50DF         JNC     ??delay_0
   \   000021   80EF         SJMP    ??delay_2
     88              }
     89          }
   \                     ??delay_1:
   \   000023   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     90          uint8 calcXOR(uint8 *pBuf, uint8 len)
   \                     calcXOR:
     91          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
     92            uint8 rtrn = 0;
   \   000006   7900         MOV     R1,#0x0
   \   000008   800D         SJMP    ??calcXOR_0
     93          
     94            while (len--)
     95            {
     96              rtrn ^= *pBuf++;
   \                     ??calcXOR_1:
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   C9           XCH     A,R1
   \   000010   69           XRL     A,R1
   \   000011   F9           MOV     R1,A
   \   000012   A3           INC     DPTR
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
     97            }
   \                     ??calcXOR_0:
   \   000017   E8           MOV     A,R0
   \   000018   FC           MOV     R4,A
   \   000019   74FF         MOV     A,#-0x1
   \   00001B   2C           ADD     A,R4
   \   00001C   18           DEC     R0
   \   00001D   04           INC     A
   \   00001E   70EA         JNZ     ??calcXOR_1
     98          
     99            return rtrn;
   \   000020                REQUIRE ?Subroutine0
   \   000020                ; // Fall through to label ?Subroutine0
    100          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    101          
    102          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    103          void    zb_Readpandid(void * buf)
   \                     zb_Readpandid:
    104          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    105              zb_ReadConfiguration(ZCD_NV_PANID,2, buf );
   \   000004                ; Setup parameters for call to function zb_ReadConfiguration
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007   FD           MOV     R5,A
   \   000008   7A02         MOV     R2,#0x2
   \   00000A   7983         MOV     R1,#-0x7d
   \   00000C   12....       LCALL   ??zb_ReadConfiguration?relay
    106          }
   \   00000F   80..         SJMP    ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    107          void   zb_Writepandid(void * buf)
   \                     zb_Writepandid:
    108          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    109              zb_WriteConfiguration(ZCD_NV_PANID, 2, buf );
   \   000004                ; Setup parameters for call to function zb_WriteConfiguration
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007   FD           MOV     R5,A
   \   000008   7A02         MOV     R2,#0x2
   \   00000A   7983         MOV     R1,#-0x7d
   \   00000C   12....       LCALL   ??zb_WriteConfiguration?relay
    110          }
   \   00000F   80..         SJMP    ?Subroutine0
    111          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    112          uint8   zb_Readchannel(void)
   \                     zb_Readchannel:
    113          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    114              uint8   ch;
    115              uint32  channel;
    116              zb_ReadConfiguration(ZCD_NV_CHANLIST,4, &channel );
   \   00000A                ; Setup parameters for call to function zb_ReadConfiguration
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7A04         MOV     R2,#0x4
   \   000016   7984         MOV     R1,#-0x7c
   \   000018   12....       LCALL   ??zb_ReadConfiguration?relay
    117              for(ch=11; ch<27; ch++)
   \   00001B   790B         MOV     R1,#0xb
    118              {
    119                  if(channel == chn[ch-11] )
   \                     ??zb_Readchannel_0:
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   C082         PUSH    DPL
   \   000025   C083         PUSH    DPH
   \   000027   89..         MOV     ?V0 + 0,R1
   \   000029   75..00       MOV     ?V0 + 1,#0x0
   \   00002C   7402         MOV     A,#0x2
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?S_SHL
   \   000033   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000036   78..         MOV     R0,#?V0 + 0
   \   000038   12....       LCALL   ?L_MOV_X
   \   00003B   D083         POP     DPH
   \   00003D   D082         POP     DPL
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?L_EQ_X
   \   000044   6009         JZ      ??zb_Readchannel_1
    120                     return ch; 
    121              }
   \   000046   09           INC     R1
   \   000047   E9           MOV     A,R1
   \   000048   C3           CLR     C
   \   000049   941B         SUBB    A,#0x1b
   \   00004B   40D0         JC      ??zb_Readchannel_0
    122              return  0;
   \   00004D   7900         MOV     R1,#0x0
   \                     ??zb_Readchannel_1:
   \   00004F   7404         MOV     A,#0x4
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054                REQUIRE ?Subroutine1
   \   000054                ; // Fall through to label ?Subroutine1
    123          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   74..         MOV     A,#(chn + 212) & 0xff
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   F582         MOV     DPL,A
   \   000006   74..         MOV     A,#((chn - 44) >> 8) & 0xff
   \   000008   35..         ADDC    A,?V0 + 1
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET
    124          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    125          void   zb_Writechannel(uint8 ch)
   \                     zb_Writechannel:
    126          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    127              
    128              uint32  channel;
    129              if ( (ch<11) || (ch>26))
   \   00000C   74F5         MOV     A,#-0xb
   \   00000E   2E           ADD     A,R6
   \   00000F   C3           CLR     C
   \   000010   9410         SUBB    A,#0x10
   \   000012   502C         JNC     ??zb_Writechannel_0
    130                  return;
    131              channel = chn[ch-11];
   \   000014   8E..         MOV     ?V0 + 0,R6
   \   000016   75..00       MOV     ?V0 + 1,#0x0
   \   000019   7402         MOV     A,#0x2
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?S_SHL
   \   000020   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000023   12....       LCALL   ?XLOAD_R2345
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   12....       LCALL   ?XSTORE_R2345
    132              zb_WriteConfiguration(ZCD_NV_CHANLIST, 4, &channel);
   \   00002F                ; Setup parameters for call to function zb_WriteConfiguration
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   AC82         MOV     R4,DPL
   \   000037   AD83         MOV     R5,DPH
   \   000039   7A04         MOV     R2,#0x4
   \   00003B   7984         MOV     R1,#-0x7c
   \   00003D   12....       LCALL   ??zb_WriteConfiguration?relay
    133          }
   \                     ??zb_Writechannel_0:
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045                REQUIRE ?Subroutine2
   \   000045                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    134          /******************************************************************************
    135           * @fn          
    136           *
    137           * @brief     test for pand_id and chancel rean and write   .
    138           *
    139           * @param       
    140           *
    141           *
    142           * @return      
    143           *
    144           *******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          void    read_appconfig(void * buf)
   \                     read_appconfig:
    146          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    147              uint8   f1;
    148              osal_nv_item_init(APP_NV, 4, NULL );
   \   000009                ; Setup parameters for call to function osal_nv_item_init
   \   000009   E4           CLR     A
   \   00000A   F5..         MOV     ?V0 + 2,A
   \   00000C   F5..         MOV     ?V0 + 3,A
   \   00000E   78..         MOV     R0,#?V0 + 2
   \   000010   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000013   7C04         MOV     R4,#0x4
   \   000015   7D00         MOV     R5,#0x0
   \   000017   7A88         MOV     R2,#-0x78
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??osal_nv_item_init?relay
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
    149              f1=osal_nv_read(APP_NV, 0,4, buf); 
   \   000023                ; Setup parameters for call to function osal_nv_read
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   75..04       MOV     ?V0 + 0,#0x4
   \   00002B   75..00       MOV     ?V0 + 1,#0x0
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7C00         MOV     R4,#0x0
   \   000035   7D00         MOV     R5,#0x0
   \   000037   7A88         MOV     R2,#-0x78
   \   000039   7B00         MOV     R3,#0x0
   \   00003B   12....       LCALL   ??osal_nv_read?relay
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
   \   000043   E9           MOV     A,R1
   \   000044   F5..         MOV     ?V0 + 0,A
    150              if( f1 != ZSUCCESS)
   \   000046   6011         JZ      ??read_appconfig_0
    151               {
    152                    uart_printf("READ ERROR:%d\r\n", f1);
   \   000048                ; Setup parameters for call to function uart_printf
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   7A..         MOV     R2,#`?<Constant "READ ERROR:%d\\r\\n">` & 0xff
   \   00004F   7B..         MOV     R3,#(`?<Constant "READ ERROR:%d\\r\\n">` >> 8) & 0xff
   \   000051   12....       LCALL   ??uart_printf?relay
   \   000054   7402         MOV     A,#0x2
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
    153               }
    154          }
   \                     ??read_appconfig_0:
   \   000059   02....       LJMP    ?Subroutine1 & 0xFFFF
    155          
    156          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    157          void    write_appconfig(void * buf)
   \                     write_appconfig:
    158          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    159              uint8   f1;
    160              osal_nv_item_init(APP_NV, 4, NULL );
   \   000009                ; Setup parameters for call to function osal_nv_item_init
   \   000009   E4           CLR     A
   \   00000A   F5..         MOV     ?V0 + 0,A
   \   00000C   F5..         MOV     ?V0 + 1,A
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000013   7C04         MOV     R4,#0x4
   \   000015   7D00         MOV     R5,#0x0
   \   000017   7A88         MOV     R2,#-0x78
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??osal_nv_item_init?relay
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
    161              f1=zb_WriteConfiguration(APP_NV,4, buf);
   \   000023                ; Setup parameters for call to function zb_WriteConfiguration
   \   000023   EE           MOV     A,R6
   \   000024   FC           MOV     R4,A
   \   000025   EF           MOV     A,R7
   \   000026   FD           MOV     R5,A
   \   000027   7A04         MOV     R2,#0x4
   \   000029   7988         MOV     R1,#-0x78
   \   00002B   12....       LCALL   ??zb_WriteConfiguration?relay
   \   00002E   E9           MOV     A,R1
   \   00002F   F5..         MOV     ?V0 + 0,A
    162              if( f1 != ZSUCCESS)
   \   000031   6011         JZ      ??write_appconfig_0
    163                  {
    164                    uart_printf("WRITE ERROR:%d\r\n", f1);
   \   000033                ; Setup parameters for call to function uart_printf
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7A..         MOV     R2,#`?<Constant "WRITE ERROR:%d\\r\\n">` & 0xff
   \   00003A   7B..         MOV     R3,#(`?<Constant "WRITE ERROR:%d\\r\\n">` >> 8) & 0xff
   \   00003C   12....       LCALL   ??uart_printf?relay
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
    165                  }
    166          }
   \                     ??write_appconfig_0:
   \   000044   02....       LJMP    ?Subroutine2 & 0xFFFF
    167          
    168          /******************************************************************************
    169           * @fn          
    170           *
    171           * @brief     test for flash rean and write   .
    172           *
    173           * @param       
    174           *
    175           *
    176           * @return      
    177           *
    178           *******************************************************************/
    179          // e9 e3 len pandidl pandidh chancel dat[16]

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void    configset(uint8 * pBuf,uint8 len, uint8 logtype)
   \                     configset:
    181          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 9,R1
   \   00000B   8C..         MOV     ?V0 + 8,R4
    182              
    183              if((pBuf[0]==0xe9) && (pBuf[1]==0xe3))
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   E0           MOVX    A,@DPTR
   \   000012   64E9         XRL     A,#0xe9
   \   000014   6003         JZ      $+5
   \   000016   02....       LJMP    ??configset_0 & 0xFFFF
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   64E3         XRL     A,#0xe3
   \   00001D   6003         JZ      $+5
   \   00001F   02....       LJMP    ??configset_0 & 0xFFFF
    184               {
    185          #ifndef NO_CHK
    186                    if(pBuf[len-1]!=calcXOR(pBuf+2,len-3))
   \   000022   EE           MOV     A,R6
   \   000023   2404         ADD     A,#0x4
   \   000025   F5..         MOV     ?V0 + 0,A
   \   000027   EF           MOV     A,R7
   \   000028   3400         ADDC    A,#0x0
   \   00002A   F5..         MOV     ?V0 + 1,A
   \   00002C   EE           MOV     A,R6
   \   00002D   2403         ADD     A,#0x3
   \   00002F   F5..         MOV     ?V0 + 2,A
   \   000031   EF           MOV     A,R7
   \   000032   3400         ADDC    A,#0x0
   \   000034   F5..         MOV     ?V0 + 3,A
   \   000036   EE           MOV     A,R6
   \   000037   2402         ADD     A,#0x2
   \   000039   F5..         MOV     ?V0 + 4,A
   \   00003B   EF           MOV     A,R7
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   F5..         MOV     ?V0 + 5,A
   \   000040   89..         MOV     ?V0 + 6,R1
   \   000042   EE           MOV     A,R6
   \   000043   25..         ADD     A,?V0 + 6
   \   000045   F8           MOV     R0,A
   \   000046   EF           MOV     A,R7
   \   000047   3400         ADDC    A,#0x0
   \   000049   F9           MOV     R1,A
   \   00004A   E8           MOV     A,R0
   \   00004B   24FF         ADD     A,#-0x1
   \   00004D   F582         MOV     DPL,A
   \   00004F   E9           MOV     A,R1
   \   000050   34FF         ADDC    A,#-0x1
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F5..         MOV     ?V0 + 6,A
   \   000057                ; Setup parameters for call to function calcXOR
   \   000057   74FD         MOV     A,#-0x3
   \   000059   25..         ADD     A,?V0 + 9
   \   00005B   F9           MOV     R1,A
   \   00005C   0A           INC     R2
   \   00005D   0A           INC     R2
   \   00005E   AB..         MOV     R3,?V0 + 5
   \   000060   12....       LCALL   ??calcXOR?relay
   \   000063   E9           MOV     A,R1
   \   000064   65..         XRL     A,?V0 + 6
   \   000066   6017         JZ      ??configset_1
    187                    {         // chk error
    188                        
    189                        pBuf[2]=0x01;
   \   000068   85..82       MOV     DPL,?V0 + 4
   \   00006B   85..83       MOV     DPH,?V0 + 5
   \   00006E   7401         MOV     A,#0x1
   \   000070   F0           MOVX    @DPTR,A
    190                        pBuf[3]=0x01;
   \   000071   85..82       MOV     DPL,?V0 + 2
   \   000074   85..83       MOV     DPH,?V0 + 3
   \   000077   12....       LCALL   ?Subroutine3 & 0xFFFF
    191                        pBuf[4]=calcXOR(pBuf+2,2);
    192                        HalUARTWrite(HAL_UART_PORT_0, pBuf, 5);
    193                        return;
    194                    }
   \                     ??CrossCallReturnLabel_0:
   \   00007A   7D00         MOV     R5,#0x0
   \   00007C   02....       LJMP    ??configset_2 & 0xFFFF
    195          #endif          
    196                    // 55 aa 66 77 Á¬½Ó
    197                    if((pBuf[3]==0x55) && (pBuf[4]==0xaa)&& (pBuf[5]==0x66)&& (pBuf[6]==0x77))
   \                     ??configset_1:
   \   00007F   EE           MOV     A,R6
   \   000080   2408         ADD     A,#0x8
   \   000082   F5..         MOV     ?V0 + 12,A
   \   000084   EF           MOV     A,R7
   \   000085   3400         ADDC    A,#0x0
   \   000087   F5..         MOV     ?V0 + 13,A
   \   000089   EE           MOV     A,R6
   \   00008A   2407         ADD     A,#0x7
   \   00008C   F5..         MOV     ?V0 + 6,A
   \   00008E   EF           MOV     A,R7
   \   00008F   3400         ADDC    A,#0x0
   \   000091   F5..         MOV     ?V0 + 7,A
   \   000093   EE           MOV     A,R6
   \   000094   2406         ADD     A,#0x6
   \   000096   F5..         MOV     ?V0 + 10,A
   \   000098   EF           MOV     A,R7
   \   000099   3400         ADDC    A,#0x0
   \   00009B   F5..         MOV     ?V0 + 11,A
   \   00009D   85..82       MOV     DPL,?V0 + 2
   \   0000A0   85..83       MOV     DPH,?V0 + 3
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   6455         XRL     A,#0x55
   \   0000A6   704B         JNZ     ??configset_3
   \   0000A8   85..82       MOV     DPL,?V0 + 0
   \   0000AB   85..83       MOV     DPH,?V0 + 1
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   64AA         XRL     A,#0xaa
   \   0000B1   7040         JNZ     ??configset_3
   \   0000B3   8E82         MOV     DPL,R6
   \   0000B5   8F83         MOV     DPH,R7
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   6466         XRL     A,#0x66
   \   0000BF   7032         JNZ     ??configset_3
   \   0000C1   85..82       MOV     DPL,?V0 + 10
   \   0000C4   85..83       MOV     DPH,?V0 + 11
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   6477         XRL     A,#0x77
   \   0000CA   7027         JNZ     ??configset_3
    198                    {
    199                          pBuf[2]=0x05;
   \   0000CC   85..82       MOV     DPL,?V0 + 4
   \   0000CF   85..83       MOV     DPH,?V0 + 5
   \   0000D2   7405         MOV     A,#0x5
   \   0000D4   F0           MOVX    @DPTR,A
    200                          pBuf[7]=logtype;
   \   0000D5   85..82       MOV     DPL,?V0 + 6
   \   0000D8   85..83       MOV     DPH,?V0 + 7
   \   0000DB   E5..         MOV     A,?V0 + 8
   \   0000DD   F0           MOVX    @DPTR,A
    201                          pBuf[8]=calcXOR(pBuf+2,6);
   \   0000DE                ; Setup parameters for call to function calcXOR
   \   0000DE   7906         MOV     R1,#0x6
   \   0000E0   AA..         MOV     R2,?V0 + 4
   \   0000E2   AB..         MOV     R3,?V0 + 5
   \   0000E4   12....       LCALL   ??calcXOR?relay
   \   0000E7   E9           MOV     A,R1
   \   0000E8   85..82       MOV     DPL,?V0 + 12
   \   0000EB   85..83       MOV     DPH,?V0 + 13
   \   0000EE   F0           MOVX    @DPTR,A
    202                          HalUARTWrite(HAL_UART_PORT_0, pBuf, 9);
   \   0000EF                ; Setup parameters for call to function HalUARTWrite
   \   0000EF   7C09         MOV     R4,#0x9
   \   0000F1   8087         SJMP    ??CrossCallReturnLabel_0
    203                          return;                    
    204                    }
    205                    // write 
    206                    if(pBuf[3]==0x01)
   \                     ??configset_3:
   \   0000F3   85..82       MOV     DPL,?V0 + 2
   \   0000F6   85..83       MOV     DPH,?V0 + 3
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   6401         XRL     A,#0x1
   \   0000FC   7071         JNZ     ??configset_4
    207                    {
    208                      Dtype=pBuf[9];
   \   0000FE   8E82         MOV     DPL,R6
   \   000100   8F83         MOV     DPH,R7
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   A3           INC     DPTR
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   90....       MOV     DPTR,#Dtype
   \   00010F   F0           MOVX    @DPTR,A
    209                      serl=pBuf[7];
   \   000110   85..82       MOV     DPL,?V0 + 6
   \   000113   85..83       MOV     DPH,?V0 + 7
   \   000116   E0           MOVX    A,@DPTR
   \   000117   90....       MOV     DPTR,#serl
   \   00011A   F0           MOVX    @DPTR,A
    210                      serh=pBuf[8];
   \   00011B   85..82       MOV     DPL,?V0 + 12
   \   00011E   85..83       MOV     DPH,?V0 + 13
   \   000121   E0           MOVX    A,@DPTR
   \   000122   90....       MOV     DPTR,#serh
   \   000125   F0           MOVX    @DPTR,A
    211                      zb_Writepandid(pBuf+4); 
   \   000126                ; Setup parameters for call to function zb_Writepandid
   \   000126   AA..         MOV     R2,?V0 + 0
   \   000128   AB..         MOV     R3,?V0 + 1
   \   00012A   12....       LCALL   ??zb_Writepandid?relay
    212                      zb_Writechannel(*(pBuf+6));
   \   00012D                ; Setup parameters for call to function zb_Writechannel
   \   00012D   85..82       MOV     DPL,?V0 + 10
   \   000130   85..83       MOV     DPH,?V0 + 11
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F9           MOV     R1,A
   \   000135   12....       LCALL   ??zb_Writechannel?relay
    213                      write_appconfig(pBuf+7);
   \   000138                ; Setup parameters for call to function write_appconfig
   \   000138   AA..         MOV     R2,?V0 + 6
   \   00013A   AB..         MOV     R3,?V0 + 7
   \   00013C   12....       LCALL   ??write_appconfig?relay
    214                      pBuf[2]=0x01;
   \   00013F   85..82       MOV     DPL,?V0 + 4
   \   000142   85..83       MOV     DPH,?V0 + 5
   \   000145   7401         MOV     A,#0x1
   \   000147   F0           MOVX    @DPTR,A
    215                        pBuf[3]=0x00;
   \   000148   85..82       MOV     DPL,?V0 + 2
   \   00014B   85..83       MOV     DPH,?V0 + 3
   \   00014E   E4           CLR     A
   \   00014F   12....       LCALL   ?Subroutine3 & 0xFFFF
    216                        pBuf[4]=calcXOR(pBuf+2,2);
    217                        
    218                        HalUARTWrite(HAL_UART_PORT_0, pBuf, 5);
   \                     ??CrossCallReturnLabel_1:
   \   000152   7D00         MOV     R5,#0x0
   \   000154   EE           MOV     A,R6
   \   000155   FA           MOV     R2,A
   \   000156   EF           MOV     A,R7
   \   000157   FB           MOV     R3,A
   \   000158   7900         MOV     R1,#0x0
   \   00015A   12....       LCALL   ??HalUARTWrite?relay
    219          #if(LOG_TYPE==00)
    220                        NLME_InitNV();   // lpc
    221                        NLME_SetDefaultNV();
    222          #endif              
    223                        osal_start_timerEx( sapi_TaskID, ZB_RST_EVENT,500 );
   \   00015D                ; Setup parameters for call to function osal_start_timerEx
   \   00015D   7CF4         MOV     R4,#-0xc
   \   00015F   7D01         MOV     R5,#0x1
   \   000161   7A40         MOV     R2,#0x40
   \   000163   7B00         MOV     R3,#0x0
   \   000165   90....       MOV     DPTR,#sapi_TaskID
   \   000168   E0           MOVX    A,@DPTR
   \   000169   F9           MOV     R1,A
   \   00016A   12....       LCALL   ??osal_start_timerEx?relay
    224          #ifdef RESETVAL
    225                        uart_printf("RESET VAL 0 !\r\n");
    226                        MicroWait (10000);
    227          #endif
    228                        
    229                        // Reset the device with new configuration
    230                       //   zb_SystemReset();
    231                      return;
   \   00016D   805D         SJMP    ??configset_0
    232                    }
    233                    // read 
    234                    if(pBuf[3]==0x02)
   \                     ??configset_4:
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   6402         XRL     A,#0x2
   \   000172   7058         JNZ     ??configset_0
    235                    {
    236                      configread(pBuf+4);
   \   000174                ; Setup parameters for call to function configread
   \   000174   AA..         MOV     R2,?V0 + 0
   \   000176   AB..         MOV     R3,?V0 + 1
   \   000178   12....       LCALL   ??configread?relay
    237                      pBuf[2]=7;
   \   00017B   85..82       MOV     DPL,?V0 + 4
   \   00017E   85..83       MOV     DPH,?V0 + 5
   \   000181   7407         MOV     A,#0x7
   \   000183   F0           MOVX    @DPTR,A
    238                      if((logtype==00) || (logtype==01))
   \   000184   E5..         MOV     A,?V0 + 8
   \   000186   6006         JZ      ??configset_5
   \   000188   7401         MOV     A,#0x1
   \   00018A   65..         XRL     A,?V0 + 8
   \   00018C   7003         JNZ     ??configset_6
    239                             pBuf[2]=4;
   \                     ??configset_5:
   \   00018E   7404         MOV     A,#0x4
   \   000190   F0           MOVX    @DPTR,A
    240                        pBuf[3]=0x00;
   \                     ??configset_6:
   \   000191   85..82       MOV     DPL,?V0 + 2
   \   000194   85..83       MOV     DPH,?V0 + 3
   \   000197   E4           CLR     A
   \   000198   12....       LCALL   ?Subroutine5 & 0xFFFF
    241                        pBuf[pBuf[2]+3]=calcXOR(pBuf+2,pBuf[2]+1);
   \                     ??CrossCallReturnLabel_4:
   \   00019B   04           INC     A
   \   00019C   F9           MOV     R1,A
   \   00019D   AA..         MOV     R2,?V0 + 4
   \   00019F   AB..         MOV     R3,?V0 + 5
   \   0001A1   12....       LCALL   ??calcXOR?relay
   \   0001A4   85..82       MOV     DPL,?V0 + 4
   \   0001A7   85..83       MOV     DPH,?V0 + 5
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   F8           MOV     R0,A
   \   0001AC   EE           MOV     A,R6
   \   0001AD   28           ADD     A,R0
   \   0001AE   F582         MOV     DPL,A
   \   0001B0   EF           MOV     A,R7
   \   0001B1   3400         ADDC    A,#0x0
   \   0001B3   F583         MOV     DPH,A
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   A3           INC     DPTR
   \   0001B8   E9           MOV     A,R1
   \   0001B9   12....       LCALL   ?Subroutine5 & 0xFFFF
    242                        HalUARTWrite(HAL_UART_PORT_0, pBuf,pBuf[2]+4);
   \                     ??CrossCallReturnLabel_5:
   \   0001BC   2404         ADD     A,#0x4
   \   0001BE   FC           MOV     R4,A
   \   0001BF   E4           CLR     A
   \   0001C0   3400         ADDC    A,#0x0
   \   0001C2   FD           MOV     R5,A
   \                     ??configset_2:
   \   0001C3   EE           MOV     A,R6
   \   0001C4   FA           MOV     R2,A
   \   0001C5   EF           MOV     A,R7
   \   0001C6   FB           MOV     R3,A
   \   0001C7   7900         MOV     R1,#0x0
   \   0001C9   12....       LCALL   ??HalUARTWrite?relay
    243                      return;
   \                     ??configset_0:
   \   0001CC   7F0E         MOV     R7,#0xe
   \   0001CE   02....       LJMP    ?BANKED_LEAVE_XDATA
    244                    }
    245               }
    246          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function calcXOR
   \   000001                ; Setup parameters for call to function HalUARTWrite
   \   000001   85..82       MOV     DPL,?V0 + 4
   \   000004   85..83       MOV     DPH,?V0 + 5
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function calcXOR
   \   000001                ; Setup parameters for call to function calcXOR
   \   000001   7902         MOV     R1,#0x2
   \   000003   AA..         MOV     R2,?V0 + 4
   \   000005   AB..         MOV     R3,?V0 + 5
   \   000007   12....       LCALL   ??calcXOR?relay
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?V0 + 0
   \   00000E   85..83       MOV     DPH,?V0 + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012                ; Setup parameters for call to function HalUARTWrite
   \   000012                ; Setup parameters for call to function HalUARTWrite
   \   000012   7C05         MOV     R4,#0x5
   \   000014   22           RET
    247                                     

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    248          void configread(uint8 * pBuf)
   \                     configread:
    249          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    250              zb_Readpandid(pBuf);
   \   000009                ; Setup parameters for call to function zb_Readpandid
   \   000009   12....       LCALL   ??zb_Readpandid?relay
    251              *(pBuf+2)=zb_Readchannel();
   \   00000C                ; Setup parameters for call to function zb_Readchannel
   \   00000C   12....       LCALL   ??zb_Readchannel?relay
   \   00000F   E9           MOV     A,R1
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    252              read_appconfig(pBuf+3);
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   F5..         MOV     ?V0 + 0,A
   \   00001C   EF           MOV     A,R7
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   F5..         MOV     ?V0 + 1,A
   \   000021                ; Setup parameters for call to function read_appconfig
   \   000021   AA..         MOV     R2,?V0 + 0
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   ??read_appconfig?relay
    253              Dtype=pBuf[5];
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   90....       MOV     DPTR,#Dtype
   \   000034   F0           MOVX    @DPTR,A
    254              if(Dtype==0xff)
   \   000035   F4           CPL     A
   \   000036   7003         JNZ     ??configread_0
    255                  Dtype=TYPE_RAL;
   \   000038   7412         MOV     A,#0x12
   \   00003A   F0           MOVX    @DPTR,A
    256              serl=pBuf[3];
   \                     ??configread_0:
   \   00003B   85..82       MOV     DPL,?V0 + 0
   \   00003E   85..83       MOV     DPH,?V0 + 1
   \   000041   E0           MOVX    A,@DPTR
   \   000042   90....       MOV     DPTR,#serl
   \   000045   F0           MOVX    @DPTR,A
    257              serh=pBuf[4];
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   90....       MOV     DPTR,#serh
   \   000052   F0           MOVX    @DPTR,A
    258              /*
    259              if ((serl==0xff) && (serh==0xff) )
    260              {
    261                    serl=0x34;
    262                    serh=0x12;
    263              }*/
    264          }
   \   000053   02....       LJMP    ?Subroutine2 & 0xFFFF
    265          
    266          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    267          void test_read_flash (void )
   \                     test_read_flash:
    268          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    269             //HalUARTInit();
    270              //test_read_flash1();
    271              //test_read_flash2();
    272             //test_nv_item();
    273             //while(1);
    274              
    275          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??delay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    delay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??calcXOR?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcXOR

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_Readpandid?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_Readpandid

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_Writepandid?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_Writepandid

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_Readchannel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_Readchannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_Writechannel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_Writechannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??read_appconfig?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    read_appconfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??write_appconfig?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    write_appconfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??configset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    configset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??configread?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    configread

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??test_read_flash?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    test_read_flash

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "READ ERROR:%d\\r\\n">`:
   \   000000   52454144     DB "READ ERROR:%d\015\012"
   \            20455252
   \            4F523A25
   \            640D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WRITE ERROR:%d\\r\\n">`:
   \   000000   57524954     DB "WRITE ERROR:%d\015\012"
   \            45204552
   \            524F523A
   \            25640D0A
   \            00      
    276          
    277          
    278          
    279          

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     calcXOR                        2      0     22
     configread                     1      0     32
       -> zb_Readpandid             0      0     20
       -> zb_Readchannel            0      0     20
       -> read_appconfig            0      0     20
     configset                      1      0     22
       -> calcXOR                   0      0     44
       -> calcXOR                   0      0     44
       -> HalUARTWrite              0      0     44
       -> calcXOR                   0      0     44
       -> HalUARTWrite              0      0     44
       -> zb_Writepandid            0      0     44
       -> zb_Writechannel           0      0     44
       -> write_appconfig           0      0     44
       -> calcXOR                   0      0     44
       -> HalUARTWrite              0      0     44
       -> osal_start_timerEx        0      0     44
       -> configread                0      0     44
       -> calcXOR                   0      0     44
       -> HalUARTWrite              0      0     44
     delay                          0      0      0
     read_appconfig                 0      0     26
       -> osal_nv_item_init         0      0     28
       -> osal_nv_read              0      0     32
       -> uart_printf               0      0     28
     test_read_flash                0      0      0
     write_appconfig                0      0     34
       -> osal_nv_item_init         0      0     24
       -> zb_WriteConfiguration     0      0     20
       -> uart_printf               0      0     24
     zb_Readchannel                 2      0     26
       -> zb_ReadConfiguration      0      0     32
     zb_Readpandid                  2      0     10
       -> zb_ReadConfiguration      4      0      0
     zb_Writechannel                0      0     36
       -> zb_WriteConfiguration     0      0     28
     zb_Writepandid                 2      0     22
       -> zb_WriteConfiguration     4      0      0


   Segment part sizes:

     Function/Label                   Bytes
     --------------                   -----
     chn                                64
     delay                              38
     calcXOR                            32
     ?Subroutine0                        7
     zb_Readpandid                      17
     zb_Writepandid                     17
     zb_Readchannel                     84
     ?Subroutine1                        5
     ?Subroutine4                       13
     zb_Writechannel                    69
     ?Subroutine2                        5
     read_appconfig                     92
     write_appconfig                    71
     configset                         465
     ?Subroutine5                        9
     ?Subroutine3                       21
     configread                         86
     test_read_flash                     3
     ??delay?relay                       6
     ??calcXOR?relay                     6
     ??zb_Readpandid?relay               6
     ??zb_Writepandid?relay              6
     ??zb_Readchannel?relay              6
     ??zb_Writechannel?relay             6
     ??read_appconfig?relay              6
     ??write_appconfig?relay             6
     ??configset?relay                   6
     ??configread?relay                  6
     ??test_read_flash?relay             6
     ?<Constant "READ ERROR:%d\r\n">    16
     ?<Constant "WRITE ERROR:%d\r\n">   17

 
 1 034 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
    97 bytes in segment XDATA_ROM_C
 
 1 100 bytes of CODE  memory
    97 bytes of CONST memory

Errors: none
Warnings: none
