###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         14/Mar/2017  10:37:36 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\Source\Coord1.c                #
#    Command line       =  -f F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zst #
#                          ack\Samples\SensorDemo\CC2530DB\..\..\..\Tools\CC2 #
#                          530DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\Tools\CC2530 #
#                          DB\f8wConfig.cfg (-DSECURE=0                       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00100000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x8888                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\Source\Coord1.c -D ZIGBEEPRO   #
#                          -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D         #
#                          REFLECTOR -D NV_INIT -D NV_RESTORE -D ZTOOL_P1 -D  #
#                          xMT_TASK -D DEVICE_LOGICAL_TYPE=0 -D LOG_TYPE=0    #
#                          -D xLCD_SUPPORTED -D xMT_TASK -lC                  #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Coord1\List\ -lA      #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Coord1\List\          #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Coord1\Obj\ -e        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zst #
#                          ack\Samples\SensorDemo\CC2530DB\ -I                #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\SOURCE\ -I         #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\MYAPP\ -I          #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\sensor_drv\ -I     #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\ZMAIN\TI2530 #
#                          DB\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects #
#                          \zstack\Samples\SensorDemo\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\MT\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\ #
#                          Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\HAL\TARGET\CC2530EB\ -I                       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\OSAL\MCU\CCSOC\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ #
#                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I      #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\AF\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ì #
#                          â3\Projects\zstack\Samples\SensorDemo\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I               #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\SEC\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\ #
#                          Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\SAPI\ -I             #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\SYS\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\ #
#                          Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\ZDO\ -I              #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\ZMAC\F8W\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ì #
#                          â3\Projects\zstack\Samples\SensorDemo\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\ZMAC\ -I                    #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\SERVICES\SADDR\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ #
#                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I    #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\INCLUDE\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶ #
#                          þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\LOW_LEVEL\srf04\ -I                       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz         #
#                          --require_prototypes                               #
#    List file          =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Coord1\List\Coord1.ls #
#                          t                                                  #
#    Object file        =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Coord1\Obj\Coord1.r51 #
#                                                                             #
#                                                                             #
###############################################################################

F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\Source\Coord1.c
      1          /**************************************************************************************************
      2            Filename:       DemoCollector.c
      3          
      4            Description:    Collector application for the Sensor Demo utilizing Simple API.
      5          
      6                            The collector node can be set in a state where it accepts 
      7                            incoming reports from the sensor nodes, and can send the reports
      8                            via the UART to a PC tool. The collector node in this state
      9                            functions as a gateway. The collector nodes that are not in the
     10                            gateway node function as routers in the network.  
     11          
     12          
     13            Copyright 2009 Texas Instruments Incorporated. All rights reserved.
     14          
     15            IMPORTANT: Your use of this Software is limited to those specific rights
     16            granted under the terms of a software license agreement between the user
     17            who downloaded the software, his/her employer (which must be your employer)
     18            and Texas Instruments Incorporated (the "License").  You may not use this
     19            Software unless you agree to abide by the terms of the License. The License
     20            limits your use, and you acknowledge, that the Software may not be modified,
     21            copied or distributed unless embedded on a Texas Instruments microcontroller
     22            or used solely and exclusively in conjunction with a Texas Instruments radio
     23            frequency transceiver, which is integrated into your product.  Other than for
     24            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     25            works of, modify, distribute, perform, display or sell this Software and/or
     26            its documentation for any purpose.
     27          
     28            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     29            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     30            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     31            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     32            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     33            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     34            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     35            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     36            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     37            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     38            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     39          
     40            Should you have any questions regarding your right to use this Software,
     41            contact Texas Instruments Incorporated at www.TI.com.
     42          **************************************************************************************************/
     43          
     44          /******************************************************************************
     45           * INCLUDES
     46           */
     47          
     48          #include "ZComDef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_Nv.h"
     51          #include "sapi.h"
     52          #include "hal_key.h"
     53          #include "hal_led.h"
     54          #include "hal_lcd.h"
     55          #include "hal_uart.h"
     56          #include "DemoApp.h"
     57          #include "OnBoard.h"
     58          #include "UART_PRINT.h"
     59          #include "sensor.h"
     60          /******************************************************************************
     61           * CONSTANTS
     62           */
     63          
     64          #define REPORT_FAILURE_LIMIT                4
     65          #define ACK_REQ_INTERVAL                    5 // each 5th packet is sent with ACK request
     66          
     67          // General UART frame offsets
     68          #define FRAME_SOF_OFFSET                    0
     69          #define FRAME_LENGTH_OFFSET                 1 
     70          #define FRAME_CMD0_OFFSET                   2
     71          #define FRAME_CMD1_OFFSET                   3
     72          #define FRAME_DATA_OFFSET                   4
     73          
     74          // ZB_RECEIVE_DATA_INDICATION offsets
     75          #define ZB_RECV_SRC_OFFSET                  0
     76          #define ZB_RECV_CMD_OFFSET                  2
     77          #define ZB_RECV_LEN_OFFSET                  4
     78          #define ZB_RECV_DATA_OFFSET                 6
     79          #define ZB_RECV_FCS_OFFSET                  8
     80          
     81          
     82          
     83          // PING response frame length and offset
     84          #define SYS_PING_RSP_LENGTH                 7 
     85          #define SYS_PING_CMD_OFFSET                 1
     86          
     87          // Stack Profile
     88          #define ZIGBEE_2007                         0x0040
     89          #define ZIGBEE_PRO_2007                     0x0041
     90          
     91          #ifdef ZIGBEEPRO
     92          #define STACK_PROFILE                       ZIGBEE_PRO_2007             
     93          #else 
     94          #define STACK_PROFILE                       ZIGBEE_2007
     95          #endif
     96          
     97          #define CPT_SOP                             0xFE
     98          #define SYS_PING_REQUEST                    0x0021
     99          #define SYS_PING_RESPONSE                   0x0161
    100          #define ZB_RECEIVE_DATA_INDICATION          0x8746
    101          
    102          // Application States
    103          #define APP_INIT                            0
    104          #define APP_START                           2
    105          #define APP_BINDED                          3    
    106          
    107          // Application osal event identifiers
    108          #define MY_START_EVT                        0x0001
    109          #define MY_REPORT_EVT                       0x0002
    110          #define MY_FIND_COLLECTOR_EVT               0x0004
    111          
    112          
    113          /******************************************************************************
    114           * TYPEDEFS
    115           */
    116          typedef struct
    117          {
    118            uint16              source;
    119            uint16              parent;
    120            uint8               temp;
    121            uint8               voltage;
    122          } gtwData_t;
    123          
    124          /******************************************************************************
    125           * LOCAL VARIABLES
    126           */
    127          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          static uint8 appState =             APP_INIT;
   \                     appState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          static uint8 reportState =          FALSE;
   \                     reportState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    130          static uint8 myStartRetryDelay =    10;          // milliseconds
   \                     myStartRetryDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for myStartRetryDelay>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          static uint8 isGateWay =            FALSE;
   \                     isGateWay:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    132          static uint16 myBindRetryDelay =    2000;        // milliseconds
   \                     myBindRetryDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myBindRetryDelay>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    133          static uint16 myReportPeriod =      2000;        // milliseconds
   \                     myReportPeriod:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myReportPeriod>`
   \   000002                REQUIRE __INIT_XDATA_I
    134          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          static uint8 reportFailureNr =      0;
   \                     reportFailureNr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          static uint16 parentShortAddr;
   \                     parentShortAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    137          
    138          /******************************************************************************
    139           * LOCAL FUNCTIONS
    140           */
    141          
    142          static uint8 calcFCS(uint8 *pBuf, uint8 len);
    143          static void sysPingReqRcvd(void);
    144          static void sysPingRsp(void);
    145          static void sendDummyReport(void);
    146          void ChannelPanidInit (void);
    147          /******************************************************************************
    148           * GLOBAL VARIABLES
    149           */
    150          
    151          // Inputs and Outputs for Collector device
    152          #define NUM_OUT_CMD_COLLECTOR                2
    153          #define NUM_IN_CMD_COLLECTOR                 2
    154          
    155          // List of output and input commands for Collector device

   \                                 In  segment XDATA_ROM_C, align 1
    156          const cId_t zb_InCmdList[NUM_IN_CMD_COLLECTOR] =
   \                     zb_InCmdList:
   \   000000   0200         DW 2
   \   000002   0300         DW 3
    157          {
    158            SENSOR_REPORT_CMD_ID,
    159            DUMMY_REPORT_CMD_ID
    160          };
    161          

   \                                 In  segment XDATA_ROM_C, align 1
    162          const cId_t zb_OutCmdList[NUM_IN_CMD_COLLECTOR] =
   \                     zb_OutCmdList:
   \   000000   0200         DW 2
   \   000002   0300         DW 3
    163          {
    164            SENSOR_REPORT_CMD_ID,
    165            DUMMY_REPORT_CMD_ID
    166          };
    167          
    168          // Define SimpleDescriptor for Collector device

   \                                 In  segment XDATA_ROM_C, align 1
    169          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   200F         DW 3872
   \   000003   0200         DW 2
   \   000005   01           DB 1
   \   000006   02           DB 2
   \   000007   ....         DW zb_InCmdList
   \   000009   02           DB 2
   \   00000A   ....         DW zb_OutCmdList
    170          {
    171            MY_ENDPOINT_ID,             //  Endpoint
    172            MY_PROFILE_ID,              //  Profile ID
    173            DEV_ID_COLLECTOR,           //  Device ID
    174            DEVICE_VERSION_COLLECTOR,   //  Device Version
    175            0,                          //  Reserved
    176            NUM_IN_CMD_COLLECTOR,       //  Number of Input Commands
    177            (cId_t *) zb_InCmdList,     //  Input Command List
    178            NUM_OUT_CMD_COLLECTOR,      //  Number of Output Commands
    179            (cId_t *) zb_OutCmdList     //  Output Command List
    180          };
    181          
    182          /******************************************************************************
    183           * FUNCTIONS
    184           */
    185          
    186          /******************************************************************************
    187           * @fn          zb_HandleOsalEvent
    188           *
    189           * @brief       The zb_HandleOsalEvent function is called by the operating
    190           *              system when a task event is set
    191           *
    192           * @param       event - Bitmask containing the events that have been set
    193           *
    194           * @return      none
    195           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    196          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    197          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
    198            uint8 logicalType;
    199            
    200            if(event & SYS_EVENT_MSG)
    201            {
    202              
    203            }
    204            
    205            if( event & ZB_ENTRY_EVENT )
   \   00000D   5410         ANL     A,#0x10
   \   00000F   6035         JZ      ??zb_HandleOsalEvent_0
    206            {  
    207              // Initialise UART
    208              initUart(uartRxCB);
   \   000011                ; Setup parameters for call to function initUart
   \   000011   7A..         MOV     R2,#??uartRxCB?relay & 0xff
   \   000013   7B..         MOV     R3,#(??uartRxCB?relay >> 8) & 0xff
   \   000015   12....       LCALL   ??initUart?relay
    209              
    210              // blind LED 1 to indicate starting/joining a network
    211              HalLedBlink ( HAL_LED_2, 0, 50, 500 );
   \   000018                ; Setup parameters for call to function HalLedBlink
   \   000018   7CF4         MOV     R4,#-0xc
   \   00001A   7D01         MOV     R5,#0x1
   \   00001C   7B32         MOV     R3,#0x32
   \   00001E   7A00         MOV     R2,#0x0
   \   000020   7902         MOV     R1,#0x2
   \   000022   12....       LCALL   ??HalLedBlink?relay
    212              HalLedBlink ( HAL_LED_1, 0, 50, 500 );
   \   000025                ; Setup parameters for call to function HalLedBlink
   \   000025   7CF4         MOV     R4,#-0xc
   \   000027   7D01         MOV     R5,#0x1
   \   000029   7B32         MOV     R3,#0x32
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7901         MOV     R1,#0x1
   \   00002F   12....       LCALL   ??HalLedBlink?relay
    213              //HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
    214              
    215              // Read logical device type from NV
    216              zb_ReadConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
   \   000032                ; Setup parameters for call to function zb_ReadConfiguration
   \   000032   85..82       MOV     DPL,?XSP + 0
   \   000035   85..83       MOV     DPH,?XSP + 1
   \   000038   AC82         MOV     R4,DPL
   \   00003A   AD83         MOV     R5,DPH
   \   00003C   7A01         MOV     R2,#0x1
   \   00003E   7987         MOV     R1,#-0x79
   \   000040   12....       LCALL   ??zb_ReadConfiguration?relay
    217             
    218              // Start the device 
    219              zb_StartRequest();
   \   000043                ; Setup parameters for call to function zb_StartRequest
   \   000043   12....       LCALL   ??zb_StartRequest?relay
    220            }
    221            
    222            if ( event & MY_START_EVT )
   \                     ??zb_HandleOsalEvent_0:
   \   000046   EE           MOV     A,R6
   \   000047   A2E0         MOV     C,0xE0 /* A   */.0
   \   000049   5003         JNC     ??zb_HandleOsalEvent_1
    223            {
    224              zb_StartRequest();
   \   00004B                ; Setup parameters for call to function zb_StartRequest
   \   00004B   12....       LCALL   ??zb_StartRequest?relay
    225            }
    226            
    227            if ( event & MY_REPORT_EVT )
   \                     ??zb_HandleOsalEvent_1:
   \   00004E   EE           MOV     A,R6
   \   00004F   5402         ANL     A,#0x2
   \   000051   601D         JZ      ??zb_HandleOsalEvent_2
    228            {
    229              if (isGateWay) 
   \   000053   90....       MOV     DPTR,#isGateWay
   \   000056   E0           MOVX    A,@DPTR
   \   000057   600F         JZ      ??zb_HandleOsalEvent_3
    230              {
    231                osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod );
   \                     ??zb_HandleOsalEvent_4:
   \   000059                ; Setup parameters for call to function osal_start_timerEx
   \   000059   90....       MOV     DPTR,#myReportPeriod
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   FC           MOV     R4,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FD           MOV     R5,A
   \   000061   7A02         MOV     R2,#0x2
   \   000063   12....       LCALL   ?Subroutine1 & 0xFFFF
    232              }
   \                     ??CrossCallReturnLabel_0:
   \   000066   8008         SJMP    ??zb_HandleOsalEvent_2
    233              else if (appState == APP_BINDED) 
   \                     ??zb_HandleOsalEvent_3:
   \   000068   90....       MOV     DPTR,#appState
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6403         XRL     A,#0x3
   \   00006E   60E9         JZ      ??zb_HandleOsalEvent_4
    234              {
    235                sendDummyReport();
    236                osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod );
    237              }
    238            }
    239            if ( event & MY_FIND_COLLECTOR_EVT )
   \                     ??zb_HandleOsalEvent_2:
   \   000070   EE           MOV     A,R6
   \   000071   5404         ANL     A,#0x4
   \   000073   6013         JZ      ??zb_HandleOsalEvent_5
    240            { 
    241              // Find and bind to a gateway device (if this node is not gateway)
    242              if (!isGateWay) 
   \   000075   90....       MOV     DPTR,#isGateWay
   \   000078   E0           MOVX    A,@DPTR
   \   000079   700D         JNZ     ??zb_HandleOsalEvent_5
    243              {
    244                zb_BindDevice( TRUE, DUMMY_REPORT_CMD_ID, (uint8 *)NULL );
   \   00007B                ; Setup parameters for call to function zb_BindDevice
   \   00007B   7C00         MOV     R4,#0x0
   \   00007D   7D00         MOV     R5,#0x0
   \   00007F   7A03         MOV     R2,#0x3
   \   000081   7B00         MOV     R3,#0x0
   \   000083   7901         MOV     R1,#0x1
   \   000085   12....       LCALL   ??zb_BindDevice?relay
    245              }
    246            }
    247            
    248          }
   \                     ??zb_HandleOsalEvent_5:
   \   000088   7401         MOV     A,#0x1
   \   00008A   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#sapi_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine4_0
   \   000003                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    249          
    250          /******************************************************************************
    251           * @fn      zb_HandleKeys
    252           *
    253           * @brief   Handles all key events for this device.
    254           *
    255           * @param   shift - true if in shift/alt.
    256           * @param   keys - bit field for key events. Valid entries:
    257           *                 EVAL_SW4
    258           *                 EVAL_SW3
    259           *                 EVAL_SW2
    260           *                 EVAL_SW1
    261           *
    262           * @return  none
    263           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    264          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    265          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    266            static uint8 allowBind=FALSE;
    267            static uint8 allowJoin=TRUE;
    268            uint8 logicalType;
    269          
    270            if ((!allowBind) && (appState== APP_START) )
   \   000004   90....       MOV     DPTR,#??allowBind
   \   000007   E0           MOVX    A,@DPTR
   \   000008   703A         JNZ     ??zb_HandleKeys_0
   \   00000A   90....       MOV     DPTR,#appState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6402         XRL     A,#0x2
   \   000010   7032         JNZ     ??zb_HandleKeys_0
    271                {
    272                  allowBind=1;
   \   000012   90....       MOV     DPTR,#??allowBind
   \   000015   7401         MOV     A,#0x1
   \   000017   F0           MOVX    @DPTR,A
    273                    // Turn ON Allow Bind mode infinitly
    274                  zb_AllowBind( 0xFF );
   \   000018                ; Setup parameters for call to function zb_AllowBind
   \   000018   79FF         MOV     R1,#-0x1
   \   00001A   12....       LCALL   ??zb_AllowBind?relay
    275                  HalLedSet( HAL_LED_3, HAL_LED_MODE_ON );
   \   00001D                ; Setup parameters for call to function HalLedSet
   \   00001D   7A01         MOV     R2,#0x1
   \   00001F   7904         MOV     R1,#0x4
   \   000021   12....       LCALL   ??HalLedSet?relay
    276           //       HalLedBlink ( HAL_LED_4, 6, 50, 200 );
    277                  HalLedSet( HAL_LED_4, HAL_LED_MODE_OFF );
   \   000024                ; Setup parameters for call to function HalLedSet
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7908         MOV     R1,#0x8
   \   000028   12....       LCALL   ??HalLedSet?relay
    278                  HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   00002B                ; Setup parameters for call to function HalLedSet
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7902         MOV     R1,#0x2
   \   00002F   12....       LCALL   ??HalLedSet?relay
    279                  HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   000032                ; Setup parameters for call to function HalLedSet
   \   000032   7A00         MOV     R2,#0x0
   \   000034   7901         MOV     R1,#0x1
   \   000036   12....       LCALL   ??HalLedSet?relay
    280                  //This node is the gateway node
    281                  isGateWay = TRUE;
   \   000039   90....       MOV     DPTR,#isGateWay
   \   00003C   7401         MOV     A,#0x1
   \   00003E   F0           MOVX    @DPTR,A
    282                  
    283                 allowJoin = 0;
   \   00003F   90....       MOV     DPTR,#??allowJoin
   \   000042   E4           CLR     A
   \   000043   F0           MOVX    @DPTR,A
    284          
    285              }
    286            
    287            
    288              keys=0;
    289            // Shift is used to make each button/switch dual purpose.
    290            if ( shift )
    291            {
    292              if ( keys & HAL_KEY_SW_1 )
    293              {
    294              }
    295              if ( keys & HAL_KEY_SW_2 )
    296              {
    297              }
    298              if ( keys & HAL_KEY_SW_3 )
    299              {
    300              }
    301              if ( keys & HAL_KEY_SW_4 )
    302              {
    303              }
    304            }
    305            else
    306            {
    307                
    308              if ( keys & HAL_KEY_SW_1 )
    309              {
    310                if ( appState == APP_INIT  )
    311                {
    312                  // Key 1 starts device as a coordinator
    313                  logicalType = ZG_DEVICETYPE_COORDINATOR;
    314                  zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
    315                          
    316                  // Reset the device with new configuration
    317          #ifdef RESETVAL
    318                        uart_printf("RESET VAL 2 !\r\n");
    319                        MicroWait (10000);
    320          #endif        
    321                  zb_SystemReset();
    322                }
    323              }
    324              if ( keys & HAL_KEY_SW_2 )
    325              {
    326                allowBind ^= 1;
    327                if (allowBind) 
    328                {
    329                  // Turn ON Allow Bind mode infinitly
    330                  zb_AllowBind( 0xFF );
    331                  HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
    332                  //This node is the gateway node
    333                  isGateWay = TRUE;
    334                  
    335                  // Update the display
    336                  #if defined ( LCD_SUPPORTED )
    337                  HalLcdWriteString( "Gateway Mode", HAL_LCD_LINE_2 );
    338                  #endif
    339                }
    340                else
    341                {
    342                  // Turn OFF Allow Bind mode infinitly
    343                  zb_AllowBind( 0x00 );
    344                  HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
    345                  isGateWay = FALSE;
    346                  
    347                  // Update the display
    348                  #if defined ( LCD_SUPPORTED )
    349                  HalLcdWriteString( "Collector", HAL_LCD_LINE_2 );
    350                  #endif
    351                }
    352              }
    353              if ( keys & HAL_KEY_SW_3 )
    354              {
    355                // Start reporting
    356                osal_set_event( sapi_TaskID, MY_REPORT_EVT );
    357              }
    358              if ( keys & HAL_KEY_SW_4 )
    359              {
    360                // Key 4 is used to control which routers 
    361                // that can accept join requests
    362                allowJoin ^= 1;
    363                if(allowJoin)
    364                {
    365                  NLME_PermitJoiningRequest(0xFF);
    366                }
    367                else {
    368                  NLME_PermitJoiningRequest(0);
    369                }
    370              }
    371            }
    372          }
   \                     ??zb_HandleKeys_0:
   \   000044   D083         POP     DPH
   \   000046   D082         POP     DPL
   \   000048   02....       LJMP    ?BRET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??allowBind:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??allowJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for allowJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    373          
    374          /******************************************************************************
    375           * @fn          #include "hal_led.h"
    376           *
    377           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    378           *              after a start request operation completes
    379           *
    380           * @param       status - The status of the start operation.  Status of
    381           *                       ZB_SUCCESS indicates the start operation completed
    382           *                       successfully.  Else the status is an error code.
    383           *
    384           * @return      none
    385           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    386          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    387          { 
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    388            // If the device sucessfully started, change state to running
    389            if ( status == ZB_SUCCESS )   
   \   000006   7022         JNZ     ??zb_StartConfirm_0
    390            {
    391              // Set LED 1 to indicate that node is operational on the network
    392              HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
   \   000008                ; Setup parameters for call to function HalLedSet
   \   000008   7A01         MOV     R2,#0x1
   \   00000A   7901         MOV     R1,#0x1
   \   00000C   12....       LCALL   ??HalLedSet?relay
    393          
    394              // Change application state
    395              appState = APP_START;
   \   00000F   90....       MOV     DPTR,#appState
   \   000012   7402         MOV     A,#0x2
   \   000014   F0           MOVX    @DPTR,A
    396              
    397              // Set event to bind to a collector
    398              osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
   \   000015                ; Setup parameters for call to function osal_set_event
   \   000015   12....       LCALL   ?Subroutine2 & 0xFFFF
    399                 
    400               // Store parent short address
    401              zb_GetDeviceInfo(ZB_INFO_PARENT_SHORT_ADDR, &parentShortAddr);
   \                     ??CrossCallReturnLabel_3:
   \   000018                ; Setup parameters for call to function zb_GetDeviceInfo
   \   000018   7A..         MOV     R2,#parentShortAddr & 0xff
   \   00001A   7B..         MOV     R3,#(parentShortAddr >> 8) & 0xff
   \   00001C   7903         MOV     R1,#0x3
   \   00001E   12....       LCALL   ??zb_GetDeviceInfo?relay
    402              
    403              zb_HandleKeys(0,0);    
   \   000021                ; Setup parameters for call to function zb_HandleKeys
   \   000021   7A00         MOV     R2,#0x0
   \   000023   7900         MOV     R1,#0x0
   \   000025   12....       LCALL   ??zb_HandleKeys?relay
   \   000028   800C         SJMP    ??CrossCallReturnLabel_1
    404            }
    405            else
    406            {
    407              // Try again later with a delay
    408              osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
   \                     ??zb_StartConfirm_0:
   \   00002A                ; Setup parameters for call to function osal_start_timerEx
   \   00002A   90....       MOV     DPTR,#myStartRetryDelay
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FC           MOV     R4,A
   \   00002F   7D00         MOV     R5,#0x0
   \   000031   7A01         MOV     R2,#0x1
   \   000033   12....       LCALL   ?Subroutine1 & 0xFFFF
    409            }
    410          }
   \                     ??CrossCallReturnLabel_1:
   \   000036   80..         SJMP    ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7A04         MOV     R2,#0x4
   \   000002                REQUIRE ??Subroutine3_0
   \   000002                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#sapi_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_set_event?relay
   \   00000A   22           RET
    411          
    412          /******************************************************************************
    413           * @fn          zb_SendDataConfirm
    414           *
    415           * @brief       The zb_SendDataConfirm callback function is called by the
    416           *              ZigBee stack after a send data operation completes
    417           *
    418           * @param       handle - The handle identifying the data transmission.
    419           *              status - The status of the operation.
    420           *
    421           * @return      none
    422           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    423          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    424          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    425            if ( status != ZB_SUCCESS && !isGateWay ) 
   \   000006   6035         JZ      ??zb_SendDataConfirm_0
   \   000008   90....       MOV     DPTR,#isGateWay
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   702F         JNZ     ??zb_SendDataConfirm_0
    426            {
    427              if ( ++reportFailureNr>=REPORT_FAILURE_LIMIT ) 
   \   00000E   90....       MOV     DPTR,#reportFailureNr
   \   000011   E0           MOVX    A,@DPTR
   \   000012   04           INC     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   C3           CLR     C
   \   000015   9404         SUBB    A,#0x4
   \   000017   402F         JC      ??zb_SendDataConfirm_1
    428              {   
    429                 // Stop reporting
    430                 osal_stop_timerEx( sapi_TaskID, MY_REPORT_EVT );
   \   000019                ; Setup parameters for call to function osal_stop_timerEx
   \   000019   7A02         MOV     R2,#0x2
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   90....       MOV     DPTR,#sapi_TaskID
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   ??osal_stop_timerEx?relay
    431                 
    432                 // After failure reporting start automatically when the device
    433                 // is binded to a new gateway
    434                 reportState=TRUE;
   \   000025   90....       MOV     DPTR,#reportState
   \   000028   7401         MOV     A,#0x1
   \   00002A   F0           MOVX    @DPTR,A
    435                 
    436                 // Delete previous binding
    437                 zb_BindDevice( FALSE, DUMMY_REPORT_CMD_ID, (uint8 *)NULL );
   \   00002B                ; Setup parameters for call to function zb_BindDevice
   \   00002B   7C00         MOV     R4,#0x0
   \   00002D   7D00         MOV     R5,#0x0
   \   00002F   7A03         MOV     R2,#0x3
   \   000031   7B00         MOV     R3,#0x0
   \   000033   7900         MOV     R1,#0x0
   \   000035   12....       LCALL   ??zb_BindDevice?relay
    438                 
    439                 // Try binding to a new gateway
    440                 osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
   \   000038                ; Setup parameters for call to function osal_set_event
   \   000038   12....       LCALL   ?Subroutine2 & 0xFFFF
    441                 reportFailureNr=0;
   \                     ??CrossCallReturnLabel_4:
   \   00003B   8006         SJMP    ??zb_SendDataConfirm_2
    442              }
    443            }
    444            else if ( !isGateWay ) 
   \                     ??zb_SendDataConfirm_0:
   \   00003D   90....       MOV     DPTR,#isGateWay
   \   000040   E0           MOVX    A,@DPTR
   \   000041   7005         JNZ     ??zb_SendDataConfirm_1
    445            {
    446              reportFailureNr=0;
   \                     ??zb_SendDataConfirm_2:
   \   000043   90....       MOV     DPTR,#reportFailureNr
   \   000046   E4           CLR     A
   \   000047   F0           MOVX    @DPTR,A
    447            }
    448          }
   \                     ??zb_SendDataConfirm_1:
   \   000048   80..         SJMP    ??Subroutine4_0
    449          
    450          /******************************************************************************
    451           * @fn          zb_BindConfirm
    452           *
    453           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    454           *              after a bind operation completes.
    455           *
    456           * @param       commandId - The command ID of the binding being confirmed.
    457           *              status - The status of the bind operation.
    458           *
    459           * @return      none
    460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    462          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    463            if( status == ZB_SUCCESS )
   \   000006   701A         JNZ     ??zb_BindConfirm_0
    464            {
    465              appState = APP_BINDED;
   \   000008   90....       MOV     DPTR,#appState
   \   00000B   7403         MOV     A,#0x3
   \   00000D   F0           MOVX    @DPTR,A
    466              // Set LED2 to indicate binding successful
    467              HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
   \   00000E                ; Setup parameters for call to function HalLedSet
   \   00000E   7A01         MOV     R2,#0x1
   \   000010   7902         MOV     R1,#0x2
   \   000012   12....       LCALL   ??HalLedSet?relay
    468              
    469              // After failure reporting start automatically when the device
    470              // is binded to a new gateway
    471              if ( reportState ) 
   \   000015   90....       MOV     DPTR,#reportState
   \   000018   E0           MOVX    A,@DPTR
   \   000019   6014         JZ      ??CrossCallReturnLabel_2
    472              {
    473                // Start reporting
    474                osal_set_event( sapi_TaskID, MY_REPORT_EVT );
   \   00001B                ; Setup parameters for call to function osal_set_event
   \   00001B   7A02         MOV     R2,#0x2
   \   00001D   12....       LCALL   ??Subroutine3_0 & 0xFFFF
    475              }
    476            }
   \                     ??CrossCallReturnLabel_5:
   \   000020   800D         SJMP    ??CrossCallReturnLabel_2
    477            else
    478            {
    479              osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
   \                     ??zb_BindConfirm_0:
   \   000022                ; Setup parameters for call to function osal_start_timerEx
   \   000022   90....       MOV     DPTR,#myBindRetryDelay
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FC           MOV     R4,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FD           MOV     R5,A
   \   00002A   7A04         MOV     R2,#0x4
   \   00002C   12....       LCALL   ?Subroutine1 & 0xFFFF
    480            }
    481          }
   \                     ??CrossCallReturnLabel_2:
   \   00002F   80..         SJMP    ??Subroutine4_0
    482          
    483          /******************************************************************************
    484           * @fn          zb_AllowBindConfirm
    485           *
    486           * @brief       Indicates when another device attempted to bind to this device
    487           *
    488           * @param
    489           *
    490           * @return      none
    491           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    492          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    493          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    494          }
   \   000000   02....       LJMP    ?BRET
    495          
    496          /******************************************************************************
    497           * @fn          zb_FindDeviceConfirm
    498           *
    499           * @brief       The zb_FindDeviceConfirm callback function is called by the
    500           *              ZigBee stack when a find device operation completes.
    501           *
    502           * @param       searchType - The type of search that was performed.
    503           *              searchKey - Value that the search was executed on.
    504           *              result - The result of the search.
    505           *
    506           * @return      none
    507           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    508          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    509          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    510          }
   \   000000   02....       LJMP    ?BRET
    511          
    512          /******************************************************************************
    513           * @fn          zb_ReceiveDataIndication
    514           *
    515           * @brief       The zb_ReceiveDataIndication callback function is called
    516           *              asynchronously by the ZigBee stack to notify the application
    517           *              when data is received from a peer device.
    518           *
    519           * @param       source - The short address of the peer device that sent the data
    520           *              command - The commandId associated with the data
    521           *              len - The number of bytes in the pData parameter
    522           *              pData - The data sent by the peer device
    523           *
    524           * @return      none
    525           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    526          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    527          { 
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    528          }
   \   000000   02....       LJMP    ?BRET
    529          
    530          /******************************************************************************
    531           * @fn          uartRxCB
    532           *
    533           * @brief       Callback function for UART 
    534           *           // ½ÓÊÕµ½´®¿ÚÐÅºÅµÄ´¦Àí
    535           * @param       port - UART port
    536           *              event - UART event that caused callback 
    537           *
    538           * @return      none
    539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    540          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
    541          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 276
   \   000005   7582EC       MOV     DPL,#-0x14
   \   000008   7583FE       MOV     DPH,#-0x2
   \   00000B   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   00000E   8A..         MOV     ?V0 + 2,R2
    542            uint8 pBuf[RX_BUF_LEN+10];
    543            uint16 cmd;
    544            uint16 len=0,len1;
   \   000010   7E00         MOV     R6,#0x0
   \   000012   7F00         MOV     R7,#0x0
    545            if ( event != HAL_UART_TX_EMPTY ) 
   \   000014   7410         MOV     A,#0x10
   \   000016   65..         XRL     A,?V0 + 2
   \   000018   7003         JNZ     $+5
   \   00001A   02....       LJMP    ??uartRxCB_0 & 0xFFFF
    546            {
    547              len1=1;
    548              while(len1)
    549              {
    550                  len1 = HalUARTRead( HAL_UART_PORT_0, pBuf+len, RX_BUF_LEN );
   \                     ??uartRxCB_1:
   \   00001D                ; Setup parameters for call to function HalUARTRead
   \   00001D   7C00         MOV     R4,#0x0
   \   00001F   7D01         MOV     R5,#0x1
   \   000021   740A         MOV     A,#0xa
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E582         MOV     A,DPL
   \   000028   2E           ADD     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   E583         MOV     A,DPH
   \   00002C   3F           ADDC    A,R7
   \   00002D   FB           MOV     R3,A
   \   00002E   7900         MOV     R1,#0x0
   \   000030   12....       LCALL   ??HalUARTRead?relay
   \   000033   8A..         MOV     ?V0 + 0,R2
   \   000035   8B..         MOV     ?V0 + 1,R3
    551                  len+=len1;
   \   000037   EE           MOV     A,R6
   \   000038   25..         ADD     A,?V0 + 0
   \   00003A   FE           MOV     R6,A
   \   00003B   EF           MOV     A,R7
   \   00003C   35..         ADDC    A,?V0 + 1
   \   00003E   FF           MOV     R7,A
    552                  if(len>255)
   \   00003F   C3           CLR     C
   \   000040   9401         SUBB    A,#0x1
   \   000042   4003         JC      $+5
   \   000044   02....       LJMP    ??uartRxCB_2 & 0xFFFF
    553                      break;
    554                  MicroWait (5000);
   \   000047                ; Setup parameters for call to function Onboard_wait
   \   000047   7A88         MOV     R2,#-0x78
   \   000049   7B13         MOV     R3,#0x13
   \   00004B   12....       LCALL   ??Onboard_wait?relay
    555              }
   \   00004E   E5..         MOV     A,?V0 + 0
   \   000050   45..         ORL     A,?V0 + 1
   \   000052   70C9         JNZ     ??uartRxCB_1
    556              if(len>255)
    557                  len=255;
    558              if ( len>0 ) 
   \   000054   EE           MOV     A,R6
   \   000055   4F           ORL     A,R7
   \   000056   7003         JNZ     $+5
   \   000058   02....       LJMP    ??uartRxCB_0 & 0xFFFF
    559              {
    560                cmd = BUILD_UINT16(pBuf[SYS_PING_CMD_OFFSET+ 1], pBuf[SYS_PING_CMD_OFFSET]);
    561                if( (pBuf[FRAME_SOF_OFFSET] == CPT_SOP) && (cmd == SYS_PING_REQUEST) ) 
   \                     ??uartRxCB_3:
   \   00005B   740A         MOV     A,#0xa
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   E0           MOVX    A,@DPTR
   \   000061   64FE         XRL     A,#0xfe
   \   000063   6003         JZ      $+5
   \   000065   02....       LJMP    ??uartRxCB_4 & 0xFFFF
   \   000068   740C         MOV     A,#0xc
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FA           MOV     R2,A
   \   00006F   740B         MOV     A,#0xb
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F9           MOV     R1,A
   \   000076   EA           MOV     A,R2
   \   000077   F8           MOV     R0,A
   \   000078   7421         MOV     A,#0x21
   \   00007A   68           XRL     A,R0
   \   00007B   7001         JNZ     ??uartRxCB_5
   \   00007D   E9           MOV     A,R1
   \                     ??uartRxCB_5:
   \   00007E   6003         JZ      $+5
   \   000080   02....       LJMP    ??uartRxCB_4 & 0xFFFF
    562                {
    563                  sysPingReqRcvd();
   \   000083   85..82       MOV     DPL,?XSP + 0
   \   000086   85..83       MOV     DPH,?XSP + 1
   \   000089   74FE         MOV     A,#-0x2
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   7401         MOV     A,#0x1
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   7405         MOV     A,#0x5
   \   000093   F0           MOVX    @DPTR,A
   \   000094   7402         MOV     A,#0x2
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   7461         MOV     A,#0x61
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   7403         MOV     A,#0x3
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   7401         MOV     A,#0x1
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   7404         MOV     A,#0x4
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   7441         MOV     A,#0x41
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   7405         MOV     A,#0x5
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   E4           CLR     A
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3                ; Setup parameters for call to function zb_GetDeviceInfo
   \   0000B3   7406         MOV     A,#0x6
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   AA82         MOV     R2,DPL
   \   0000BA   AB83         MOV     R3,DPH
   \   0000BC   7906         MOV     R1,#0x6
   \   0000BE   12....       LCALL   ??zb_GetDeviceInfo?relay
   \   0000C1                ; Setup parameters for call to function zb_GetDeviceInfo
   \   0000C1   7408         MOV     A,#0x8
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   AA82         MOV     R2,DPL
   \   0000C8   AB83         MOV     R3,DPH
   \   0000CA   7905         MOV     R1,#0x5
   \   0000CC   12....       LCALL   ??zb_GetDeviceInfo?relay
   \   0000CF   7808         MOV     R0,#0x8
   \   0000D1   7401         MOV     A,#0x1
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   75..00       MOV     ?V0 + 0,#0x0
   \   0000D9   8009         SJMP    ??uartRxCB_6
   \                     ??uartRxCB_2:
   \   0000DB   7EFF         MOV     R6,#-0x1
   \   0000DD   02....       LJMP    ??uartRxCB_3 & 0xFFFF
   \                     ??uartRxCB_7:
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   62..         XRL     ?V0 + 0,A
   \   0000E3   A3           INC     DPTR
   \                     ??uartRxCB_6:
   \   0000E4   88..         MOV     ?V0 + 1,R0
   \   0000E6   74FF         MOV     A,#-0x1
   \   0000E8   25..         ADD     A,?V0 + 1
   \   0000EA   18           DEC     R0
   \   0000EB   04           INC     A
   \   0000EC   70F2         JNZ     ??uartRxCB_7
   \   0000EE   7409         MOV     A,#0x9
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   E5..         MOV     A,?V0 + 0
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6                ; Setup parameters for call to function HalUARTWrite
   \   0000F6   7C0A         MOV     R4,#0xa
   \   0000F8   7D00         MOV     R5,#0x0
   \   0000FA   85..82       MOV     DPL,?XSP + 0
   \   0000FD   85..83       MOV     DPH,?XSP + 1
   \   000100   AA82         MOV     R2,DPL
   \   000102   AB83         MOV     R3,DPH
   \   000104   7900         MOV     R1,#0x0
   \   000106   12....       LCALL   ??HalUARTWrite?relay
   \   000109   8010         SJMP    ??uartRxCB_0
    564                }
    565                else
    566                {
    567                    configset(pBuf,len, LOG_TYPE); 
   \                     ??uartRxCB_4:
   \   00010B                ; Setup parameters for call to function configset
   \   00010B   7C00         MOV     R4,#0x0
   \   00010D   EE           MOV     A,R6
   \   00010E   F9           MOV     R1,A
   \   00010F   740A         MOV     A,#0xa
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   AA82         MOV     R2,DPL
   \   000116   AB83         MOV     R3,DPH
   \   000118   12....       LCALL   ??configset?relay
    568                }
    569              }
    570            }
    571          }
   \                     ??uartRxCB_0:
   \   00011B   758214       MOV     DPL,#0x14
   \   00011E   758301       MOV     DPH,#0x1
   \   000121   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   000124   7F06         MOV     R7,#0x6
   \   000126   02....       LJMP    ?BANKED_LEAVE_XDATA
    572          
    573          
    574          
    575          
    576          /******************************************************************************
    577           * @fn          sysPingReqRcvd
    578           *
    579           * @brief       Ping request received 
    580           *
    581           * @param       none
    582           *              
    583           * @return      none
    584           */
    585          static void sysPingReqRcvd(void)
    586          {
    587             sysPingRsp();
    588          }
    589          
    590          /******************************************************************************
    591           * @fn          sysPingRsp
    592           *
    593           * @brief       Build and send Ping response
    594           *
    595           * @param       none
    596           *              
    597           * @return      none
    598           */
    599          static void sysPingRsp(void)
    600          {
    601            uint8 pBuf[SYS_PING_RSP_LENGTH+3];
    602            
    603            // Start of Frame Delimiter
    604            pBuf[FRAME_SOF_OFFSET] = CPT_SOP;
    605            
    606            // Length
    607            pBuf[FRAME_LENGTH_OFFSET] = 5; 
    608            
    609            // Command type
    610            pBuf[FRAME_CMD0_OFFSET] = LO_UINT16(SYS_PING_RESPONSE); 
    611            pBuf[FRAME_CMD1_OFFSET] = HI_UINT16(SYS_PING_RESPONSE);
    612            
    613            // Stack profile
    614            pBuf[FRAME_DATA_OFFSET] = LO_UINT16(STACK_PROFILE);
    615            pBuf[FRAME_DATA_OFFSET+ 1] = HI_UINT16(STACK_PROFILE);
    616            //PaNID Óë chancel
    617            zb_GetDeviceInfo(ZB_INFO_PAN_ID, &pBuf[FRAME_DATA_OFFSET+ 2]);
    618            zb_GetDeviceInfo(ZB_INFO_CHANNEL, &pBuf[FRAME_DATA_OFFSET+ 4]);
    619            
    620            
    621            // Frame Check Sequence
    622            pBuf[SYS_PING_RSP_LENGTH +2] = calcFCS(&pBuf[FRAME_LENGTH_OFFSET], (SYS_PING_RSP_LENGTH +1));
    623            
    624            // Write frame to UART
    625            HalUARTWrite(HAL_UART_PORT_0,pBuf, SYS_PING_RSP_LENGTH+3);
    626          }
    627          
    628          /******************************************************************************
    629           * @fn          sendGtwReport
    630           *
    631           * @brief       Build and send gateway report
    632           *
    633           * @param       none
    634           *              
    635           * @return      none
    636           */
    637          
    638          /******************************************************************************
    639           * @fn          sendDummyReport
    640           *
    641           * @brief       Send dummy report (used to visualize collector nodes on PC GUI)
    642           *
    643           * @param       none
    644           *              
    645           * @return      none
    646           */
    647          static void sendDummyReport(void)
    648          {
    649          
    650          }
    651          
    652          /******************************************************************************
    653           * @fn          channel_panid_init
    654           *
    655           * @brief       ¶ÔÐÅµÀºÍPANIDÅÐ¶Ï²¢ÉèÖÃ
    656           *
    657           * @param       none
    658           *              
    659           * @return      none
    660           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    661          void ChannelPanidInit (void)
   \                     ChannelPanidInit:
    662          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    663            /* user code start */
    664            uint8 channel = zb_Readchannel();
   \   00000A                ; Setup parameters for call to function zb_Readchannel
   \   00000A   12....       LCALL   ??zb_Readchannel?relay
   \   00000D   E9           MOV     A,R1
   \   00000E   FE           MOV     R6,A
    665            uint8 panid[2];
    666            zb_Readpandid(panid);
   \   00000F                ; Setup parameters for call to function zb_Readpandid
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   ??zb_Readpandid?relay
    667            if(channel != 11 || panid[0] != 0x06 || panid[1] != 0x80)
   \   00001C   740B         MOV     A,#0xb
   \   00001E   6E           XRL     A,R6
   \   00001F   7015         JNZ     ??ChannelPanidInit_0
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6406         XRL     A,#0x6
   \   00002A   700A         JNZ     ??ChannelPanidInit_0
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6480         XRL     A,#0x80
   \   000034   6026         JZ      ??ChannelPanidInit_1
    668            {
    669              panid[0] = 0x06;
   \                     ??ChannelPanidInit_0:
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   7406         MOV     A,#0x6
   \   00003E   F0           MOVX    @DPTR,A
    670              panid[1] = 0x80;
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   7480         MOV     A,#-0x80
   \   000046   F0           MOVX    @DPTR,A
    671              channel = 11;
    672              zb_Writepandid(panid);
   \   000047                ; Setup parameters for call to function zb_Writepandid
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   AA82         MOV     R2,DPL
   \   00004F   AB83         MOV     R3,DPH
   \   000051   12....       LCALL   ??zb_Writepandid?relay
    673              zb_Writechannel(channel);
   \   000054                ; Setup parameters for call to function zb_Writechannel
   \   000054   790B         MOV     R1,#0xb
   \   000056   12....       LCALL   ??zb_Writechannel?relay
    674              zb_SystemReset();
   \   000059                ; Setup parameters for call to function zb_SystemReset
   \   000059   12....       LCALL   ??zb_SystemReset?relay
    675            }
    676            /* user code end */
    677          }
   \                     ??ChannelPanidInit_1:
   \   00005C   7402         MOV     A,#0x2
   \   00005E   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myStartRetryDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myBindRetryDelay>`:
   \   000000   D007         DW 2000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myReportPeriod>`:
   \   000000   D007         DW 2000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for allowJoin>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HandleOsalEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_StartConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_SendDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_BindConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_AllowBindConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_FindDeviceConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_ReceiveDataIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??uartRxCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ChannelPanidInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ChannelPanidInit
    678          /******************************************************************************
    679           * @fn          calcFCS
    680           *
    681           * @brief       This function calculates the FCS checksum for the serial message 
    682           *
    683           * @param       pBuf - Pointer to the end of a buffer to calculate the FCS.
    684           *              len - Length of the pBuf.
    685           *
    686           * @return      The calculated FCS.
    687           ******************************************************************************
    688           */
    689          static uint8 calcFCS(uint8 *pBuf, uint8 len)
    690          {
    691            uint8 rtrn = 0;
    692          
    693            while (len--)
    694            {
    695              rtrn ^= *pBuf++;
    696            }
    697          
    698            return rtrn;
    699          }
    700          

   Maximum stack usage in bytes:

     Function                  ISTACK PSTACK XSTACK
     --------                  ------ ------ ------
     ChannelPanidInit              0      0     11
       -> zb_Readchannel           0      0     22
       -> zb_Readpandid            0      0     22
       -> zb_Writepandid           0      0     22
       -> zb_Writechannel          0      0     22
       -> zb_SystemReset           0      0     22
     uartRxCB                      1      0    290
       -> HalUARTRead              0      0    580
       -> Onboard_wait             0      0    580
       -> zb_GetDeviceInfo         0      0    580
       -> zb_GetDeviceInfo         0      0    580
       -> HalUARTWrite             0      0    580
       -> configset                0      0    580
     zb_AllowBindConfirm           0      0      0
     zb_BindConfirm                0      0      9
       -> HalLedSet                0      0     18
       -> osal_set_event           0      0     18
       -> osal_start_timerEx       0      0     18
     zb_FindDeviceConfirm          0      0      0
     zb_HandleKeys                 2      0      9
       -> zb_AllowBind             4      0      0
       -> HalLedSet                4      0      0
       -> HalLedSet                4      0      0
       -> HalLedSet                4      0      0
       -> HalLedSet                4      0      0
     zb_HandleOsalEvent            0      0     10
       -> initUart                 0      0     20
       -> HalLedBlink              0      0     20
       -> HalLedBlink              0      0     20
       -> zb_ReadConfiguration     0      0     20
       -> zb_StartRequest          0      0     20
       -> zb_StartRequest          0      0     20
       -> osal_start_timerEx       0      0     20
       -> zb_BindDevice            0      0     20
     zb_ReceiveDataIndication      0      0      4
     zb_SendDataConfirm            0      0      9
       -> osal_stop_timerEx        0      0     18
       -> zb_BindDevice            0      0     18
       -> osal_set_event           0      0     18
     zb_StartConfirm               0      0      9
       -> HalLedSet                0      0     18
       -> osal_set_event           0      0     18
       -> zb_GetDeviceInfo         0      0     18
       -> zb_HandleKeys            0      0     18
       -> osal_start_timerEx       0      0     18


   Segment part sizes:

     Function/Label                       Bytes
     --------------                       -----
     appState                                1
     reportState                             1
     myStartRetryDelay                       1
     isGateWay                               1
     myBindRetryDelay                        2
     myReportPeriod                          2
     reportFailureNr                         1
     parentShortAddr                         2
     zb_InCmdList                            4
     zb_OutCmdList                           4
     zb_SimpleDesc                          12
     zb_HandleOsalEvent                    141
     ?Subroutine1                           11
     ?Subroutine0                            3
     ??Subroutine4_0                         5
     zb_HandleKeys                          75
     allowBind                               1
     allowJoin                               1
     zb_StartConfirm                        56
     ?Subroutine2                            2
     ??Subroutine3_0                        11
     zb_SendDataConfirm                     74
     zb_BindConfirm                         49
     zb_AllowBindConfirm                     3
     zb_FindDeviceConfirm                    3
     zb_ReceiveDataIndication                3
     uartRxCB                              297
     ChannelPanidInit                       97
     ?<Initializer for myStartRetryDelay>    1
     ?<Initializer for myBindRetryDelay>     2
     ?<Initializer for myReportPeriod>       2
     ?<Initializer for allowJoin>            1
     ??zb_HandleOsalEvent?relay              6
     ??zb_HandleKeys?relay                   6
     ??zb_StartConfirm?relay                 6
     ??zb_SendDataConfirm?relay              6
     ??zb_BindConfirm?relay                  6
     ??zb_AllowBindConfirm?relay             6
     ??zb_FindDeviceConfirm?relay            6
     ??zb_ReceiveDataIndication?relay        6
     ??uartRxCB?relay                        6
     ??ChannelPanidInit?relay                6

 
 830 bytes in segment BANKED_CODE
  60 bytes in segment BANK_RELAYS
   6 bytes in segment XDATA_I
   6 bytes in segment XDATA_ID
  20 bytes in segment XDATA_ROM_C
   7 bytes in segment XDATA_Z
 
 896 bytes of CODE  memory
  20 bytes of CONST memory
  13 bytes of XDATA memory

Errors: none
Warnings: none
