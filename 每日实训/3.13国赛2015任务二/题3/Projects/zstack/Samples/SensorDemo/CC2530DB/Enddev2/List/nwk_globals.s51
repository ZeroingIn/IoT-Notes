///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        14/Mar/2017  16:39:01 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Components\sta /
//                          ck\nwk\nwk_globals.c                              /
//    Command line       =  -f F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zs /
//                          tack\Samples\SensorDemo\CC2530DB\..\..\..\Tools\C /
//                          C2530DB\f8wCoord.cfg (-DCPU32MHZ                  /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f   /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\Tools\CC25 /
//                          30DB\f8wConfig.cfg (-DSECURE=0                    /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00100000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x8888                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ /
//                          Îñ¶þ\Ìâ3\Components\stack\nwk\nwk_globals.c -D    /
//                          VER=2.3 -D ZIGBEEPRO -D NWK_AUTO_POLL -D          /
//                          HOLD_AUTO_START -D BUILD_ALL_DEVICES -D           /
//                          REFLECTOR -D NV_INIT -D xNV_RESTORE -D ZTOOL_P1   /
//                          -D MT_TASK -D DEVICE_LOGICAL_TYPE=01 -D           /
//                          LOG_TYPE=02 -D xUART_SENSOR -D xLCD_SUPPORTED -D  /
//                          UART_LOOK -lC F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\ /
//                          Projects\zstack\Samples\SensorDemo\CC2530DB\Endde /
//                          v2\List\ -lA F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\P /
//                          rojects\zstack\Samples\SensorDemo\CC2530DB\Enddev /
//                          2\List\ --diag_suppress Pe001,Pa010 -o            /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\Enddev2\Obj\ -e     /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zs /
//                          tack\Samples\SensorDemo\CC2530DB\ -I              /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\SOURCE\ -I       /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\MYAPP\ -I        /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\sensor_drv\ -I   /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\ZMAIN\TI25 /
//                          30DB\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Proje /
//                          cts\zstack\Samples\SensorDemo\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\MT\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ /
//                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I     /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\HAL\TARGET\CC2530EB\ -I                    /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\OSAL\MCU\CCSOC\ -I                         /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\OSAL\INCLUDE\ -I                           /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\STACK\AF\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶ /
//                          þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\NWK\ -I          /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\STACK\SEC\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ /
//                          ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I        /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\STACK\SYS\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ /
//                          ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I         /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\ZMAC\F8W\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶ /
//                          þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\ZMAC\ -I               /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\SERVICES\SADDR\ -I                         /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\SERVICES\SDATA\ -I                         /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\MAC\INCLUDE\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ /
//                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I  /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\MAC\LOW_LEVEL\srf04\ -I                    /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz      /
//                          --require_prototypes                              /
//    List file          =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\Enddev2\List\nwk_gl /
//                          obals.s51                                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME nwk_globals

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??NIB_init?relay
        FUNCTION ??NIB_init?relay,0203H
        PUBLIC ??nwk_Status?relay
        FUNCTION ??nwk_Status?relay,0203H
        PUBLIC ??nwk_globals_init?relay
        FUNCTION ??nwk_globals_init?relay,0203H
        PUBLIC AssociatedDevList
        PUBLIC BindingTable
        PUBLIC Cskip
        PUBLIC CskipChldrn
        PUBLIC CskipRtrs
        PUBLIC NIB_init
        FUNCTION NIB_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC apsEndDeviceBroadcastTable
        PUBLIC bcastHoldAckMask
        PUBLIC bcastHoldHandle
        PUBLIC bcastTable
        PUBLIC defaultKey
        PUBLIC defaultTCLinkKey
        PUBLIC gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES
        PUBLIC gAPS_MAX_GROUPS
        PUBLIC gBIND_REC_SIZE
        PUBLIC gMAX_BCAST
        PUBLIC gMAX_BINDING_CLUSTER_IDS
        PUBLIC gMAX_BROADCAST_QUEUED
        PUBLIC gMAX_NEIGHBOR_ENTRIES
        PUBLIC gMAX_RREQ_ENTRIES
        PUBLIC gMAX_RTG_ENTRIES
        PUBLIC gMAX_RTG_SRC_ENTRIES
        PUBLIC gMAX_SOURCE_ROUTE
        PUBLIC gMIN_TREE_LINK_COST
        PUBLIC gNWK_CONFLICTED_ADDR_EXPIRY_TIME
        PUBLIC gNWK_FREQ_AGILITY_ALL_MAC_ERRS
        PUBLIC gNWK_INDIRECT_CNT_RTG_TMR
        PUBLIC gNWK_INDIRECT_MSG_MAX_ALL
        PUBLIC gNWK_INDIRECT_MSG_MAX_PER
        PUBLIC gNWK_MAX_BINDING_ENTRIES
        PUBLIC gNWK_MAX_DATABUFS_CONFIRMED
        PUBLIC gNWK_MAX_DATABUFS_SCHEDULED
        PUBLIC gNWK_MAX_DATABUFS_TOTAL
        PUBLIC gNWK_MAX_DATABUFS_WAITING
        PUBLIC gNWK_MAX_DEVICE_LIST
        PUBLIC gNWK_MAX_SLEEPING_END_DEVICES
        PUBLIC gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
        PUBLIC neighborTable
        PUBLIC nwk_Status
        FUNCTION nwk_Status,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC nwk_globals_init
        FUNCTION nwk_globals_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC rtDiscTable
        PUBLIC rtgSrcRelayList
        PUBLIC rtgSrcTable
        PUBLIC rtgTable
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
AddrMgrInit         SYMBOL "AddrMgrInit"
NLME_InitLinkStatus SYMBOL "NLME_InitLinkStatus"
NwkFreqAgilityInit  SYMBOL "NwkFreqAgilityInit"
osal_rand           SYMBOL "osal_rand"
osal_memset         SYMBOL "osal_memset"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
NLME_InitStochasticAddressing SYMBOL "NLME_InitStochasticAddressing"
??AddrMgrInit?relay SYMBOL "?relay", AddrMgrInit
??NLME_InitLinkStatus?relay SYMBOL "?relay", NLME_InitLinkStatus
??NLME_InitStochasticAddressing?relay SYMBOL "?relay", NLME_InitStochasticAddressing
??NwkFreqAgilityInit?relay SYMBOL "?relay", NwkFreqAgilityInit
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_rand?relay   SYMBOL "?relay", osal_rand
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
NIB_init            SYMBOL "NIB_init"
??NIB_init?relay    SYMBOL "?relay", NIB_init
nwk_Status          SYMBOL "nwk_Status"
??nwk_Status?relay  SYMBOL "?relay", nwk_Status
nwk_globals_init    SYMBOL "nwk_globals_init"
??nwk_globals_init?relay SYMBOL "?relay", nwk_globals_init

        EXTERN AddrMgrInit
        FUNCTION AddrMgrInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_InitLinkStatus
        FUNCTION NLME_InitLinkStatus,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NwkFreqAgilityInit
        FUNCTION NwkFreqAgilityInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_InitStochasticAddressing
        FUNCTION NLME_InitStochasticAddressing,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AddrMgrInit?relay
        FUNCTION ??AddrMgrInit?relay,00H
        EXTERN ??NLME_InitLinkStatus?relay
        FUNCTION ??NLME_InitLinkStatus?relay,00H
        EXTERN ??NLME_InitStochasticAddressing?relay
        FUNCTION ??NLME_InitStochasticAddressing?relay,00H
        EXTERN ??NwkFreqAgilityInit?relay
        FUNCTION ??NwkFreqAgilityInit?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN _NIB
        EXTERN zgBcastDeliveryTime
        EXTERN zgConcentratorDiscoveryTime
        EXTERN zgConcentratorEnable
        EXTERN zgConcentratorRadius
        EXTERN zgDeviceLogicalType
        EXTERN zgExtendedPANID
        EXTERN zgIndirectMsgTimeout
        EXTERN zgMaxBcastRetires
        EXTERN zgPassiveAckTimeout
        EXTERN zgRouteExpiryTime

// F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Components\stack\nwk\nwk_globals.c
//    1 /**************************************************************************************************
//    2   Filename:       nwk_globals.c
//    3   Revised:        $Date: 2010-01-11 09:24:44 -0800 (Mon, 11 Jan 2010) $
//    4   Revision:       $Revision: 21474 $
//    5 
//    6   Description:    User definable Network Parameters.
//    7 
//    8 
//    9   Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com. 
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComdef.h"
//   44 #include "OSAL.h"
//   45 #include "AddrMgr.h"
//   46 #include "AssocList.h"
//   47 #include "BindingTable.h"
//   48 #include "nwk_util.h"
//   49 #include "nwk_globals.h"
//   50 #include "APS.h"
//   51 #include "ssp.h"
//   52 #include "rtg.h"
//   53 #include "ZDConfig.h"
//   54 #include "ZGlobals.h"
//   55 #include "hal_led.h"
//   56 
//   57 #if defined ( LCD_SUPPORTED )
//   58   #include "OnBoard.h"
//   59 #endif
//   60 
//   61 /* HAL */
//   62 #include "hal_lcd.h"
//   63 
//   64 /*********************************************************************
//   65  * MACROS
//   66  */
//   67 
//   68 /*********************************************************************
//   69  * CONSTANTS
//   70  */
//   71 
//   72 // Maximums for the data buffer queue
//   73 #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
//   74 #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
//   75 #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
//   76 #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
//   77 
//   78 // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
//   79 // A known shortcoming is that when a message is enqueued as "hold" for a
//   80 // sleeping device, the timer tick may have counted down to 1, so that msg
//   81 // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
//   82 // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
//   83 // So the hold time will vary within this interval:
//   84 // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
//   85 //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
//   86 #define NWK_INDIRECT_CNT_RTG_TMR    1
//   87 // To hold msg for sleeping end devices for 30 secs:
//   88 // #define CNT_RTG_TIMER            1
//   89 // #define NWK_INDIRECT_MSG_TIMEOUT 30
//   90 // To hold msg for sleeping end devices for 30 mins:
//   91 // #define CNT_RTG_TIMER            60
//   92 // #define NWK_INDIRECT_MSG_TIMEOUT 30
//   93 // To hold msg for sleeping end devices for 30 days:
//   94 // #define CNT_RTG_TIMER            60
//   95 // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
//   96 // Maximum msgs to hold per associated device.
//   97 #define NWK_INDIRECT_MSG_MAX_PER    3
//   98 // Maximum total msgs to hold for all associated devices.
//   99 #define NWK_INDIRECT_MSG_MAX_ALL    \ 
//  100                             (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
//  101 
//  102 /*********************************************************************
//  103  * TYPEDEFS
//  104  */
//  105 
//  106 /*********************************************************************
//  107  * NWK GLOBAL VARIABLES
//  108  */
//  109 
//  110 // Variables for MAX list size

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA16
//  111 CONST uint16 gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
gNWK_MAX_DEVICE_LIST:
        DW 21
//  112 
//  113 // Variables for MAX Sleeping End Devices

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  114 CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
gNWK_MAX_SLEEPING_END_DEVICES:
        DB 15
//  115 
//  116 // Variables for MAX data buffer levels

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  117 CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
gNWK_MAX_DATABUFS_WAITING:
        DB 8

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  118 CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
gNWK_MAX_DATABUFS_SCHEDULED:
        DB 5

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  119 CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
gNWK_MAX_DATABUFS_CONFIRMED:
        DB 5

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  120 CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
gNWK_MAX_DATABUFS_TOTAL:
        DB 12
//  121 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  122 CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
gNWK_INDIRECT_CNT_RTG_TMR:
        DB 1

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  123 CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
gNWK_INDIRECT_MSG_MAX_PER:
        DB 3

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  124 CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
gNWK_INDIRECT_MSG_MAX_ALL:
        DB 9
//  125 
//  126 // change this if using a different stack profile...
//  127 // Cskip array

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  128 uint16 *Cskip;
Cskip:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  129 
//  130 #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  131   uint8 CskipRtrs[1] = {0};
CskipRtrs:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132   uint8 CskipChldrn[1] = {0};
CskipChldrn:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  133 #elif ( STACK_PROFILE_ID == HOME_CONTROLS )
//  134   uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
//  135   uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
//  136 #elif ( STACK_PROFILE_ID == GENERIC_STAR )
//  137   uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  138   uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  139 #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
//  140   uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  141   uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  142 #endif // STACK_PROFILE_ID
//  143 
//  144 // Minimum lqi value that is required for association

        RSEG XDATA_I:XDATA:NOROOT(0)
//  145 uint8 gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
gMIN_TREE_LINK_COST:
        DATA8
        DS 1
        REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
        REQUIRE __INIT_XDATA_I
//  146 
//  147 // Statically defined Associated Device List

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  148 associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
AssociatedDevList:
        DS 378
        REQUIRE __INIT_XDATA_Z
//  149 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  150 CONST uint8 gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
gMAX_RTG_ENTRIES:
        DB 40

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  151 CONST uint8 gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
gMAX_RTG_SRC_ENTRIES:
        DB 12

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  152 CONST uint8 gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
gMAX_RREQ_ENTRIES:
        DB 8
//  153 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  154 CONST uint8 gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
gMAX_NEIGHBOR_ENTRIES:
        DB 16
//  155 
//  156  // Table of neighboring nodes (not including child nodes)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  157 neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
neighborTable:
        DS 368
        REQUIRE __INIT_XDATA_Z
//  158 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  159 CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
gMAX_SOURCE_ROUTE:
        DB 12
//  160 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  161 CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
gMAX_BROADCAST_QUEUED:
        DB 10
//  162 
//  163 // Routing table

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  164 rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
rtgTable:
        DS 280
        REQUIRE __INIT_XDATA_Z
//  165 
//  166 #if defined ( ZIGBEE_SOURCE_ROUTING )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  167   rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
rtgSrcTable:
        DS 72
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  168   uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
rtgSrcRelayList:
        DS 24
        REQUIRE __INIT_XDATA_Z
//  169 #endif
//  170 
//  171 // Table of current RREQ packets in the network

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  172 rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
rtDiscTable:
        DS 64
        REQUIRE __INIT_XDATA_Z
//  173 
//  174 // Table of data broadcast packets currently in circulation.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  175 bcastEntry_t bcastTable[MAX_BCAST];
bcastTable:
        DS 72
        REQUIRE __INIT_XDATA_Z
//  176 
//  177 // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  178 uint8 bcastHoldHandle[MAX_BCAST];
bcastHoldHandle:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  179 uint32 bcastHoldAckMask[MAX_BCAST];
bcastHoldAckMask:
        DS 36
        REQUIRE __INIT_XDATA_Z
//  180 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  181 CONST uint8 gMAX_BCAST = MAX_BCAST;
gMAX_BCAST:
        DB 9
//  182 
//  183 // For tree addressing, this switch allows the allocation of a 
//  184 // router address to an end device when end device address are 
//  185 // all used up.  If this option is enabled, address space
//  186 // could be limited.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  187 CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
        DB 0
//  188 
//  189 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
//  190 // number of link status periods after the last received address conflict report
//  191 // (network status command)

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  192 CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
gNWK_CONFLICTED_ADDR_EXPIRY_TIME:
        DB 4
//  193 #endif
//  194 
//  195 #if defined ( ZIGBEE_FREQ_AGILITY )

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  196 CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
gNWK_FREQ_AGILITY_ALL_MAC_ERRS:
        DB 0
//  197 #endif
//  198   
//  199 /*********************************************************************
//  200  * APS GLOBAL VARIABLES
//  201  */
//  202 
//  203 // The Maximum number of binding records
//  204 // This number is defined in BindingTable.h - change it there.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA16
//  205 CONST uint16 gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
gNWK_MAX_BINDING_ENTRIES:
        DW 4
//  206 
//  207 #if defined ( REFLECTOR )
//  208   // The Maximum number of cluster IDs in a binding record
//  209   // This number is defined in BindingTable.h - change it there.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  210   CONST uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
gMAX_BINDING_CLUSTER_IDS:
        DB 4
//  211 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA16
//  212   CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
gBIND_REC_SIZE:
        DW 14
//  213 
//  214   // Binding Table

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  215   BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
BindingTable:
        DS 56
        REQUIRE __INIT_XDATA_Z
//  216 #endif
//  217 
//  218 // Maximum number allowed in the groups table.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  219 CONST uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
gAPS_MAX_GROUPS:
        DB 16
//  220 
//  221 // APS End Device Broadcast Table
//  222 #if ( ZG_BUILD_ENDDEVICE_TYPE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  223   apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
apsEndDeviceBroadcastTable:
        DS 90
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  224   uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES:
        DATA8
        DS 1
        REQUIRE `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`
        REQUIRE __INIT_XDATA_I
//  225 #endif
//  226 
//  227 /*********************************************************************
//  228  * SECURITY GLOBAL VARIABLES
//  229  */
//  230 
//  231 // This is the default pre-configured key,
//  232 // change this to make a unique key
//  233 // SEC_KEY_LEN is defined in ssp.h.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  234 CONST uint8 defaultKey[SEC_KEY_LEN] =
defaultKey:
        DB 0
        DB 1
        DB 2
        DB 3
        DB 4
        DB 5
        DB 6
        DB 7
        DB 8
        DB 9
        DB 10
        DB 11
        DB 12
        DB 13
        DB 14
        DB 15
//  235 {
//  236 #if defined ( APP_TP ) || defined ( APP_TP2 )
//  237   // Key for ZigBee Conformance Testing
//  238   0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
//  239   0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
//  240 #else
//  241   // Key for In-House Testing
//  242   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
//  243   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
//  244 #endif
//  245 };
//  246 
//  247 // This is the default pre-configured Trust Center Link key,
//  248 // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  249 CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] =
defaultTCLinkKey:
        DB 86
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
        DB 119
//  250 {
//  251   0x56, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
//  252   0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77
//  253 };
//  254 
//  255 /*********************************************************************
//  256  * STATUS STRINGS
//  257  */
//  258 #if defined ( LCD_SUPPORTED )
//  259   const char PingStr[]         = "Ping Rcvd from";
//  260   const char AssocCnfStr[]     = "Assoc Cnf";
//  261   const char SuccessStr[]      = "Success";
//  262   const char EndDeviceStr[]    = "EndDevice:";
//  263   const char ParentStr[]       = "Parent:";
//  264   const char ZigbeeCoordStr[]  = "ZigBee Coord";
//  265   const char NetworkIDStr[]    = "Network ID:";
//  266   const char RouterStr[]       = "Router:";
//  267   const char OrphanRspStr[]    = "Orphan Response";
//  268   const char SentStr[]         = "Sent";
//  269   const char FailedStr[]       = "Failed";
//  270   const char AssocRspFailStr[] = "Assoc Rsp fail";
//  271   const char AssocIndStr[]     = "Assoc Ind";
//  272   const char AssocCnfFailStr[] = "Assoc Cnf fail";
//  273   const char EnergyLevelStr[]  = "Energy Level";
//  274   const char ScanFailedStr[]   = "Scan Failed";
//  275 #endif
//  276 
//  277 /*********************************************************************
//  278  * @fn       nwk_globals_init()
//  279  *
//  280  * @brief
//  281  *
//  282  *   Initialize nwk layer globals.  These are the system defaults and
//  283  *   should be changed by the user here.  The default definitions are
//  284  *   defined in nwk.h or NLMEDE.h.
//  285  *
//  286  * @param   none
//  287  *
//  288  * @return  none
//  289  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  290 void nwk_globals_init( void )
nwk_globals_init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function nwk_globals_init
        CODE
//  291 {
        FUNCALL nwk_globals_init, AddrMgrInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_globals_init, NLME_InitLinkStatus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_globals_init, NwkFreqAgilityInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  292   AddrMgrInit( NWK_MAX_ADDRESSES );
        ; Setup parameters for call to function AddrMgrInit
        MOV     R2,#0x1a
        MOV     R3,#0x0
        LCALL   ??AddrMgrInit?relay
//  293   
//  294 #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
//  295   if ( ZSTACK_ROUTER_BUILD )
//  296   {
//  297     // Initialize the Cskip Table
//  298     Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
//  299     RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
//  300   }
//  301 #endif
//  302   
//  303   // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
//  304   // to 0 (compiler flag).
//  305   if ( ZSTACK_ROUTER_BUILD && NWK_LINK_STATUS_PERIOD )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??nwk_globals_init_0
        XRL     A,#0x1
        JNZ     ??nwk_globals_init_1
//  306   {
//  307     NLME_InitLinkStatus();
??nwk_globals_init_0:
        ; Setup parameters for call to function NLME_InitLinkStatus
        LCALL   ??NLME_InitLinkStatus?relay
//  308   }
//  309   
//  310 #if defined ( ZIGBEE_FREQ_AGILITY )
//  311   NwkFreqAgilityInit();
??nwk_globals_init_1:
        ; Setup parameters for call to function NwkFreqAgilityInit
        LCALL   ??NwkFreqAgilityInit?relay
        CFI EndBlock cfiBlock0
//  312 #endif
//  313 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  314 
//  315 /*********************************************************************
//  316  * @fn       NIB_init()
//  317  *
//  318  * @brief
//  319  *
//  320  *   Initialize attribute values in NIB
//  321  *
//  322  * @param   none
//  323  *
//  324  * @return  none
//  325  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  326 void NIB_init()
NIB_init:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function NIB_init
        CODE
//  327 {
        FUNCALL NIB_init, osal_rand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NIB_init, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NIB_init, sAddrExtCpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NIB_init, NLME_InitStochasticAddressing
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  328   _NIB.SequenceNum = LO_UINT16(osal_rand());
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        MOV     A,R2
        MOV     DPTR,#_NIB
        MOVX    @DPTR,A
//  329 
//  330   _NIB.nwkProtocolVersion = ZB_PROT_VERS;
        MOV     DPTR,#_NIB + 17
        MOV     A,#0x2
        MOVX    @DPTR,A
//  331   _NIB.MaxDepth = MAX_NODE_DEPTH;
        MOV     DPTR,#_NIB + 4
        MOV     A,#0x14
        MOVX    @DPTR,A
//  332 
//  333 #if ( NWK_MODE == NWK_MODE_MESH )
//  334   _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
        MOV     DPTR,#_NIB + 40
        MOV     A,#0xf
        MOVX    @DPTR,A
//  335   _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
        INC     DPTR
        MOVX    @DPTR,A
//  336 #endif
//  337 
//  338   // BROADCAST SETTINGS:
//  339   // *******************
//  340   //   Broadcast Delivery Time
//  341   //     - set to multiples of 100ms 
//  342   //     - should be 500ms more than the retry time
//  343   //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
//  344   //   Passive Ack Timeout
//  345   //     - set to multiples of 100ms 
//  346   _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
        MOV     DPTR,#zgBcastDeliveryTime
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 7
        MOVX    @DPTR,A
//  347   _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
        MOV     DPTR,#zgPassiveAckTimeout
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 1
        MOVX    @DPTR,A
//  348   _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
        MOV     DPTR,#zgMaxBcastRetires
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 2
        MOVX    @DPTR,A
//  349 
//  350   _NIB.ReportConstantCost = 0;
        MOV     DPTR,#_NIB + 8
        CLR     A
        MOVX    @DPTR,A
//  351   _NIB.RouteDiscRetries = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  352   _NIB.SecureAllFrames = USE_NWK_SECURITY;
        MOV     DPTR,#_NIB + 11
        MOVX    @DPTR,A
//  353   _NIB.nwkAllFresh = NWK_ALL_FRESH;
        MOV     DPTR,#_NIB + 104
        INC     A
        MOVX    @DPTR,A
//  354    
//  355   if ( ZG_SECURE_ENABLED )
//  356   {
//  357     _NIB.SecurityLevel = SECURITY_LEVEL;
//  358   }
//  359   else
//  360   {
//  361     _NIB.SecurityLevel = 0;
        MOV     DPTR,#_NIB + 12
        CLR     A
        MOVX    @DPTR,A
//  362   }
//  363    
//  364 #if defined ( ZIGBEEPRO )
//  365   _NIB.SymLink = FALSE;
        INC     DPTR
        MOVX    @DPTR,A
//  366 #else
//  367   _NIB.SymLink = TRUE;
//  368 #endif  
//  369   
//  370   _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 14
        MOVX    @DPTR,A
//  371 
//  372   _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
        MOV     DPTR,#zgIndirectMsgTimeout
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 15
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  373 
//  374   _NIB.RouteDiscoveryTime = 5;
        MOV     DPTR,#_NIB + 18
        MOV     A,#0x5
        MOVX    @DPTR,A
//  375   _NIB.RouteExpiryTime = zgRouteExpiryTime;
        MOV     DPTR,#zgRouteExpiryTime
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 19
        LCALL   ?Subroutine1 & 0xFFFF
//  376 
//  377   _NIB.nwkDevAddress = INVALID_NODE_ADDR;
//  378   _NIB.nwkLogicalChannel = 0;
??CrossCallReturnLabel_0:
        INC     DPTR
        CLR     A
        LCALL   ?Subroutine1 & 0xFFFF
//  379   _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
//  380   osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#(_NIB + 25) & 0xff
        MOV     R3,#((_NIB + 25) >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  381   _NIB.nwkPanId = INVALID_NODE_ADDR;
        MOV     DPTR,#_NIB + 33
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  382 
//  383   osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#zgExtendedPANID & 0xff
        MOV     R5,#(zgExtendedPANID >> 8) & 0xff
        MOV     R2,#(_NIB + 53) & 0xff
        MOV     R3,#((_NIB + 53) >> 8) & 0xff
        LCALL   ??sAddrExtCpy?relay
//  384    
//  385   _NIB.nwkKeyLoaded = FALSE;
        MOV     DPTR,#_NIB + 61
        CLR     A
        MOVX    @DPTR,A
//  386    
//  387 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
//  388   _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
        MOV     DPTR,#_NIB + 96
        MOV     A,#0x2
        MOVX    @DPTR,A
//  389   _NIB.nwkUniqueAddr = FALSE;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  390 #else
//  391   _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
//  392   _NIB.nwkUniqueAddr = TRUE;
//  393 #endif
//  394 
//  395   _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD; 
        INC     DPTR
        MOV     A,#0xf
        MOVX    @DPTR,A
//  396   _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
//  397  
//  398   //MTO and source routing
//  399   _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
        MOV     DPTR,#zgConcentratorDiscoveryTime
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 102
        MOVX    @DPTR,A
//  400   _NIB.nwkIsConcentrator = zgConcentratorEnable;
        MOV     DPTR,#zgConcentratorEnable
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 101
        MOVX    @DPTR,A
//  401   _NIB.nwkConcentratorRadius = zgConcentratorRadius;
        MOV     DPTR,#zgConcentratorRadius
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 103
        MOVX    @DPTR,A
//  402   _NIB.nwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
        MOV     DPTR,#_NIB + 105
        MOV     A,#0xa
        MOVX    @DPTR,A
//  403 
//  404 #if defined ( ZIGBEE_MULTICAST )
//  405   _NIB.nwkUseMultiCast = TRUE;
        MOV     DPTR,#_NIB + 100
        MOV     A,#0x1
        MOVX    @DPTR,A
//  406 #else
//  407   _NIB.nwkUseMultiCast = FALSE;
//  408 #endif  
//  409   _NIB.nwkManagerAddr = 0x0000;
        MOV     DPTR,#_NIB + 106
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  410   _NIB.nwkUpdateId = 0;
        MOV     DPTR,#_NIB + 110
        MOVX    @DPTR,A
//  411   _NIB.nwkTotalTransmissions = 0;
        MOV     DPTR,#_NIB + 108
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  412 
//  413   if ( ZSTACK_ROUTER_BUILD )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??NIB_init_0
        XRL     A,#0x1
        JNZ     ??NIB_init_1
//  414   {
//  415 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
//  416     NLME_InitStochasticAddressing();
??NIB_init_0:
        ; Setup parameters for call to function NLME_InitStochasticAddressing
        LCALL   ??NLME_InitStochasticAddressing?relay
//  417 #else
//  418     NLME_InitTreeAddressing();
//  419 #endif
//  420   }
//  421 }
??NIB_init_1:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond4) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond4) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond4) CFA_SP SP+-5
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  422 
//  423 /*********************************************************************
//  424  * @fn       nwk_Status()
//  425  *
//  426  * @brief
//  427  *
//  428  *   Status report.
//  429  *
//  430  * @param   statusCode
//  431  * @param   statusValue
//  432  *
//  433  * @return  none
//  434  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  435 void nwk_Status( uint16 statusCode, uint16 statusValue )
nwk_Status:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function nwk_Status
        CODE
//  436 {
        ; Saved register size: 0
        ; Auto size: 0
//  437    
//  438   
//  439 
//  440 #if defined ( LCD_SUPPORTED )
//  441   switch ( statusCode )
//  442   {
//  443     case NWK_STATUS_COORD_ADDR:
//  444       if ( ZSTACK_ROUTER_BUILD )
//  445       {
//  446         HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
//  447         HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
//  448         BuzzerControl( BUZZER_BLIP );
//  449       }
//  450       break;
//  451 
//  452     case NWK_STATUS_ROUTER_ADDR:
//  453       if ( ZSTACK_ROUTER_BUILD )
//  454       {
//  455         HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_LINE_1 );
//  456       }
//  457       break;
//  458 
//  459     case NWK_STATUS_ORPHAN_RSP:
//  460       if ( ZSTACK_ROUTER_BUILD )
//  461       {
//  462         if ( statusValue == ZSuccess )
//  463           HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
//  464         else
//  465           HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
//  466       }
//  467       break;
//  468 
//  469     case NWK_ERROR_ASSOC_RSP:    
//  470       if ( ZSTACK_ROUTER_BUILD )
//  471       {
//  472         HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
//  473         HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
//  474       }
//  475       break;
//  476       
//  477     case NWK_STATUS_ED_ADDR:
//  478       if ( ZSTACK_END_DEVICE_BUILD )
//  479       {
//  480         HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_LINE_1 );
//  481       }
//  482       break;
//  483 
//  484     case NWK_STATUS_PARENT_ADDR:
//  485             HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
//  486       break;
//  487 
//  488     case NWK_STATUS_ASSOC_CNF:
//  489       HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
//  490       break;
//  491     //ÍøÂç²»Ñ°ÔÚ
//  492     case NWK_ERROR_ASSOC_CNF_DENIED:
//  493       HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
//  494       HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
//  495       break;
//  496 
//  497     case NWK_ERROR_ENERGY_SCAN_FAILED:
//  498       HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
//  499       break;
//  500   }
//  501 #endif
//  502 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock6

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for gMIN_TREE_LINK_COST>`:
        DATA8
        DB 6

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`:
        DATA8
        DB 18

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??nwk_globals_init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    nwk_globals_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??NIB_init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    NIB_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??nwk_Status?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    nwk_Status

        END
//  503 
//  504 /*********************************************************************
//  505 *********************************************************************/
// 
//   289 bytes in segment BANKED_CODE
//    18 bytes in segment BANK_RELAYS
//    58 bytes in segment CODE_C
//     2 bytes in segment XDATA_I
//     2 bytes in segment XDATA_ID
// 1 453 bytes in segment XDATA_Z
// 
//   367 bytes of CODE  memory
// 1 455 bytes of XDATA memory
//
//Errors: none
//Warnings: none
