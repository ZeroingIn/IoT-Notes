###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         14/Mar/2017  14:36:51 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\Source\Enddev1.c               #
#    Command line       =  -f F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zst #
#                          ack\Samples\SensorDemo\CC2530DB\..\..\..\Tools\CC2 #
#                          530DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\Tools\CC2530 #
#                          DB\f8wConfig.cfg (-DSECURE=0                       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00100000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x8888                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\Source\Enddev1.c -D VER=2.3    #
#                          -D ZIGBEEPRO -D NWK_AUTO_POLL -D HOLD_AUTO_START   #
#                          -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D    #
#                          xNV_RESTORE -D ZTOOL_P1 -D MT_TASK -D              #
#                          DEVICE_LOGICAL_TYPE=01 -D LOG_TYPE=02 -D           #
#                          xUART_SENSOR -D xLCD_SUPPORTED -D UART_LOOK -lC    #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev1\List\ -lA     #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev1\List\         #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev1\Obj\ -e       #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zst #
#                          ack\Samples\SensorDemo\CC2530DB\ -I                #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\SOURCE\ -I         #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\MYAPP\ -I          #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\sensor_drv\ -I     #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\ZMAIN\TI2530 #
#                          DB\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects #
#                          \zstack\Samples\SensorDemo\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\MT\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\ #
#                          Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\HAL\TARGET\CC2530EB\ -I                       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\OSAL\MCU\CCSOC\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ #
#                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I      #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\AF\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ì #
#                          â3\Projects\zstack\Samples\SensorDemo\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I               #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\SEC\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\ #
#                          Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\SAPI\ -I             #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\STACK\SYS\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\ #
#                          Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\ZDO\ -I              #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\ZMAC\F8W\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ì #
#                          â3\Projects\zstack\Samples\SensorDemo\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\ZMAC\ -I                    #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\SERVICES\SADDR\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ #
#                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I    #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\INCLUDE\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶ #
#                          þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB\ #
#                          ..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\LOW_LEVEL\srf04\ -I                       #
#                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz         #
#                          --require_prototypes                               #
#    List file          =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev1\List\Enddev1. #
#                          lst                                                #
#    Object file        =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack #
#                          \Samples\SensorDemo\CC2530DB\Enddev1\Obj\Enddev1.r #
#                          51                                                 #
#                                                                             #
#                                                                             #
###############################################################################

F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\Source\Enddev1.c
      1          /**************************************************************************************************
      2            Filename:       DemoCollector.c
      3          
      4            Description:    Collector application for the Sensor Demo utilizing Simple API.
      5          
      6                            The collector node can be set in a state where it accepts 
      7                            incoming reports from the sensor nodes, and can send the reports
      8                            via the UART to a PC tool. The collector node in this state
      9                            functions as a gateway. The collector nodes that are not in the
     10                            gateway node function as routers in the network.  
     11            
     12          
     13            Copyright 2009 Texas Instruments Incorporated. All rights reserved.
     14          
     15            IMPORTANT: Your use of this Software is limited to those specific rights
     16            granted under the terms of a software license agreement between the user
     17            who downloaded the software, his/her employer (which must be your employer)
     18            and Texas Instruments Incorporated (the "License").  You may not use this
     19            Software unless you agree to abide by the terms of the License. The License
     20            limits your use, and you acknowledge, that the Software may not be modified,
     21            copied or distributed unless embedded on a Texas Instruments microcontroller
     22            or used solely and exclusively in conjunction with a Texas Instruments radio
     23            frequency transceiver, which is integrated into your product.  Other than for
     24            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     25            works of, modify, distribute, perform, display or sell this Software and/or
     26            its documentation for any purpose.
     27          
     28            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     29            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     30            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     31            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     32            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     33            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     34            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     35            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     36            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     37            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     38            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     39          
     40            Should you have any questions regarding your right to use this Software,
     41            contact Texas Instruments Incorporated at www.TI.com.
     42          **************************************************************************************************/
     43          
     44          /******************************************************************************
     45           * INCLUDES
     46           */
     47          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     48          #include "ZComDef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_Nv.h"
     51          #include "sapi.h"
     52          #include "hal_key.h"
     53          #include "hal_led.h"
     54          #include "hal_lcd.h"
     55          #include "hal_uart.h"
     56          #include "sensor.h"
     57          #include "DemoApp.h"
     58          #include "UART_PRINT.h"
     59          /******************************************************************************
     60           * CONSTANTS
     61           */
     62          //#define LOG_TYPE    02
     63          #define REPORT_FAILURE_LIMIT                4
     64          #define ACK_REQ_INTERVAL                    5 // each 5th packet is sent with ACK request
     65          
     66          // General UART frame offsets
     67          #define FRAME_SOF_OFFSET                    0
     68          #define FRAME_LENGTH_OFFSET                 1 
     69          #define FRAME_CMD0_OFFSET                   2
     70          #define FRAME_CMD1_OFFSET                   3
     71          #define FRAME_DATA_OFFSET                   4
     72          
     73          // ZB_RECEIVE_DATA_INDICATION offsets
     74          #define ZB_RECV_SRC_OFFSET                  0
     75          #define ZB_RECV_CMD_OFFSET                  2
     76          #define ZB_RECV_LEN_OFFSET                  4
     77          #define ZB_RECV_DATA_OFFSET                 6
     78          #define ZB_RECV_FCS_OFFSET                  8
     79          
     80          // ZB_RECEIVE_DATA_INDICATION frame length
     81          #define ZB_RECV_LENGTH                      15
     82          
     83          // PING response frame length and offset
     84          #define SYS_PING_RSP_LENGTH                 7 
     85          #define SYS_PING_CMD_OFFSET                 1
     86          
     87          // Stack Profile
     88          #define ZIGBEE_2007                         0x0040
     89          #define ZIGBEE_PRO_2007                     0x0041
     90          
     91          #ifdef ZIGBEEPRO
     92          #define STACK_PROFILE                       ZIGBEE_PRO_2007             
     93          #else 
     94          #define STACK_PROFILE                       ZIGBEE_2007
     95          #endif
     96          
     97          #define CPT_SOP                             0xFE
     98          #define SYS_PING_REQUEST                    0x0021
     99          #define SYS_PING_RESPONSE                   0x0161
    100          #define ZB_RECEIVE_DATA_INDICATION          0x8746
    101          
    102          // Application States
    103          #define APP_INIT                            0
    104          #define APP_START                           2
    105          #define APP_BINDED                          3    
    106          
    107          // Application osal event identifiers
    108          #define MY_START_EVT                        0x0001
    109          #define MY_REPORT_EVT                       0x0002
    110          #define MY_FIND_COLLECTOR_EVT               0x0004
    111          #define MY_SEND_EVT               0x0008
    112          
    113          // ADC definitions for CC2430/CC2530 from the hal_adc.c file
    114          #if defined (HAL_MCU_CC2530)
    115          #define ADC_REF_125V    0x00    /* Internal 1.25V Reference */
    116          #define ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
    117          #define ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
    118          #define ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
    119          #define ADC_CHN_VDD3    0x0f    /* Input channel: VDD/3 */
    120          #define ADC_CHN_TEMP    0x0e    /* Temperature sensor */
    121          #endif // HAL_MCU_CC2530
    122          /******************************************************************************
    123           * TYPEDEFS
    124           */
    125          typedef struct
    126          {
    127            uint16              source;
    128            uint16              parent;
    129            uint8               temp;
    130            uint8               voltage;
    131          } gtwData_t;
    132          
    133          /******************************************************************************
    134           * LOCAL VARIABLES
    135           */
    136          //uint8 sortype =0x21;
    137          //uint16 soradr =0x1234;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          static uint8 appState =             APP_INIT;
   \                     appState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          static uint8 reportState =          FALSE;
   \                     reportState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    140          static uint8 myStartRetryDelay =    10;          // milliseconds
   \                     myStartRetryDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for myStartRetryDelay>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          static uint8 isGateWay =            FALSE;
   \                     isGateWay:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    142          static uint16 myBindRetryDelay =    2000;        // milliseconds
   \                     myBindRetryDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myBindRetryDelay>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    143          static uint16 myReportPeriod =      1963;        // milliseconds
   \                     myReportPeriod:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myReportPeriod>`
   \   000002                REQUIRE __INIT_XDATA_I
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          static uint8 reportFailureNr =      0;
   \                     reportFailureNr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          static uint16 parentShortAddr;
   \                     parentShortAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    147          static gtwData_t gtwData;
                                  ^
Warning[Pe177]: variable "gtwData" was declared but never referenced
    148          void ChannelPanidInit (void);
    149          /******************************************************************************
    150           * LOCAL FUNCTIONS
    151           */
    152          
    153          static uint8 calcFCS(uint8 *pBuf, uint8 len);
    154          static void sysPingReqRcvd(void);
    155          static void sysPingRsp(void);
    156          static void sendGtwReport(gtwData_t *gtwData);
    157          static void sendDummyReport(void);
    158          static uint8 readinVoltage(void);
    159          static int8 readTemp(void);
    160          /******************************************************************************
    161           * GLOBAL VARIABLES
    162           */
    163          
    164          // Inputs and Outputs for Collector device
    165          #define NUM_OUT_CMD_COLLECTOR                2
    166          #define NUM_IN_CMD_COLLECTOR                 2
    167          
    168          // List of output and input commands for Collector device

   \                                 In  segment XDATA_ROM_C, align 1
    169          const cId_t zb_InCmdList[NUM_IN_CMD_COLLECTOR] =
   \                     zb_InCmdList:
   \   000000   0200         DW 2
   \   000002   0300         DW 3
    170          {
    171            SENSOR_REPORT_CMD_ID,
    172            DUMMY_REPORT_CMD_ID
    173          };
    174          

   \                                 In  segment XDATA_ROM_C, align 1
    175          const cId_t zb_OutCmdList[NUM_IN_CMD_COLLECTOR] =
   \                     zb_OutCmdList:
   \   000000   0200         DW 2
   \   000002   0300         DW 3
    176          {
    177            SENSOR_REPORT_CMD_ID,
    178            DUMMY_REPORT_CMD_ID
    179          };
    180          
    181          // Define SimpleDescriptor for Collector device

   \                                 In  segment XDATA_ROM_C, align 1
    182          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   200F         DW 3872
   \   000003   0200         DW 2
   \   000005   01           DB 1
   \   000006   02           DB 2
   \   000007   ....         DW zb_InCmdList
   \   000009   02           DB 2
   \   00000A   ....         DW zb_OutCmdList
    183          {
    184            MY_ENDPOINT_ID,             //  Endpoint
    185            MY_PROFILE_ID,              //  Profile ID
    186            DEV_ID_COLLECTOR,           //  Device ID
    187            DEVICE_VERSION_COLLECTOR,   //  Device Version
    188            0,                          //  Reserved
    189            NUM_IN_CMD_COLLECTOR,       //  Number of Input Commands
    190            (cId_t *) zb_InCmdList,     //  Input Command List
    191            NUM_OUT_CMD_COLLECTOR,      //  Number of Output Commands
    192            (cId_t *) zb_OutCmdList     //  Output Command List
    193          };
    194          
    195          /******************************************************************************
    196           * FUNCTIONS
    197           */
    198          
    199          /******************************************************************************
    200           * @fn          zb_HandleOsalEvent
    201           *
    202           * @brief       The zb_HandleOsalEvent function is called by the operating
    203           *              system when a task event is set
    204           *
    205           * @param       event - Bitmask containing the events that have been set
    206           *
    207           * @return      none
    208           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    209          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    210          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
    211            static    uint8 in_net=0;
    212            uint8 logicalType;
    213            
    214            if(event & SYS_EVENT_MSG)
    215            {
    216              
    217            }
    218            
    219            if( event & ZB_ENTRY_EVENT )
   \   00000D   5410         ANL     A,#0x10
   \   00000F   6034         JZ      ??zb_HandleOsalEvent_0
    220            {  
    221              // Initialise UART
    222              initUart(uartRxCB);
   \   000011                ; Setup parameters for call to function initUart
   \   000011   7A..         MOV     R2,#??uartRxCB?relay & 0xff
   \   000013   7B..         MOV     R3,#(??uartRxCB?relay >> 8) & 0xff
   \   000015   12....       LCALL   ??initUart?relay
    223              
    224              // blind LED 1 to indicate starting/joining a network
    225              HalLedBlink ( HAL_LED_1, 0, 50, 500 );
   \   000018                ; Setup parameters for call to function HalLedBlink
   \   000018   7CF4         MOV     R4,#-0xc
   \   00001A   7D01         MOV     R5,#0x1
   \   00001C   7B32         MOV     R3,#0x32
   \   00001E   7A00         MOV     R2,#0x0
   \   000020   7901         MOV     R1,#0x1
   \   000022   12....       LCALL   ??HalLedBlink?relay
    226              HalLedBlink ( HAL_LED_2, 0, 50, 500 );
   \   000025                ; Setup parameters for call to function HalLedBlink
   \   000025   7CF4         MOV     R4,#-0xc
   \   000027   7D01         MOV     R5,#0x1
   \   000029   7B32         MOV     R3,#0x32
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7902         MOV     R1,#0x2
   \   00002F   12....       LCALL   ??HalLedBlink?relay
    227              //HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
    228              
    229              // Read logical device type from NV
    230              zb_ReadConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
   \   000032                ; Setup parameters for call to function zb_ReadConfiguration
   \   000032   7403         MOV     A,#0x3
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   AC82         MOV     R4,DPL
   \   000039   AD83         MOV     R5,DPH
   \   00003B   7A01         MOV     R2,#0x1
   \   00003D   7987         MOV     R1,#-0x79
   \   00003F   12....       LCALL   ??zb_ReadConfiguration?relay
    231             
    232              // Start the device 
    233              zb_StartRequest();
   \   000042                ; Setup parameters for call to function zb_StartRequest
   \   000042   12....       LCALL   ??zb_StartRequest?relay
    234            }
    235            
    236            if ( event & MY_START_EVT )
   \                     ??zb_HandleOsalEvent_0:
   \   000045   EE           MOV     A,R6
   \   000046   A2E0         MOV     C,0xE0 /* A   */.0
   \   000048   5003         JNC     ??zb_HandleOsalEvent_1
    237            {
    238              zb_StartRequest();
   \   00004A                ; Setup parameters for call to function zb_StartRequest
   \   00004A   12....       LCALL   ??zb_StartRequest?relay
    239            }
    240            
    241            
    242            if ( event & MY_REPORT_EVT )
   \                     ??zb_HandleOsalEvent_1:
   \   00004D   EE           MOV     A,R6
   \   00004E   5402         ANL     A,#0x2
   \   000050   7003         JNZ     $+5
   \   000052   02....       LJMP    ??CrossCallReturnLabel_0 & 0xFFFF
    243            {
    244              if (isGateWay) 
   \   000055   90....       MOV     DPTR,#isGateWay
   \   000058   E0           MOVX    A,@DPTR
   \   000059   6009         JZ      ??zb_HandleOsalEvent_2
    245              {
    246                osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod );
   \   00005B                ; Setup parameters for call to function osal_start_timerEx
   \   00005B   90....       MOV     DPTR,#myReportPeriod
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FC           MOV     R4,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   807D         SJMP    ??zb_HandleOsalEvent_3
    247              }
    248              else 
    249              if (appState == APP_BINDED) 
   \                     ??zb_HandleOsalEvent_2:
   \   000064   90....       MOV     DPTR,#appState
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6403         XRL     A,#0x3
   \   00006A   707B         JNZ     ??CrossCallReturnLabel_0
    250              {
    251                HAL_TOGGLE_LED1();
   \   00006C   A291         MOV     C,0x90.1
   \   00006E   5004         JNC     ??zb_HandleOsalEvent_4
   \   000070   C291         CLR     0x90.1
   \   000072   8002         SJMP    ??zb_HandleOsalEvent_5
   \                     ??zb_HandleOsalEvent_4:
   \   000074   D291         SETB    0x90.1
    252                sendDummyReport();
   \                     ??zb_HandleOsalEvent_5:
   \   000076   90....       MOV     DPTR,#`?<Constant " ">`
   \   000079   C082         PUSH    DPL
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   AC82         MOV     R4,DPL
   \   000083   AD83         MOV     R5,DPH
   \   000085   7583..       MOV     DPH,#(`?<Constant " ">` >> 8) & 0xff
   \   000088   D082         POP     DPL
   \   00008A   7403         MOV     A,#0x3
   \   00008C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   00008F   85..82       MOV     DPL,?XSP + 0
   \   000092   85..83       MOV     DPH,?XSP + 1
   \   000095   7445         MOV     A,#0x45
   \   000097   F0           MOVX    @DPTR,A
   \   000098   7401         MOV     A,#0x1
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   7431         MOV     A,#0x31
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   7402         MOV     A,#0x2
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   7430         MOV     A,#0x30
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8                ; Setup parameters for call to function get_rentihongwai
   \   0000A8   12....       LCALL   ??get_rentihongwai?relay
   \   0000AB   E9           MOV     A,R1
   \   0000AC   6401         XRL     A,#0x1
   \   0000AE   7009         JNZ     ??zb_HandleOsalEvent_6
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   7431         MOV     A,#0x31
   \   0000B7   8007         SJMP    ??zb_HandleOsalEvent_7
   \                     ??zb_HandleOsalEvent_6:
   \   0000B9   7402         MOV     A,#0x2
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   7430         MOV     A,#0x30
   \                     ??zb_HandleOsalEvent_7:
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1                ; Setup parameters for call to function zb_SendZigbeeDatas
   \   0000C1   7903         MOV     R1,#0x3
   \   0000C3   85..82       MOV     DPL,?XSP + 0
   \   0000C6   85..83       MOV     DPH,?XSP + 1
   \   0000C9   AA82         MOV     R2,DPL
   \   0000CB   AB83         MOV     R3,DPH
   \   0000CD   12....       LCALL   ??zb_SendZigbeeDatas?relay
    253                osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod+(uint8)osal_rand() );
   \   0000D0                ; Setup parameters for call to function osal_rand
   \   0000D0   12....       LCALL   ??osal_rand?relay
   \   0000D3   8A..         MOV     ?V0 + 0,R2
   \   0000D5                ; Setup parameters for call to function osal_start_timerEx
   \   0000D5   90....       MOV     DPTR,#myReportPeriod
   \   0000D8   A8..         MOV     R0,?V0 + 0
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   28           ADD     A,R0
   \   0000DC   FC           MOV     R4,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   3400         ADDC    A,#0x0
   \                     ??zb_HandleOsalEvent_3:
   \   0000E1   FD           MOV     R5,A
   \   0000E2   7A02         MOV     R2,#0x2
    254              }
    255            }
   \   0000E4   12....       LCALL   ?Subroutine1 & 0xFFFF
    256            if ( event & MY_FIND_COLLECTOR_EVT )
   \                     ??CrossCallReturnLabel_0:
   \   0000E7   EE           MOV     A,R6
   \   0000E8   5404         ANL     A,#0x4
   \   0000EA   6053         JZ      ??zb_HandleOsalEvent_8
    257            { 
    258              // Find and bind to a gateway device (if this node is not gateway)
    259              if (!isGateWay) 
   \   0000EC   90....       MOV     DPTR,#isGateWay
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   700D         JNZ     ??zb_HandleOsalEvent_9
    260              {
    261                zb_BindDevice( TRUE, DUMMY_REPORT_CMD_ID, (uint8 *)NULL );
   \   0000F2                ; Setup parameters for call to function zb_BindDevice
   \   0000F2   7C00         MOV     R4,#0x0
   \   0000F4   7D00         MOV     R5,#0x0
   \   0000F6   7A03         MOV     R2,#0x3
   \   0000F8   7B00         MOV     R3,#0x0
   \   0000FA   7901         MOV     R1,#0x1
   \   0000FC   12....       LCALL   ??zb_BindDevice?relay
    262              }
    263              osal_start_timerEx( sapi_TaskID, MY_SEND_EVT, 1000 );
   \                     ??zb_HandleOsalEvent_9:
   \   0000FF                ; Setup parameters for call to function osal_start_timerEx
   \   0000FF   7CE8         MOV     R4,#-0x18
   \   000101   7D03         MOV     R5,#0x3
   \   000103   7A08         MOV     R2,#0x8
   \   000105   12....       LCALL   ?Subroutine1 & 0xFFFF
    264              HalLedBlink ( HAL_LED_3, 0, 10, 2750);
   \                     ??CrossCallReturnLabel_1:
   \   000108                ; Setup parameters for call to function HalLedBlink
   \   000108   7CBE         MOV     R4,#-0x42
   \   00010A   7D0A         MOV     R5,#0xa
   \   00010C   7B0A         MOV     R3,#0xa
   \   00010E   7A00         MOV     R2,#0x0
   \   000110   7904         MOV     R1,#0x4
   \   000112   12....       LCALL   ??HalLedBlink?relay
    265              HalLedSet( HAL_LED_4, HAL_LED_MODE_OFF );
   \   000115                ; Setup parameters for call to function HalLedSet
   \   000115   7A00         MOV     R2,#0x0
   \   000117   7908         MOV     R1,#0x8
   \   000119   12....       LCALL   ??HalLedSet?relay
    266              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   00011C                ; Setup parameters for call to function HalLedSet
   \   00011C   7A00         MOV     R2,#0x0
   \   00011E   7902         MOV     R1,#0x2
   \   000120   12....       LCALL   ??HalLedSet?relay
    267              HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   000123                ; Setup parameters for call to function HalLedSet
   \   000123   7A00         MOV     R2,#0x0
   \   000125   7901         MOV     R1,#0x1
   \   000127   12....       LCALL   ??HalLedSet?relay
    268              if(in_net == 0xa5)
   \   00012A   90....       MOV     DPTR,#??in_net
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   64A5         XRL     A,#0xa5
   \   000130   700A         JNZ     ??zb_HandleOsalEvent_10
    269              {
    270                  in_net =0;
    271                  HAL_SYSTEM_RESET();
   \   000132   C2AF         CLR     0xa8.7
   \   000134   75C9AB       MOV     0xc9,#-0x55
   \   000137   75C95B       MOV     0xc9,#0x5b
   \                     ??zb_HandleOsalEvent_11:
   \   00013A   80FE         SJMP    ??zb_HandleOsalEvent_11
    272              }
    273              in_net =0xa5;
   \                     ??zb_HandleOsalEvent_10:
   \   00013C   74A5         MOV     A,#-0x5b
   \   00013E   F0           MOVX    @DPTR,A
    274            }
    275            if ( event & MY_SEND_EVT )
   \                     ??zb_HandleOsalEvent_8:
   \   00013F   EE           MOV     A,R6
   \   000140   5408         ANL     A,#0x8
   \   000142   6009         JZ      ??zb_HandleOsalEvent_12
    276            {
    277                osal_set_event( sapi_TaskID, MY_REPORT_EVT );
   \   000144                ; Setup parameters for call to function osal_set_event
   \   000144   12....       LCALL   ?Subroutine2 & 0xFFFF
    278                reportState = TRUE; 
   \                     ??CrossCallReturnLabel_4:
   \   000147   90....       MOV     DPTR,#reportState
   \   00014A   7401         MOV     A,#0x1
   \   00014C   F0           MOVX    @DPTR,A
    279                
    280            }
    281            
    282          }
   \                     ??zb_HandleOsalEvent_12:
   \   00014D   7404         MOV     A,#0x4
   \   00014F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000152   7F02         MOV     R7,#0x2
   \   000154   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000157                REQUIRE _A_P1
   \   000157                REQUIRE _A_IEN0
   \   000157                REQUIRE WDCTL

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7A02         MOV     R2,#0x2
   \   000002                REQUIRE ??Subroutine3_0
   \   000002                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#sapi_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_set_event?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#sapi_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??in_net:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    283          
    284          /******************************************************************************
    285           * @fn      zb_HandleKeys
    286           *
    287           * @brief   Handles all key events for this device.
    288           *
    289           * @param   shift - true if in shift/alt.
    290           * @param   keys - bit field for key events. Valid entries:
    291           *                 EVAL_SW4
    292           *                 EVAL_SW3
    293           *                 EVAL_SW2
    294           *                 EVAL_SW1
    295           *
    296           * @return  none
    297           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    298          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    299          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    300            
    301          }
   \   000000   02....       LJMP    ?BRET
    302          
    303          /******************************************************************************
    304           * @fn          zb_StartConfirm
    305           *
    306           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    307           *              after a start request operation completes
    308           *
    309           * @param       status - The status of the start operation.  Status of
    310           *                       ZB_SUCCESS indicates the start operation completed
    311           *                       successfully.  Else the status is an error code.
    312           *
    313           * @return      none
    314           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    315          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    316          { 
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    317            // If the device sucessfully started, change state to running
    318            if ( status == ZB_SUCCESS )   
   \   000006   701D         JNZ     ??zb_StartConfirm_0
    319            {
    320              // Set LED 1 to indicate that node is operational on the network
    321              HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
   \   000008                ; Setup parameters for call to function HalLedSet
   \   000008   7A01         MOV     R2,#0x1
   \   00000A   7901         MOV     R1,#0x1
   \   00000C   12....       LCALL   ??HalLedSet?relay
    322          
    323              // Change application state
    324              appState = APP_START;
   \   00000F   90....       MOV     DPTR,#appState
   \   000012   7402         MOV     A,#0x2
   \   000014   F0           MOVX    @DPTR,A
    325              
    326              // Set event to bind to a collector
    327              osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
   \   000015                ; Setup parameters for call to function osal_set_event
   \   000015   7A04         MOV     R2,#0x4
   \   000017   12....       LCALL   ??Subroutine3_0 & 0xFFFF
    328                 
    329               // Store parent short address
    330              zb_GetDeviceInfo(ZB_INFO_PARENT_SHORT_ADDR, &parentShortAddr);
   \                     ??CrossCallReturnLabel_6:
   \   00001A                ; Setup parameters for call to function zb_GetDeviceInfo
   \   00001A   7A..         MOV     R2,#parentShortAddr & 0xff
   \   00001C   7B..         MOV     R3,#(parentShortAddr >> 8) & 0xff
   \   00001E   7903         MOV     R1,#0x3
   \   000020   12....       LCALL   ??zb_GetDeviceInfo?relay
    331              
    332              zb_HandleKeys(0, 0 );
    333            }
   \   000023   800C         SJMP    ??CrossCallReturnLabel_2
    334            else
    335            {
    336              // Try again later with a delay
    337              osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
   \                     ??zb_StartConfirm_0:
   \   000025                ; Setup parameters for call to function osal_start_timerEx
   \   000025   90....       MOV     DPTR,#myStartRetryDelay
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FC           MOV     R4,A
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7A01         MOV     R2,#0x1
   \   00002E   12....       LCALL   ?Subroutine1 & 0xFFFF
    338            }
    339          }
   \                     ??CrossCallReturnLabel_2:
   \   000031   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    340          
    341          /******************************************************************************
    342           * @fn          zb_SendDataConfirm
    343           *
    344           * @brief       The zb_SendDataConfirm callback function is called by the
    345           *              ZigBee stack after a send data operation completes
    346           *
    347           * @param       handle - The handle identifying the data transmission.
    348           *              status - The status of the operation.
    349           *
    350           * @return      none
    351           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    352          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    353          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    354            if ( status != ZB_SUCCESS && !isGateWay ) 
   \   000006   6037         JZ      ??zb_SendDataConfirm_0
   \   000008   90....       MOV     DPTR,#isGateWay
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   7031         JNZ     ??zb_SendDataConfirm_0
    355            {
    356              if ( ++reportFailureNr>=REPORT_FAILURE_LIMIT ) 
   \   00000E   90....       MOV     DPTR,#reportFailureNr
   \   000011   E0           MOVX    A,@DPTR
   \   000012   04           INC     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   C3           CLR     C
   \   000015   9404         SUBB    A,#0x4
   \   000017   4031         JC      ??zb_SendDataConfirm_1
    357              {   
    358                 // Stop reporting
    359                 osal_stop_timerEx( sapi_TaskID, MY_REPORT_EVT );
   \   000019                ; Setup parameters for call to function osal_stop_timerEx
   \   000019   7A02         MOV     R2,#0x2
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   90....       MOV     DPTR,#sapi_TaskID
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   ??osal_stop_timerEx?relay
    360                 
    361                 // After failure reporting start automatically when the device
    362                 // is binded to a new gateway
    363                 reportState=TRUE;
   \   000025   90....       MOV     DPTR,#reportState
   \   000028   7401         MOV     A,#0x1
   \   00002A   F0           MOVX    @DPTR,A
    364                 
    365                 // Delete previous binding
    366                 zb_BindDevice( FALSE, DUMMY_REPORT_CMD_ID, (uint8 *)NULL );
   \   00002B                ; Setup parameters for call to function zb_BindDevice
   \   00002B   7C00         MOV     R4,#0x0
   \   00002D   7D00         MOV     R5,#0x0
   \   00002F   7A03         MOV     R2,#0x3
   \   000031   7B00         MOV     R3,#0x0
   \   000033   7900         MOV     R1,#0x0
   \   000035   12....       LCALL   ??zb_BindDevice?relay
    367                 
    368                 // Try binding to a new gateway
    369                 osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
   \   000038                ; Setup parameters for call to function osal_set_event
   \   000038   7A04         MOV     R2,#0x4
   \   00003A   12....       LCALL   ??Subroutine3_0 & 0xFFFF
    370                 reportFailureNr=0;
   \                     ??CrossCallReturnLabel_7:
   \   00003D   8006         SJMP    ??zb_SendDataConfirm_2
    371              }
    372            }
    373            else if ( !isGateWay ) 
   \                     ??zb_SendDataConfirm_0:
   \   00003F   90....       MOV     DPTR,#isGateWay
   \   000042   E0           MOVX    A,@DPTR
   \   000043   7005         JNZ     ??zb_SendDataConfirm_1
    374            {
    375              reportFailureNr=0;
   \                     ??zb_SendDataConfirm_2:
   \   000045   90....       MOV     DPTR,#reportFailureNr
   \   000048   E4           CLR     A
   \   000049   F0           MOVX    @DPTR,A
    376            }
    377          }
   \                     ??zb_SendDataConfirm_1:
   \   00004A   80..         SJMP    ?Subroutine0
    378          
    379          /******************************************************************************
    380           * @fn          zb_BindConfirm
    381           *
    382           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    383           *              after a bind operation completes.
    384           *
    385           * @param       commandId - The command ID of the binding being confirmed.
    386           *              status - The status of the bind operation.
    387           *
    388           * @return      none
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    391          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    392            if( status == ZB_SUCCESS )
   \   000006   7018         JNZ     ??zb_BindConfirm_0
    393            {
    394              appState = APP_BINDED;
   \   000008   90....       MOV     DPTR,#appState
   \   00000B   7403         MOV     A,#0x3
   \   00000D   F0           MOVX    @DPTR,A
    395              // Set LED2 to indicate binding successful
    396              HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
   \   00000E                ; Setup parameters for call to function HalLedSet
   \   00000E   7A01         MOV     R2,#0x1
   \   000010   7902         MOV     R1,#0x2
   \   000012   12....       LCALL   ??HalLedSet?relay
    397              
    398              // After failure reporting start automatically when the device
    399              // is binded to a new gateway
    400              if ( reportState ) 
   \   000015   90....       MOV     DPTR,#reportState
   \   000018   E0           MOVX    A,@DPTR
   \   000019   6012         JZ      ??CrossCallReturnLabel_3
    401              {
    402                // Start reporting
    403                osal_set_event( sapi_TaskID, MY_REPORT_EVT );
   \   00001B                ; Setup parameters for call to function osal_set_event
   \   00001B   12....       LCALL   ?Subroutine2 & 0xFFFF
    404              }
    405            }
   \                     ??CrossCallReturnLabel_5:
   \   00001E   800D         SJMP    ??CrossCallReturnLabel_3
    406            else
    407            {
    408              osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
   \                     ??zb_BindConfirm_0:
   \   000020                ; Setup parameters for call to function osal_start_timerEx
   \   000020   90....       MOV     DPTR,#myBindRetryDelay
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FC           MOV     R4,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FD           MOV     R5,A
   \   000028   7A04         MOV     R2,#0x4
   \   00002A   12....       LCALL   ?Subroutine1 & 0xFFFF
    409            }
    410          }
   \                     ??CrossCallReturnLabel_3:
   \   00002D                REQUIRE ?Subroutine0
   \   00002D                ; // Fall through to label ?Subroutine0
    411          
    412          /******************************************************************************
    413           * @fn          zb_AllowBindConfirm
    414           *
    415           * @brief       Indicates when another device attempted to bind to this device
    416           *
    417           * @param
    418           *
    419           * @return      none
    420           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    421          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    422          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    423            
    424          }
   \   000000   02....       LJMP    ?BRET
    425          
    426          /******************************************************************************
    427           * @fn          zb_FindDeviceConfirm
    428           *
    429           * @brief       The zb_FindDeviceConfirm callback function is called by the
    430           *              ZigBee stack when a find device operation completes.
    431           *
    432           * @param       searchType - The type of search that was performed.
    433           *              searchKey - Value that the search was executed on.
    434           *              result - The result of the search.
    435           *
    436           * @return      none
    437           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    438          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    439          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    440          }
   \   000000   02....       LJMP    ?BRET
    441          
    442          /******************************************************************************
    443           * @fn          zb_ReceiveDataIndication
    444           *
    445           * @brief       The zb_ReceiveDataIndication callback function is called
    446           *              asynchronously by the ZigBee stack to notify the application
    447           *              when data is received from a peer device.
    448           *
    449           * @param       source - The short address of the peer device that sent the data
    450           *              command - The commandId associated with the data
    451           *              len - The number of bytes in the pData parameter
    452           *              pData - The data sent by the peer device
    453           *
    454           * @return      none
    455           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    456          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    457          { 
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    458            
    459          }
   \   000000   02....       LJMP    ?BRET
    460          
    461          /******************************************************************************
    462           * @fn          uartRxCB
    463           *
    464           * @brief       Callback function for UART 
    465           *
    466           * @param       port - UART port
    467           *              event - UART event that caused callback 
    468           *
    469           * @return      none
    470           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    471          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
    472          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 263
   \   000005   7582F9       MOV     DPL,#-0x7
   \   000008   7583FE       MOV     DPH,#-0x2
   \   00000B   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   00000E   8A..         MOV     ?V0 + 1,R2
    473            uint8 pBuf[RX_BUF_LEN];
    474            uint16 cmd;
    475            uint16 len;
    476            EA=0;
   \   000010   C2AF         CLR     0xa8.7
    477            if ( event != HAL_UART_TX_EMPTY ) 
   \   000012   7410         MOV     A,#0x10
   \   000014   65..         XRL     A,?V0 + 1
   \   000016   7003         JNZ     $+5
   \   000018   02....       LJMP    ??uartRxCB_0 & 0xFFFF
    478            {
    479              len = HalUARTRead( HAL_UART_PORT_0, pBuf, RX_BUF_LEN );
   \   00001B                ; Setup parameters for call to function HalUARTRead
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D01         MOV     R5,#0x1
   \   00001F   7407         MOV     A,#0x7
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   AA82         MOV     R2,DPL
   \   000026   AB83         MOV     R3,DPH
   \   000028   7900         MOV     R1,#0x0
   \   00002A   12....       LCALL   ??HalUARTRead?relay
   \   00002D   8A..         MOV     ?V0 + 2,R2
   \   00002F   8B..         MOV     ?V0 + 3,R3
   \   000031   AE..         MOV     R6,?V0 + 2
   \   000033   AF..         MOV     R7,?V0 + 3
    480              
    481              if ( len>0 ) 
   \   000035   EE           MOV     A,R6
   \   000036   4F           ORL     A,R7
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??uartRxCB_0 & 0xFFFF
    482              {
    483                cmd = BUILD_UINT16(pBuf[SYS_PING_CMD_OFFSET+ 1], pBuf[SYS_PING_CMD_OFFSET]);
    484                if( (pBuf[FRAME_SOF_OFFSET] == CPT_SOP) && (cmd == SYS_PING_REQUEST) ) 
   \   00003C   7407         MOV     A,#0x7
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E0           MOVX    A,@DPTR
   \   000042   64FE         XRL     A,#0xfe
   \   000044   707A         JNZ     ??uartRxCB_1
   \   000046   7409         MOV     A,#0x9
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   7408         MOV     A,#0x8
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   EA           MOV     A,R2
   \   000055   F8           MOV     R0,A
   \   000056   7421         MOV     A,#0x21
   \   000058   68           XRL     A,R0
   \   000059   7001         JNZ     ??uartRxCB_2
   \   00005B   E9           MOV     A,R1
   \                     ??uartRxCB_2:
   \   00005C   7062         JNZ     ??uartRxCB_1
    485                {
    486                  sysPingReqRcvd();
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   74FE         MOV     A,#-0x2
   \   000066   F0           MOVX    @DPTR,A
   \   000067   7401         MOV     A,#0x1
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   7402         MOV     A,#0x2
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   7461         MOV     A,#0x61
   \   000074   F0           MOVX    @DPTR,A
   \   000075   7403         MOV     A,#0x3
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   7401         MOV     A,#0x1
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   7404         MOV     A,#0x4
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   7441         MOV     A,#0x41
   \   000084   F0           MOVX    @DPTR,A
   \   000085   7405         MOV     A,#0x5
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   E4           CLR     A
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   7805         MOV     R0,#0x5
   \   00008E   04           INC     A
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   75..00       MOV     ?V0 + 0,#0x0
   \   000095   8004         SJMP    ??uartRxCB_3
   \                     ??uartRxCB_4:
   \   000097   E0           MOVX    A,@DPTR
   \   000098   62..         XRL     ?V0 + 0,A
   \   00009A   A3           INC     DPTR
   \                     ??uartRxCB_3:
   \   00009B   88..         MOV     ?V0 + 2,R0
   \   00009D   74FF         MOV     A,#-0x1
   \   00009F   25..         ADD     A,?V0 + 2
   \   0000A1   18           DEC     R0
   \   0000A2   04           INC     A
   \   0000A3   70F2         JNZ     ??uartRxCB_4
   \   0000A5   7406         MOV     A,#0x6
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   E5..         MOV     A,?V0 + 0
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD                ; Setup parameters for call to function HalUARTWrite
   \   0000AD   7C07         MOV     R4,#0x7
   \   0000AF   7D00         MOV     R5,#0x0
   \   0000B1   85..82       MOV     DPL,?XSP + 0
   \   0000B4   85..83       MOV     DPH,?XSP + 1
   \   0000B7   AA82         MOV     R2,DPL
   \   0000B9   AB83         MOV     R3,DPH
   \   0000BB   7900         MOV     R1,#0x0
   \   0000BD   12....       LCALL   ??HalUARTWrite?relay
    487                }
    488                // ²ÎÊýÉèÖÃ
    489                configset(pBuf,len, LOG_TYPE); 
   \                     ??uartRxCB_1:
   \   0000C0                ; Setup parameters for call to function configset
   \   0000C0   7C02         MOV     R4,#0x2
   \   0000C2   EE           MOV     A,R6
   \   0000C3   F9           MOV     R1,A
   \   0000C4   7407         MOV     A,#0x7
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   AA82         MOV     R2,DPL
   \   0000CB   AB83         MOV     R3,DPH
   \   0000CD   12....       LCALL   ??configset?relay
    490                
    491              }
    492            }
    493             EA=1;
   \                     ??uartRxCB_0:
   \   0000D0   D2AF         SETB    0xa8.7
    494          }
   \   0000D2   758207       MOV     DPL,#0x7
   \   0000D5   758301       MOV     DPH,#0x1
   \   0000D8   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   0000DB   7F04         MOV     R7,#0x4
   \   0000DD   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000E0                REQUIRE _A_IEN0
    495          
    496          /******************************************************************************
    497           * @fn          sysPingReqRcvd
    498           *
    499           * @brief       Ping request received 
    500           *
    501           * @param       none
    502           *              
    503           * @return      none
    504           */
    505          static void sysPingReqRcvd(void)
    506          {
    507             sysPingRsp();
    508          }
    509          
    510          /******************************************************************************
    511           * @fn          sysPingRsp
    512           *
    513           * @brief       Build and send Ping response
    514           *
    515           * @param       none
    516           *              
    517           * @return      none
    518           */
    519          static void sysPingRsp(void)
    520          {
    521            uint8 pBuf[SYS_PING_RSP_LENGTH];
    522            
    523            // Start of Frame Delimiter
    524            pBuf[FRAME_SOF_OFFSET] = CPT_SOP;
    525            
    526            // Length
    527            pBuf[FRAME_LENGTH_OFFSET] = 2; 
    528            
    529            // Command type
    530            pBuf[FRAME_CMD0_OFFSET] = LO_UINT16(SYS_PING_RESPONSE); 
    531            pBuf[FRAME_CMD1_OFFSET] = HI_UINT16(SYS_PING_RESPONSE);
    532            
    533            // Stack profile
    534            pBuf[FRAME_DATA_OFFSET] = LO_UINT16(STACK_PROFILE);
    535            pBuf[FRAME_DATA_OFFSET+ 1] = HI_UINT16(STACK_PROFILE);
    536            
    537            // Frame Check Sequence
    538            pBuf[SYS_PING_RSP_LENGTH - 1] = calcFCS(&pBuf[FRAME_LENGTH_OFFSET], (SYS_PING_RSP_LENGTH - 2));
    539            
    540            // Write frame to UART
    541            HalUARTWrite(HAL_UART_PORT_0,pBuf, SYS_PING_RSP_LENGTH);
    542          }
    543          
    544          /******************************************************************************
    545           * @fn          sendGtwReport
    546           *
    547           * @brief       Build and send gateway report
    548           *
    549           * @param       none
    550           *              
    551           * @return      none
    552           */
    553          static void sendGtwReport(gtwData_t *gtwData)
                             ^
Warning[Pe177]: function "sendGtwReport" was declared but never referenced

  static uint8 readinVoltage(void);
               ^
"F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\Source\Enddev1.c",158  Warning[Pe177]: 
          function "readinVoltage" was declared but never referenced

  static int8 readTemp(void);
              ^
"F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\Source\Enddev1.c",159  Warning[Pe177]: 
          function "readTemp" was declared but never referenced
    554          {
    555            uint8 pFrame[ZB_RECV_LENGTH];
    556            
    557            // Start of Frame Delimiter
    558            pFrame[FRAME_SOF_OFFSET] = CPT_SOP; // Start of Frame Delimiter
    559            
    560            // Length
    561            pFrame[FRAME_LENGTH_OFFSET] = 10;
    562            
    563            // Command type
    564            pFrame[FRAME_CMD0_OFFSET] = LO_UINT16(ZB_RECEIVE_DATA_INDICATION);   
    565            pFrame[FRAME_CMD1_OFFSET] = HI_UINT16(ZB_RECEIVE_DATA_INDICATION); 
    566            
    567            // Source address
    568            pFrame[FRAME_DATA_OFFSET+ ZB_RECV_SRC_OFFSET] = LO_UINT16(gtwData->source); 
    569            pFrame[FRAME_DATA_OFFSET+ ZB_RECV_SRC_OFFSET+ 1] = HI_UINT16(gtwData->source);
    570            
    571            // Command ID
    572            pFrame[FRAME_DATA_OFFSET+ ZB_RECV_CMD_OFFSET] = LO_UINT16(SENSOR_REPORT_CMD_ID); 
    573            pFrame[FRAME_DATA_OFFSET+ ZB_RECV_CMD_OFFSET+ 1] = HI_UINT16(SENSOR_REPORT_CMD_ID);
    574            
    575            // Length
    576            pFrame[FRAME_DATA_OFFSET+ ZB_RECV_LEN_OFFSET] = LO_UINT16(4); 
    577            pFrame[FRAME_DATA_OFFSET+ ZB_RECV_LEN_OFFSET+ 1] = HI_UINT16(4);
    578            
    579            // Data
    580            pFrame[FRAME_DATA_OFFSET+ ZB_RECV_DATA_OFFSET] = gtwData->temp;
    581            pFrame[FRAME_DATA_OFFSET+ ZB_RECV_DATA_OFFSET+ 1] = gtwData->voltage; 
    582            pFrame[FRAME_DATA_OFFSET+ ZB_RECV_DATA_OFFSET+ 2] = LO_UINT16(gtwData->parent); 
    583            pFrame[FRAME_DATA_OFFSET+ ZB_RECV_DATA_OFFSET+ 3] = HI_UINT16(gtwData->parent);
    584            
    585            // Frame Check Sequence
    586            pFrame[ZB_RECV_LENGTH - 1] = calcFCS(&pFrame[FRAME_LENGTH_OFFSET], (ZB_RECV_LENGTH - 2) );
    587            
    588            // Write report to UART
    589            HalUARTWrite(HAL_UART_PORT_0,pFrame, ZB_RECV_LENGTH);
    590          }
    591          
    592          /******************************************************************************
    593           * @fn          sendDummyReport
    594           *
    595           * @brief       Send dummy report (used to visualize collector nodes on PC GUI)
    596           *
    597           * @param       none
    598           *              
    599           * @return      none
    600           */
    601          static void sendDummyReport(void)
    602          {
    603            /* user code start */
    604            uint8 status[3] = " ";
    605            status[0] = 'E';
    606            status[1] = '1';
    607            status[2] = '0';  //Ä¬ÈÏÎª0
    608            status[2] = get_rentihongwai() == 0x01?'1':'0';  //1 have 0 no
    609            zb_SendZigbeeDatas(status,3); //datas[] lenth
    610            /* user code end*/
    611          }
    612          
    613          /******************************************************************************
    614           * @fn          calcFCS
    615           *
    616           * @brief       This function calculates the FCS checksum for the serial message 
    617           *
    618           * @param       pBuf - Pointer to the end of a buffer to calculate the FCS.
    619           *              len - Length of the pBuf.
    620           *
    621           * @return      The calculated FCS.
    622           ******************************************************************************
    623           */
    624          static uint8 calcFCS(uint8 *pBuf, uint8 len)
    625          {
    626            uint8 rtrn = 0;
    627          
    628            while (len--)
    629            {
    630              rtrn ^= *pBuf++;
    631            }
    632          
    633            return rtrn;
    634          }
    635          
    636          
    637          /******************************************************************************
    638           * @fn          channel_panid_init
    639           *
    640           * @brief       ¶ÔÐÅµÀºÍPANIDÅÐ¶Ï²¢ÉèÖÃ
    641           *
    642           * @param       none
    643           *              
    644           * @return      none
    645           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    646          void ChannelPanidInit (void)
   \                     ChannelPanidInit:
    647          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    648            /* user code start */
    649            uint8 channel = zb_Readchannel();
   \   00000A                ; Setup parameters for call to function zb_Readchannel
   \   00000A   12....       LCALL   ??zb_Readchannel?relay
   \   00000D   E9           MOV     A,R1
   \   00000E   FE           MOV     R6,A
    650            uint8 panid[2];
    651            zb_Readpandid(panid);
   \   00000F                ; Setup parameters for call to function zb_Readpandid
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   ??zb_Readpandid?relay
    652            if(channel != 11 || panid[0] != 0x06 || panid[1] != 0x80)
   \   00001C   740B         MOV     A,#0xb
   \   00001E   6E           XRL     A,R6
   \   00001F   7015         JNZ     ??ChannelPanidInit_0
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6406         XRL     A,#0x6
   \   00002A   700A         JNZ     ??ChannelPanidInit_0
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6480         XRL     A,#0x80
   \   000034   6026         JZ      ??ChannelPanidInit_1
    653            {
    654              panid[0] = 0x06;
   \                     ??ChannelPanidInit_0:
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   7406         MOV     A,#0x6
   \   00003E   F0           MOVX    @DPTR,A
    655              panid[1] = 0x80;
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   7480         MOV     A,#-0x80
   \   000046   F0           MOVX    @DPTR,A
    656              channel = 11;
    657              zb_Writepandid(panid);
   \   000047                ; Setup parameters for call to function zb_Writepandid
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   AA82         MOV     R2,DPL
   \   00004F   AB83         MOV     R3,DPH
   \   000051   12....       LCALL   ??zb_Writepandid?relay
    658              zb_Writechannel(channel);
   \   000054                ; Setup parameters for call to function zb_Writechannel
   \   000054   790B         MOV     R1,#0xb
   \   000056   12....       LCALL   ??zb_Writechannel?relay
    659              zb_SystemReset();
   \   000059                ; Setup parameters for call to function zb_SystemReset
   \   000059   12....       LCALL   ??zb_SystemReset?relay
    660            }
    661            /* user code end */      
    662          }
   \                     ??ChannelPanidInit_1:
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myStartRetryDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myBindRetryDelay>`:
   \   000000   D007         DW 2000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myReportPeriod>`:
   \   000000   AB07         DW 1963

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HandleOsalEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_StartConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_SendDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_BindConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_AllowBindConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_FindDeviceConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_ReceiveDataIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??uartRxCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ChannelPanidInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ChannelPanidInit

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " ">`:
   \   000000   2000         DB " "
   \   000002   00           DB 0

   Maximum stack usage in bytes:

     Function                  ISTACK PSTACK XSTACK
     --------                  ------ ------ ------
     ChannelPanidInit              0      0     11
       -> zb_Readchannel           0      0     22
       -> zb_Readpandid            0      0     22
       -> zb_Writepandid           0      0     22
       -> zb_Writechannel          0      0     22
       -> zb_SystemReset           0      0     22
     uartRxCB                      1      0    275
       -> HalUARTRead              0      0    550
       -> HalUARTWrite             0      0    550
       -> configset                0      0    550
     zb_AllowBindConfirm           0      0      0
     zb_BindConfirm                0      0      9
       -> HalLedSet                0      0     18
       -> osal_set_event           0      0     18
       -> osal_start_timerEx       0      0     18
     zb_FindDeviceConfirm          0      0      0
     zb_HandleKeys                 0      0      0
     zb_HandleOsalEvent            2      0     14
       -> initUart                 0      0     28
       -> HalLedBlink              0      0     28
       -> HalLedBlink              0      0     28
       -> zb_ReadConfiguration     0      0     28
       -> zb_StartRequest          0      0     28
       -> zb_StartRequest          0      0     28
       -> osal_start_timerEx       0      0     28
       -> get_rentihongwai         0      0     28
       -> zb_SendZigbeeDatas       0      0     28
       -> osal_rand                0      0     28
       -> osal_start_timerEx       0      0     28
       -> zb_BindDevice            0      0     28
       -> osal_start_timerEx       0      0     28
       -> HalLedBlink              0      0     28
       -> HalLedSet                0      0     28
       -> HalLedSet                0      0     28
       -> HalLedSet                0      0     28
       -> osal_set_event           0      0     28
     zb_ReceiveDataIndication      0      0      4
     zb_SendDataConfirm            0      0      9
       -> osal_stop_timerEx        0      0     18
       -> zb_BindDevice            0      0     18
       -> osal_set_event           0      0     18
     zb_StartConfirm               0      0      9
       -> HalLedSet                0      0     18
       -> osal_set_event           0      0     18
       -> zb_GetDeviceInfo         0      0     18
       -> osal_start_timerEx       0      0     18


   Segment part sizes:

     Function/Label                       Bytes
     --------------                       -----
     _A_P1                                   1
     _A_IEN0                                 1
     WDCTL                                   1
     appState                                1
     reportState                             1
     myStartRetryDelay                       1
     isGateWay                               1
     myBindRetryDelay                        2
     myReportPeriod                          2
     reportFailureNr                         1
     parentShortAddr                         2
     zb_InCmdList                            4
     zb_OutCmdList                           4
     zb_SimpleDesc                          12
     zb_HandleOsalEvent                    343
     ?Subroutine2                            2
     ??Subroutine3_0                        11
     ?Subroutine1                           11
     in_net                                  1
     zb_HandleKeys                           3
     zb_StartConfirm                        52
     ?Subroutine0                            5
     zb_SendDataConfirm                     76
     zb_BindConfirm                         45
     zb_AllowBindConfirm                     3
     zb_FindDeviceConfirm                    3
     zb_ReceiveDataIndication                3
     uartRxCB                              224
     ChannelPanidInit                      100
     ?<Initializer for myStartRetryDelay>    1
     ?<Initializer for myBindRetryDelay>     2
     ?<Initializer for myReportPeriod>       2
     ??zb_HandleOsalEvent?relay              6
     ??zb_HandleKeys?relay                   6
     ??zb_StartConfirm?relay                 6
     ??zb_SendDataConfirm?relay              6
     ??zb_BindConfirm?relay                  6
     ??zb_AllowBindConfirm?relay             6
     ??zb_FindDeviceConfirm?relay            6
     ??zb_ReceiveDataIndication?relay        6
     ??uartRxCB?relay                        6
     ??ChannelPanidInit?relay                6
     ?<Constant " ">                         3

 
 881 bytes in segment BANKED_CODE
  60 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
   5 bytes in segment XDATA_I
   5 bytes in segment XDATA_ID
  23 bytes in segment XDATA_ROM_C
   7 bytes in segment XDATA_Z
 
 946 bytes of CODE  memory
  23 bytes of CONST memory
   0 bytes of DATA  memory (+ 3 bytes shared)
  12 bytes of XDATA memory

Errors: none
Warnings: 4
