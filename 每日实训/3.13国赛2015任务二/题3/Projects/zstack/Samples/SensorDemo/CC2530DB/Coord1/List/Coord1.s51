///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        14/Mar/2017  10:37:36 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\Source\Coord1.c              /
//    Command line       =  -f F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zs /
//                          tack\Samples\SensorDemo\CC2530DB\..\..\..\Tools\C /
//                          C2530DB\f8wCoord.cfg (-DCPU32MHZ                  /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f   /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\Tools\CC25 /
//                          30DB\f8wConfig.cfg (-DSECURE=0                    /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00100000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x8888                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ /
//                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\Sourc /
//                          e\Coord1.c -D ZIGBEEPRO -D HOLD_AUTO_START -D     /
//                          BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D      /
//                          NV_RESTORE -D ZTOOL_P1 -D xMT_TASK -D             /
//                          DEVICE_LOGICAL_TYPE=0 -D LOG_TYPE=0 -D            /
//                          xLCD_SUPPORTED -D xMT_TASK -lC                    /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\Coord1\List\ -lA    /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\Coord1\List\        /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\Coord1\Obj\ -e      /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zs /
//                          tack\Samples\SensorDemo\CC2530DB\ -I              /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\SOURCE\ -I       /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\MYAPP\ -I        /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\sensor_drv\ -I   /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\ZMAIN\TI25 /
//                          30DB\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Proje /
//                          cts\zstack\Samples\SensorDemo\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\MT\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ /
//                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I     /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\HAL\TARGET\CC2530EB\ -I                    /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\OSAL\MCU\CCSOC\ -I                         /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\OSAL\INCLUDE\ -I                           /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\STACK\AF\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶ /
//                          þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\NWK\ -I          /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\STACK\SEC\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ /
//                          ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I        /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\STACK\SYS\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ /
//                          ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I         /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\ZMAC\F8W\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶ /
//                          þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\ZMAC\ -I               /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\SERVICES\SADDR\ -I                         /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\SERVICES\SDATA\ -I                         /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\MAC\INCLUDE\ -I F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎ /
//                          Îñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I  /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\MAC\LOW_LEVEL\srf04\ -I                    /
//                          F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\..\..\..\..\..\COMP /
//                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz      /
//                          --require_prototypes                              /
//    List file          =  F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstac /
//                          k\Samples\SensorDemo\CC2530DB\Coord1\List\Coord1. /
//                          s51                                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Coord1

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ADD_XSTACK_DISP0_16
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ChannelPanidInit?relay
        FUNCTION ??ChannelPanidInit?relay,0203H
        PUBLIC ??uartRxCB?relay
        FUNCTION ??uartRxCB?relay,0203H
        PUBLIC ??zb_AllowBindConfirm?relay
        FUNCTION ??zb_AllowBindConfirm?relay,0203H
        PUBLIC ??zb_BindConfirm?relay
        FUNCTION ??zb_BindConfirm?relay,0203H
        PUBLIC ??zb_FindDeviceConfirm?relay
        FUNCTION ??zb_FindDeviceConfirm?relay,0203H
        PUBLIC ??zb_HandleKeys?relay
        FUNCTION ??zb_HandleKeys?relay,0203H
        PUBLIC ??zb_HandleOsalEvent?relay
        FUNCTION ??zb_HandleOsalEvent?relay,0203H
        PUBLIC ??zb_ReceiveDataIndication?relay
        FUNCTION ??zb_ReceiveDataIndication?relay,0203H
        PUBLIC ??zb_SendDataConfirm?relay
        FUNCTION ??zb_SendDataConfirm?relay,0203H
        PUBLIC ??zb_StartConfirm?relay
        FUNCTION ??zb_StartConfirm?relay,0203H
        PUBLIC ChannelPanidInit
        FUNCTION ChannelPanidInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC uartRxCB
        FUNCTION uartRxCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 290, STACK
        PUBLIC zb_AllowBindConfirm
        FUNCTION zb_AllowBindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_BindConfirm
        FUNCTION zb_BindConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zb_FindDeviceConfirm
        FUNCTION zb_FindDeviceConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleKeys
        FUNCTION zb_HandleKeys,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zb_HandleOsalEvent
        FUNCTION zb_HandleOsalEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zb_InCmdList
        PUBLIC zb_OutCmdList
        PUBLIC zb_ReceiveDataIndication
        FUNCTION zb_ReceiveDataIndication,0203H
        ARGFRAME XSTACK, 4, STACK
        PUBLIC zb_SendDataConfirm
        FUNCTION zb_SendDataConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zb_SimpleDesc
        PUBLIC zb_StartConfirm
        FUNCTION zb_StartConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
initUart            SYMBOL "initUart"
HalLedBlink         SYMBOL "HalLedBlink"
zb_ReadConfiguration SYMBOL "zb_ReadConfiguration"
zb_StartRequest     SYMBOL "zb_StartRequest"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
zb_BindDevice       SYMBOL "zb_BindDevice"
zb_AllowBind        SYMBOL "zb_AllowBind"
HalLedSet           SYMBOL "HalLedSet"
osal_set_event      SYMBOL "osal_set_event"
zb_GetDeviceInfo    SYMBOL "zb_GetDeviceInfo"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
HalUARTRead         SYMBOL "HalUARTRead"
Onboard_wait        SYMBOL "Onboard_wait"
HalUARTWrite        SYMBOL "HalUARTWrite"
configset           SYMBOL "configset"
zb_Readchannel      SYMBOL "zb_Readchannel"
zb_Readpandid       SYMBOL "zb_Readpandid"
zb_Writepandid      SYMBOL "zb_Writepandid"
zb_Writechannel     SYMBOL "zb_Writechannel"
zb_SystemReset      SYMBOL "zb_SystemReset"
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
??configset?relay   SYMBOL "?relay", configset
??initUart?relay    SYMBOL "?relay", initUart
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??zb_AllowBind?relay SYMBOL "?relay", zb_AllowBind
??zb_BindDevice?relay SYMBOL "?relay", zb_BindDevice
??zb_GetDeviceInfo?relay SYMBOL "?relay", zb_GetDeviceInfo
??zb_ReadConfiguration?relay SYMBOL "?relay", zb_ReadConfiguration
??zb_Readchannel?relay SYMBOL "?relay", zb_Readchannel
??zb_Readpandid?relay SYMBOL "?relay", zb_Readpandid
??zb_StartRequest?relay SYMBOL "?relay", zb_StartRequest
??zb_SystemReset?relay SYMBOL "?relay", zb_SystemReset
??zb_Writechannel?relay SYMBOL "?relay", zb_Writechannel
??zb_Writepandid?relay SYMBOL "?relay", zb_Writepandid
ChannelPanidInit    SYMBOL "ChannelPanidInit"
??ChannelPanidInit?relay SYMBOL "?relay", ChannelPanidInit
uartRxCB            SYMBOL "uartRxCB"
??uartRxCB?relay    SYMBOL "?relay", uartRxCB
zb_AllowBindConfirm SYMBOL "zb_AllowBindConfirm"
??zb_AllowBindConfirm?relay SYMBOL "?relay", zb_AllowBindConfirm
zb_BindConfirm      SYMBOL "zb_BindConfirm"
??zb_BindConfirm?relay SYMBOL "?relay", zb_BindConfirm
zb_FindDeviceConfirm SYMBOL "zb_FindDeviceConfirm"
??zb_FindDeviceConfirm?relay SYMBOL "?relay", zb_FindDeviceConfirm
zb_HandleKeys       SYMBOL "zb_HandleKeys"
??zb_HandleKeys?relay SYMBOL "?relay", zb_HandleKeys
zb_HandleOsalEvent  SYMBOL "zb_HandleOsalEvent"
??zb_HandleOsalEvent?relay SYMBOL "?relay", zb_HandleOsalEvent
zb_ReceiveDataIndication SYMBOL "zb_ReceiveDataIndication"
??zb_ReceiveDataIndication?relay SYMBOL "?relay", zb_ReceiveDataIndication
zb_SendDataConfirm  SYMBOL "zb_SendDataConfirm"
??zb_SendDataConfirm?relay SYMBOL "?relay", zb_SendDataConfirm
zb_StartConfirm     SYMBOL "zb_StartConfirm"
??zb_StartConfirm?relay SYMBOL "?relay", zb_StartConfirm

        EXTERN initUart
        FUNCTION initUart,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_ReadConfiguration
        FUNCTION zb_ReadConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_StartRequest
        FUNCTION zb_StartRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_BindDevice
        FUNCTION zb_BindDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_AllowBind
        FUNCTION zb_AllowBind,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_GetDeviceInfo
        FUNCTION zb_GetDeviceInfo,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 290, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 290, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 290, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 290, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN configset
        FUNCTION configset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 290, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_Readchannel
        FUNCTION zb_Readchannel,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_Readpandid
        FUNCTION zb_Readpandid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_Writepandid
        FUNCTION zb_Writepandid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_Writechannel
        FUNCTION zb_Writechannel,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SystemReset
        FUNCTION zb_SystemReset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN ??configset?relay
        FUNCTION ??configset?relay,00H
        EXTERN ??initUart?relay
        FUNCTION ??initUart?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??zb_AllowBind?relay
        FUNCTION ??zb_AllowBind?relay,00H
        EXTERN ??zb_BindDevice?relay
        FUNCTION ??zb_BindDevice?relay,00H
        EXTERN ??zb_GetDeviceInfo?relay
        FUNCTION ??zb_GetDeviceInfo?relay,00H
        EXTERN ??zb_ReadConfiguration?relay
        FUNCTION ??zb_ReadConfiguration?relay,00H
        EXTERN ??zb_Readchannel?relay
        FUNCTION ??zb_Readchannel?relay,00H
        EXTERN ??zb_Readpandid?relay
        FUNCTION ??zb_Readpandid?relay,00H
        EXTERN ??zb_StartRequest?relay
        FUNCTION ??zb_StartRequest?relay,00H
        EXTERN ??zb_SystemReset?relay
        FUNCTION ??zb_SystemReset?relay,00H
        EXTERN ??zb_Writechannel?relay
        FUNCTION ??zb_Writechannel?relay,00H
        EXTERN ??zb_Writepandid?relay
        FUNCTION ??zb_Writepandid?relay,00H
        EXTERN sapi_TaskID

// F:\Ã¿ÈÕÊµÑµ\3.13¹úÈü2015ÈÎÎñ¶þ\Ìâ3\Projects\zstack\Samples\SensorDemo\Source\Coord1.c
//    1 /**************************************************************************************************
//    2   Filename:       DemoCollector.c
//    3 
//    4   Description:    Collector application for the Sensor Demo utilizing Simple API.
//    5 
//    6                   The collector node can be set in a state where it accepts 
//    7                   incoming reports from the sensor nodes, and can send the reports
//    8                   via the UART to a PC tool. The collector node in this state
//    9                   functions as a gateway. The collector nodes that are not in the
//   10                   gateway node function as routers in the network.  
//   11 
//   12 
//   13   Copyright 2009 Texas Instruments Incorporated. All rights reserved.
//   14 
//   15   IMPORTANT: Your use of this Software is limited to those specific rights
//   16   granted under the terms of a software license agreement between the user
//   17   who downloaded the software, his/her employer (which must be your employer)
//   18   and Texas Instruments Incorporated (the "License").  You may not use this
//   19   Software unless you agree to abide by the terms of the License. The License
//   20   limits your use, and you acknowledge, that the Software may not be modified,
//   21   copied or distributed unless embedded on a Texas Instruments microcontroller
//   22   or used solely and exclusively in conjunction with a Texas Instruments radio
//   23   frequency transceiver, which is integrated into your product.  Other than for
//   24   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   25   works of, modify, distribute, perform, display or sell this Software and/or
//   26   its documentation for any purpose.
//   27 
//   28   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   29   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   30   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   31   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   32   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   33   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   34   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   35   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   36   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   37   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   38   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   39 
//   40   Should you have any questions regarding your right to use this Software,
//   41   contact Texas Instruments Incorporated at www.TI.com.
//   42 **************************************************************************************************/
//   43 
//   44 /******************************************************************************
//   45  * INCLUDES
//   46  */
//   47 
//   48 #include "ZComDef.h"
//   49 #include "OSAL.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "sapi.h"
//   52 #include "hal_key.h"
//   53 #include "hal_led.h"
//   54 #include "hal_lcd.h"
//   55 #include "hal_uart.h"
//   56 #include "DemoApp.h"
//   57 #include "OnBoard.h"
//   58 #include "UART_PRINT.h"
//   59 #include "sensor.h"
//   60 /******************************************************************************
//   61  * CONSTANTS
//   62  */
//   63 
//   64 #define REPORT_FAILURE_LIMIT                4
//   65 #define ACK_REQ_INTERVAL                    5 // each 5th packet is sent with ACK request
//   66 
//   67 // General UART frame offsets
//   68 #define FRAME_SOF_OFFSET                    0
//   69 #define FRAME_LENGTH_OFFSET                 1 
//   70 #define FRAME_CMD0_OFFSET                   2
//   71 #define FRAME_CMD1_OFFSET                   3
//   72 #define FRAME_DATA_OFFSET                   4
//   73 
//   74 // ZB_RECEIVE_DATA_INDICATION offsets
//   75 #define ZB_RECV_SRC_OFFSET                  0
//   76 #define ZB_RECV_CMD_OFFSET                  2
//   77 #define ZB_RECV_LEN_OFFSET                  4
//   78 #define ZB_RECV_DATA_OFFSET                 6
//   79 #define ZB_RECV_FCS_OFFSET                  8
//   80 
//   81 
//   82 
//   83 // PING response frame length and offset
//   84 #define SYS_PING_RSP_LENGTH                 7 
//   85 #define SYS_PING_CMD_OFFSET                 1
//   86 
//   87 // Stack Profile
//   88 #define ZIGBEE_2007                         0x0040
//   89 #define ZIGBEE_PRO_2007                     0x0041
//   90 
//   91 #ifdef ZIGBEEPRO
//   92 #define STACK_PROFILE                       ZIGBEE_PRO_2007             
//   93 #else 
//   94 #define STACK_PROFILE                       ZIGBEE_2007
//   95 #endif
//   96 
//   97 #define CPT_SOP                             0xFE
//   98 #define SYS_PING_REQUEST                    0x0021
//   99 #define SYS_PING_RESPONSE                   0x0161
//  100 #define ZB_RECEIVE_DATA_INDICATION          0x8746
//  101 
//  102 // Application States
//  103 #define APP_INIT                            0
//  104 #define APP_START                           2
//  105 #define APP_BINDED                          3    
//  106 
//  107 // Application osal event identifiers
//  108 #define MY_START_EVT                        0x0001
//  109 #define MY_REPORT_EVT                       0x0002
//  110 #define MY_FIND_COLLECTOR_EVT               0x0004
//  111 
//  112 
//  113 /******************************************************************************
//  114  * TYPEDEFS
//  115  */
//  116 typedef struct
//  117 {
//  118   uint16              source;
//  119   uint16              parent;
//  120   uint8               temp;
//  121   uint8               voltage;
//  122 } gtwData_t;
//  123 
//  124 /******************************************************************************
//  125  * LOCAL VARIABLES
//  126  */
//  127 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  128 static uint8 appState =             APP_INIT;
appState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  129 static uint8 reportState =          FALSE;
reportState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  130 static uint8 myStartRetryDelay =    10;          // milliseconds
myStartRetryDelay:
        DATA8
        DS 1
        REQUIRE `?<Initializer for myStartRetryDelay>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  131 static uint8 isGateWay =            FALSE;
isGateWay:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  132 static uint16 myBindRetryDelay =    2000;        // milliseconds
myBindRetryDelay:
        DATA16
        DS 2
        REQUIRE `?<Initializer for myBindRetryDelay>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  133 static uint16 myReportPeriod =      2000;        // milliseconds
myReportPeriod:
        DATA16
        DS 2
        REQUIRE `?<Initializer for myReportPeriod>`
        REQUIRE __INIT_XDATA_I
//  134 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 static uint8 reportFailureNr =      0;
reportFailureNr:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  136 static uint16 parentShortAddr;
parentShortAddr:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  137 
//  138 /******************************************************************************
//  139  * LOCAL FUNCTIONS
//  140  */
//  141 
//  142 static uint8 calcFCS(uint8 *pBuf, uint8 len);
//  143 static void sysPingReqRcvd(void);
//  144 static void sysPingRsp(void);
//  145 static void sendDummyReport(void);
//  146 void ChannelPanidInit (void);
//  147 /******************************************************************************
//  148  * GLOBAL VARIABLES
//  149  */
//  150 
//  151 // Inputs and Outputs for Collector device
//  152 #define NUM_OUT_CMD_COLLECTOR                2
//  153 #define NUM_IN_CMD_COLLECTOR                 2
//  154 
//  155 // List of output and input commands for Collector device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//  156 const cId_t zb_InCmdList[NUM_IN_CMD_COLLECTOR] =
zb_InCmdList:
        DATA16
        DW 2
        DW 3
//  157 {
//  158   SENSOR_REPORT_CMD_ID,
//  159   DUMMY_REPORT_CMD_ID
//  160 };
//  161 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//  162 const cId_t zb_OutCmdList[NUM_IN_CMD_COLLECTOR] =
zb_OutCmdList:
        DATA16
        DW 2
        DW 3
//  163 {
//  164   SENSOR_REPORT_CMD_ID,
//  165   DUMMY_REPORT_CMD_ID
//  166 };
//  167 
//  168 // Define SimpleDescriptor for Collector device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  169 const SimpleDescriptionFormat_t zb_SimpleDesc =
zb_SimpleDesc:
        DB 2
        DATA16
        DW 3872
        DW 2
        DATA8
        DB 1
        DB 2
        DATA16
        DW zb_InCmdList
        DATA8
        DB 2
        DATA16
        DW zb_OutCmdList
//  170 {
//  171   MY_ENDPOINT_ID,             //  Endpoint
//  172   MY_PROFILE_ID,              //  Profile ID
//  173   DEV_ID_COLLECTOR,           //  Device ID
//  174   DEVICE_VERSION_COLLECTOR,   //  Device Version
//  175   0,                          //  Reserved
//  176   NUM_IN_CMD_COLLECTOR,       //  Number of Input Commands
//  177   (cId_t *) zb_InCmdList,     //  Input Command List
//  178   NUM_OUT_CMD_COLLECTOR,      //  Number of Output Commands
//  179   (cId_t *) zb_OutCmdList     //  Output Command List
//  180 };
//  181 
//  182 /******************************************************************************
//  183  * FUNCTIONS
//  184  */
//  185 
//  186 /******************************************************************************
//  187  * @fn          zb_HandleOsalEvent
//  188  *
//  189  * @brief       The zb_HandleOsalEvent function is called by the operating
//  190  *              system when a task event is set
//  191  *
//  192  * @param       event - Bitmask containing the events that have been set
//  193  *
//  194  * @return      none
//  195  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  196 void zb_HandleOsalEvent( uint16 event )
zb_HandleOsalEvent:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function zb_HandleOsalEvent
        CODE
//  197 {
        FUNCALL zb_HandleOsalEvent, initUart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_ReadConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_StartRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_StartRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_BindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
//  198   uint8 logicalType;
//  199   
//  200   if(event & SYS_EVENT_MSG)
//  201   {
//  202     
//  203   }
//  204   
//  205   if( event & ZB_ENTRY_EVENT )
        ANL     A,#0x10
        JZ      ??zb_HandleOsalEvent_0
//  206   {  
//  207     // Initialise UART
//  208     initUart(uartRxCB);
        ; Setup parameters for call to function initUart
        MOV     R2,#??uartRxCB?relay & 0xff
        MOV     R3,#(??uartRxCB?relay >> 8) & 0xff
        LCALL   ??initUart?relay
//  209     
//  210     // blind LED 1 to indicate starting/joining a network
//  211     HalLedBlink ( HAL_LED_2, 0, 50, 500 );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ??HalLedBlink?relay
//  212     HalLedBlink ( HAL_LED_1, 0, 50, 500 );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  213     //HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
//  214     
//  215     // Read logical device type from NV
//  216     zb_ReadConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
        ; Setup parameters for call to function zb_ReadConfiguration
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#-0x79
        LCALL   ??zb_ReadConfiguration?relay
//  217    
//  218     // Start the device 
//  219     zb_StartRequest();
        ; Setup parameters for call to function zb_StartRequest
        LCALL   ??zb_StartRequest?relay
//  220   }
//  221   
//  222   if ( event & MY_START_EVT )
??zb_HandleOsalEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??zb_HandleOsalEvent_1
//  223   {
//  224     zb_StartRequest();
        ; Setup parameters for call to function zb_StartRequest
        LCALL   ??zb_StartRequest?relay
//  225   }
//  226   
//  227   if ( event & MY_REPORT_EVT )
??zb_HandleOsalEvent_1:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??zb_HandleOsalEvent_2
//  228   {
//  229     if (isGateWay) 
        MOV     DPTR,#isGateWay
        MOVX    A,@DPTR
        JZ      ??zb_HandleOsalEvent_3
//  230     {
//  231       osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod );
??zb_HandleOsalEvent_4:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#myReportPeriod
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#0x2
        LCALL   ?Subroutine1 & 0xFFFF
//  232     }
??CrossCallReturnLabel_0:
        SJMP    ??zb_HandleOsalEvent_2
//  233     else if (appState == APP_BINDED) 
??zb_HandleOsalEvent_3:
        MOV     DPTR,#appState
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??zb_HandleOsalEvent_4
//  234     {
//  235       sendDummyReport();
//  236       osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod );
//  237     }
//  238   }
//  239   if ( event & MY_FIND_COLLECTOR_EVT )
??zb_HandleOsalEvent_2:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??zb_HandleOsalEvent_5
//  240   { 
//  241     // Find and bind to a gateway device (if this node is not gateway)
//  242     if (!isGateWay) 
        MOV     DPTR,#isGateWay
        MOVX    A,@DPTR
        JNZ     ??zb_HandleOsalEvent_5
//  243     {
//  244       zb_BindDevice( TRUE, DUMMY_REPORT_CMD_ID, (uint8 *)NULL );
        ; Setup parameters for call to function zb_BindDevice
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     R1,#0x1
        LCALL   ??zb_BindDevice?relay
//  245     }
//  246   }
//  247   
//  248 }
??zb_HandleOsalEvent_5:
        MOV     A,#0x1
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  249 
//  250 /******************************************************************************
//  251  * @fn      zb_HandleKeys
//  252  *
//  253  * @brief   Handles all key events for this device.
//  254  *
//  255  * @param   shift - true if in shift/alt.
//  256  * @param   keys - bit field for key events. Valid entries:
//  257  *                 EVAL_SW4
//  258  *                 EVAL_SW3
//  259  *                 EVAL_SW2
//  260  *                 EVAL_SW1
//  261  *
//  262  * @return  none
//  263  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  264 void zb_HandleKeys( uint8 shift, uint8 keys )
zb_HandleKeys:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function zb_HandleKeys
        CODE
//  265 {
        FUNCALL zb_HandleKeys, zb_AllowBind
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  266   static uint8 allowBind=FALSE;
//  267   static uint8 allowJoin=TRUE;
//  268   uint8 logicalType;
//  269 
//  270   if ((!allowBind) && (appState== APP_START) )
        MOV     DPTR,#??allowBind
        MOVX    A,@DPTR
        JNZ     ??zb_HandleKeys_0
        MOV     DPTR,#appState
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??zb_HandleKeys_0
//  271       {
//  272         allowBind=1;
        MOV     DPTR,#??allowBind
        MOV     A,#0x1
        MOVX    @DPTR,A
//  273           // Turn ON Allow Bind mode infinitly
//  274         zb_AllowBind( 0xFF );
        ; Setup parameters for call to function zb_AllowBind
        MOV     R1,#-0x1
        LCALL   ??zb_AllowBind?relay
//  275         HalLedSet( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
//  276  //       HalLedBlink ( HAL_LED_4, 6, 50, 200 );
//  277         HalLedSet( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  278         HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  279         HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  280         //This node is the gateway node
//  281         isGateWay = TRUE;
        MOV     DPTR,#isGateWay
        MOV     A,#0x1
        MOVX    @DPTR,A
//  282         
//  283        allowJoin = 0;
        MOV     DPTR,#??allowJoin
        CLR     A
        MOVX    @DPTR,A
//  284 
//  285     }
//  286   
//  287   
//  288     keys=0;
//  289   // Shift is used to make each button/switch dual purpose.
//  290   if ( shift )
//  291   {
//  292     if ( keys & HAL_KEY_SW_1 )
//  293     {
//  294     }
//  295     if ( keys & HAL_KEY_SW_2 )
//  296     {
//  297     }
//  298     if ( keys & HAL_KEY_SW_3 )
//  299     {
//  300     }
//  301     if ( keys & HAL_KEY_SW_4 )
//  302     {
//  303     }
//  304   }
//  305   else
//  306   {
//  307       
//  308     if ( keys & HAL_KEY_SW_1 )
//  309     {
//  310       if ( appState == APP_INIT  )
//  311       {
//  312         // Key 1 starts device as a coordinator
//  313         logicalType = ZG_DEVICETYPE_COORDINATOR;
//  314         zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
//  315                 
//  316         // Reset the device with new configuration
//  317 #ifdef RESETVAL
//  318               uart_printf("RESET VAL 2 !\r\n");
//  319               MicroWait (10000);
//  320 #endif        
//  321         zb_SystemReset();
//  322       }
//  323     }
//  324     if ( keys & HAL_KEY_SW_2 )
//  325     {
//  326       allowBind ^= 1;
//  327       if (allowBind) 
//  328       {
//  329         // Turn ON Allow Bind mode infinitly
//  330         zb_AllowBind( 0xFF );
//  331         HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
//  332         //This node is the gateway node
//  333         isGateWay = TRUE;
//  334         
//  335         // Update the display
//  336         #if defined ( LCD_SUPPORTED )
//  337         HalLcdWriteString( "Gateway Mode", HAL_LCD_LINE_2 );
//  338         #endif
//  339       }
//  340       else
//  341       {
//  342         // Turn OFF Allow Bind mode infinitly
//  343         zb_AllowBind( 0x00 );
//  344         HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
//  345         isGateWay = FALSE;
//  346         
//  347         // Update the display
//  348         #if defined ( LCD_SUPPORTED )
//  349         HalLcdWriteString( "Collector", HAL_LCD_LINE_2 );
//  350         #endif
//  351       }
//  352     }
//  353     if ( keys & HAL_KEY_SW_3 )
//  354     {
//  355       // Start reporting
//  356       osal_set_event( sapi_TaskID, MY_REPORT_EVT );
//  357     }
//  358     if ( keys & HAL_KEY_SW_4 )
//  359     {
//  360       // Key 4 is used to control which routers 
//  361       // that can accept join requests
//  362       allowJoin ^= 1;
//  363       if(allowJoin)
//  364       {
//  365         NLME_PermitJoiningRequest(0xFF);
//  366       }
//  367       else {
//  368         NLME_PermitJoiningRequest(0);
//  369       }
//  370     }
//  371   }
//  372 }
??zb_HandleKeys_0:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??allowBind:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
??allowJoin:
        DATA8
        DS 1
        REQUIRE `?<Initializer for allowJoin>`
        REQUIRE __INIT_XDATA_I
//  373 
//  374 /******************************************************************************
//  375  * @fn          #include "hal_led.h"
//  376  *
//  377  * @brief       The zb_StartConfirm callback is called by the ZigBee stack
//  378  *              after a start request operation completes
//  379  *
//  380  * @param       status - The status of the start operation.  Status of
//  381  *                       ZB_SUCCESS indicates the start operation completed
//  382  *                       successfully.  Else the status is an error code.
//  383  *
//  384  * @return      none
//  385  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  386 void zb_StartConfirm( uint8 status )
zb_StartConfirm:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function zb_StartConfirm
        CODE
//  387 { 
        FUNCALL zb_StartConfirm, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, zb_GetDeviceInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, zb_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  388   // If the device sucessfully started, change state to running
//  389   if ( status == ZB_SUCCESS )   
        JNZ     ??zb_StartConfirm_0
//  390   {
//  391     // Set LED 1 to indicate that node is operational on the network
//  392     HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  393 
//  394     // Change application state
//  395     appState = APP_START;
        MOV     DPTR,#appState
        MOV     A,#0x2
        MOVX    @DPTR,A
//  396     
//  397     // Set event to bind to a collector
//  398     osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine2 & 0xFFFF
//  399        
//  400      // Store parent short address
//  401     zb_GetDeviceInfo(ZB_INFO_PARENT_SHORT_ADDR, &parentShortAddr);
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function zb_GetDeviceInfo
        MOV     R2,#parentShortAddr & 0xff
        MOV     R3,#(parentShortAddr >> 8) & 0xff
        MOV     R1,#0x3
        LCALL   ??zb_GetDeviceInfo?relay
//  402     
//  403     zb_HandleKeys(0,0);    
        ; Setup parameters for call to function zb_HandleKeys
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??zb_HandleKeys?relay
        SJMP    ??CrossCallReturnLabel_1
//  404   }
//  405   else
//  406   {
//  407     // Try again later with a delay
//  408     osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
??zb_StartConfirm_0:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#myStartRetryDelay
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#0x1
        LCALL   ?Subroutine1 & 0xFFFF
//  409   }
//  410 }
??CrossCallReturnLabel_1:
        SJMP    ??Subroutine4_0
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     R2,#0x4
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine3_0
        ; // Fall through to label ??Subroutine3_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine3_0:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock14
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock15
//  411 
//  412 /******************************************************************************
//  413  * @fn          zb_SendDataConfirm
//  414  *
//  415  * @brief       The zb_SendDataConfirm callback function is called by the
//  416  *              ZigBee stack after a send data operation completes
//  417  *
//  418  * @param       handle - The handle identifying the data transmission.
//  419  *              status - The status of the operation.
//  420  *
//  421  * @return      none
//  422  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  423 void zb_SendDataConfirm( uint8 handle, uint8 status )
zb_SendDataConfirm:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function zb_SendDataConfirm
        CODE
//  424 {
        FUNCALL zb_SendDataConfirm, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_SendDataConfirm, zb_BindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_SendDataConfirm, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
//  425   if ( status != ZB_SUCCESS && !isGateWay ) 
        JZ      ??zb_SendDataConfirm_0
        MOV     DPTR,#isGateWay
        MOVX    A,@DPTR
        JNZ     ??zb_SendDataConfirm_0
//  426   {
//  427     if ( ++reportFailureNr>=REPORT_FAILURE_LIMIT ) 
        MOV     DPTR,#reportFailureNr
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x4
        JC      ??zb_SendDataConfirm_1
//  428     {   
//  429        // Stop reporting
//  430        osal_stop_timerEx( sapi_TaskID, MY_REPORT_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  431        
//  432        // After failure reporting start automatically when the device
//  433        // is binded to a new gateway
//  434        reportState=TRUE;
        MOV     DPTR,#reportState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  435        
//  436        // Delete previous binding
//  437        zb_BindDevice( FALSE, DUMMY_REPORT_CMD_ID, (uint8 *)NULL );
        ; Setup parameters for call to function zb_BindDevice
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     R1,#0x0
        LCALL   ??zb_BindDevice?relay
//  438        
//  439        // Try binding to a new gateway
//  440        osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine2 & 0xFFFF
//  441        reportFailureNr=0;
??CrossCallReturnLabel_4:
        SJMP    ??zb_SendDataConfirm_2
//  442     }
//  443   }
//  444   else if ( !isGateWay ) 
??zb_SendDataConfirm_0:
        MOV     DPTR,#isGateWay
        MOVX    A,@DPTR
        JNZ     ??zb_SendDataConfirm_1
//  445   {
//  446     reportFailureNr=0;
??zb_SendDataConfirm_2:
        MOV     DPTR,#reportFailureNr
        CLR     A
        MOVX    @DPTR,A
//  447   }
//  448 }
??zb_SendDataConfirm_1:
        SJMP    ??Subroutine4_0
        CFI EndBlock cfiBlock16
//  449 
//  450 /******************************************************************************
//  451  * @fn          zb_BindConfirm
//  452  *
//  453  * @brief       The zb_BindConfirm callback is called by the ZigBee stack
//  454  *              after a bind operation completes.
//  455  *
//  456  * @param       commandId - The command ID of the binding being confirmed.
//  457  *              status - The status of the bind operation.
//  458  *
//  459  * @return      none
//  460  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  461 void zb_BindConfirm( uint16 commandId, uint8 status )
zb_BindConfirm:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function zb_BindConfirm
        CODE
//  462 {
        FUNCALL zb_BindConfirm, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindConfirm, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  463   if( status == ZB_SUCCESS )
        JNZ     ??zb_BindConfirm_0
//  464   {
//  465     appState = APP_BINDED;
        MOV     DPTR,#appState
        MOV     A,#0x3
        MOVX    @DPTR,A
//  466     // Set LED2 to indicate binding successful
//  467     HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  468     
//  469     // After failure reporting start automatically when the device
//  470     // is binded to a new gateway
//  471     if ( reportState ) 
        MOV     DPTR,#reportState
        MOVX    A,@DPTR
        JZ      ??CrossCallReturnLabel_2
//  472     {
//  473       // Start reporting
//  474       osal_set_event( sapi_TaskID, MY_REPORT_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        LCALL   ??Subroutine3_0 & 0xFFFF
//  475     }
//  476   }
??CrossCallReturnLabel_5:
        SJMP    ??CrossCallReturnLabel_2
//  477   else
//  478   {
//  479     osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
??zb_BindConfirm_0:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#myBindRetryDelay
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#0x4
        LCALL   ?Subroutine1 & 0xFFFF
//  480   }
//  481 }
??CrossCallReturnLabel_2:
        SJMP    ??Subroutine4_0
        CFI EndBlock cfiBlock17
//  482 
//  483 /******************************************************************************
//  484  * @fn          zb_AllowBindConfirm
//  485  *
//  486  * @brief       Indicates when another device attempted to bind to this device
//  487  *
//  488  * @param
//  489  *
//  490  * @return      none
//  491  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  492 void zb_AllowBindConfirm( uint16 source )
zb_AllowBindConfirm:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function zb_AllowBindConfirm
        CODE
//  493 {
        ; Saved register size: 0
        ; Auto size: 0
//  494 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock18
//  495 
//  496 /******************************************************************************
//  497  * @fn          zb_FindDeviceConfirm
//  498  *
//  499  * @brief       The zb_FindDeviceConfirm callback function is called by the
//  500  *              ZigBee stack when a find device operation completes.
//  501  *
//  502  * @param       searchType - The type of search that was performed.
//  503  *              searchKey - Value that the search was executed on.
//  504  *              result - The result of the search.
//  505  *
//  506  * @return      none
//  507  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  508 void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
zb_FindDeviceConfirm:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function zb_FindDeviceConfirm
        CODE
//  509 {
        ; Saved register size: 0
        ; Auto size: 0
//  510 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock19
//  511 
//  512 /******************************************************************************
//  513  * @fn          zb_ReceiveDataIndication
//  514  *
//  515  * @brief       The zb_ReceiveDataIndication callback function is called
//  516  *              asynchronously by the ZigBee stack to notify the application
//  517  *              when data is received from a peer device.
//  518  *
//  519  * @param       source - The short address of the peer device that sent the data
//  520  *              command - The commandId associated with the data
//  521  *              len - The number of bytes in the pData parameter
//  522  *              pData - The data sent by the peer device
//  523  *
//  524  * @return      none
//  525  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  526 void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
zb_ReceiveDataIndication:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function zb_ReceiveDataIndication
        CODE
//  527 { 
        ; Saved register size: 0
        ; Auto size: 0
//  528 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock20
//  529 
//  530 /******************************************************************************
//  531  * @fn          uartRxCB
//  532  *
//  533  * @brief       Callback function for UART 
//  534  *           // ½ÓÊÕµ½´®¿ÚÐÅºÅµÄ´¦Àí
//  535  * @param       port - UART port
//  536  *              event - UART event that caused callback 
//  537  *
//  538  * @return      none
//  539  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  540 void uartRxCB( uint8 port, uint8 event )
uartRxCB:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function uartRxCB
        CODE
//  541 {
        FUNCALL uartRxCB, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 290, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 290, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uartRxCB, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 290, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 290, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uartRxCB, zb_GetDeviceInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 290, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 290, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uartRxCB, zb_GetDeviceInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 290, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 290, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uartRxCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 290, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 290, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uartRxCB, configset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 290, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 290, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 276
        MOV     DPL,#-0x14
        MOV     DPH,#-0x2
        LCALL   ?ADD_XSTACK_DISP0_16
        CFI CFA_XSP16 add(XSP16, 290)
        MOV     ?V0 + 2,R2
//  542   uint8 pBuf[RX_BUF_LEN+10];
//  543   uint16 cmd;
//  544   uint16 len=0,len1;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  545   if ( event != HAL_UART_TX_EMPTY ) 
        MOV     A,#0x10
        XRL     A,?V0 + 2
        JNZ     $+5
        LJMP    ??uartRxCB_0 & 0xFFFF
//  546   {
//  547     len1=1;
//  548     while(len1)
//  549     {
//  550         len1 = HalUARTRead( HAL_UART_PORT_0, pBuf+len, RX_BUF_LEN );
??uartRxCB_1:
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x0
        MOV     R5,#0x1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R6
        MOV     R2,A
        MOV     A,DPH
        ADDC    A,R7
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  551         len+=len1;
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 1
        MOV     R7,A
//  552         if(len>255)
        CLR     C
        SUBB    A,#0x1
        JC      $+5
        LJMP    ??uartRxCB_2 & 0xFFFF
//  553             break;
//  554         MicroWait (5000);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   ??Onboard_wait?relay
//  555     }
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??uartRxCB_1
//  556     if(len>255)
//  557         len=255;
//  558     if ( len>0 ) 
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??uartRxCB_0 & 0xFFFF
//  559     {
//  560       cmd = BUILD_UINT16(pBuf[SYS_PING_CMD_OFFSET+ 1], pBuf[SYS_PING_CMD_OFFSET]);
//  561       if( (pBuf[FRAME_SOF_OFFSET] == CPT_SOP) && (cmd == SYS_PING_REQUEST) ) 
??uartRxCB_3:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JZ      $+5
        LJMP    ??uartRxCB_4 & 0xFFFF
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R0,A
        MOV     A,#0x21
        XRL     A,R0
        JNZ     ??uartRxCB_5
        MOV     A,R1
??uartRxCB_5:
        JZ      $+5
        LJMP    ??uartRxCB_4 & 0xFFFF
//  562       {
//  563         sysPingReqRcvd();
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x61
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x41
        MOVX    @DPTR,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function zb_GetDeviceInfo
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x6
        LCALL   ??zb_GetDeviceInfo?relay
        ; Setup parameters for call to function zb_GetDeviceInfo
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x5
        LCALL   ??zb_GetDeviceInfo?relay
        MOV     R0,#0x8
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,#0x0
        SJMP    ??uartRxCB_6
??uartRxCB_2:
        MOV     R6,#-0x1
        LJMP    ??uartRxCB_3 & 0xFFFF
??uartRxCB_7:
        MOVX    A,@DPTR
        XRL     ?V0 + 0,A
        INC     DPTR
??uartRxCB_6:
        MOV     ?V0 + 1,R0
        MOV     A,#-0x1
        ADD     A,?V0 + 1
        DEC     R0
        INC     A
        JNZ     ??uartRxCB_7
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        SJMP    ??uartRxCB_0
//  564       }
//  565       else
//  566       {
//  567           configset(pBuf,len, LOG_TYPE); 
??uartRxCB_4:
        ; Setup parameters for call to function configset
        MOV     R4,#0x0
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??configset?relay
//  568       }
//  569     }
//  570   }
//  571 }
??uartRxCB_0:
        MOV     DPL,#0x14
        MOV     DPH,#0x1
        LCALL   ?ADD_XSTACK_DISP0_16
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock21
//  572 
//  573 
//  574 
//  575 
//  576 /******************************************************************************
//  577  * @fn          sysPingReqRcvd
//  578  *
//  579  * @brief       Ping request received 
//  580  *
//  581  * @param       none
//  582  *              
//  583  * @return      none
//  584  */
//  585 static void sysPingReqRcvd(void)
//  586 {
//  587    sysPingRsp();
//  588 }
//  589 
//  590 /******************************************************************************
//  591  * @fn          sysPingRsp
//  592  *
//  593  * @brief       Build and send Ping response
//  594  *
//  595  * @param       none
//  596  *              
//  597  * @return      none
//  598  */
//  599 static void sysPingRsp(void)
//  600 {
//  601   uint8 pBuf[SYS_PING_RSP_LENGTH+3];
//  602   
//  603   // Start of Frame Delimiter
//  604   pBuf[FRAME_SOF_OFFSET] = CPT_SOP;
//  605   
//  606   // Length
//  607   pBuf[FRAME_LENGTH_OFFSET] = 5; 
//  608   
//  609   // Command type
//  610   pBuf[FRAME_CMD0_OFFSET] = LO_UINT16(SYS_PING_RESPONSE); 
//  611   pBuf[FRAME_CMD1_OFFSET] = HI_UINT16(SYS_PING_RESPONSE);
//  612   
//  613   // Stack profile
//  614   pBuf[FRAME_DATA_OFFSET] = LO_UINT16(STACK_PROFILE);
//  615   pBuf[FRAME_DATA_OFFSET+ 1] = HI_UINT16(STACK_PROFILE);
//  616   //PaNID Óë chancel
//  617   zb_GetDeviceInfo(ZB_INFO_PAN_ID, &pBuf[FRAME_DATA_OFFSET+ 2]);
//  618   zb_GetDeviceInfo(ZB_INFO_CHANNEL, &pBuf[FRAME_DATA_OFFSET+ 4]);
//  619   
//  620   
//  621   // Frame Check Sequence
//  622   pBuf[SYS_PING_RSP_LENGTH +2] = calcFCS(&pBuf[FRAME_LENGTH_OFFSET], (SYS_PING_RSP_LENGTH +1));
//  623   
//  624   // Write frame to UART
//  625   HalUARTWrite(HAL_UART_PORT_0,pBuf, SYS_PING_RSP_LENGTH+3);
//  626 }
//  627 
//  628 /******************************************************************************
//  629  * @fn          sendGtwReport
//  630  *
//  631  * @brief       Build and send gateway report
//  632  *
//  633  * @param       none
//  634  *              
//  635  * @return      none
//  636  */
//  637 
//  638 /******************************************************************************
//  639  * @fn          sendDummyReport
//  640  *
//  641  * @brief       Send dummy report (used to visualize collector nodes on PC GUI)
//  642  *
//  643  * @param       none
//  644  *              
//  645  * @return      none
//  646  */
//  647 static void sendDummyReport(void)
//  648 {
//  649 
//  650 }
//  651 
//  652 /******************************************************************************
//  653  * @fn          channel_panid_init
//  654  *
//  655  * @brief       ¶ÔÐÅµÀºÍPANIDÅÐ¶Ï²¢ÉèÖÃ
//  656  *
//  657  * @param       none
//  658  *              
//  659  * @return      none
//  660  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  661 void ChannelPanidInit (void)
ChannelPanidInit:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function ChannelPanidInit
        CODE
//  662 {
        FUNCALL ChannelPanidInit, zb_Readchannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ChannelPanidInit, zb_Readpandid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ChannelPanidInit, zb_Writepandid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ChannelPanidInit, zb_Writechannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ChannelPanidInit, zb_SystemReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  663   /* user code start */
//  664   uint8 channel = zb_Readchannel();
        ; Setup parameters for call to function zb_Readchannel
        LCALL   ??zb_Readchannel?relay
        MOV     A,R1
        MOV     R6,A
//  665   uint8 panid[2];
//  666   zb_Readpandid(panid);
        ; Setup parameters for call to function zb_Readpandid
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??zb_Readpandid?relay
//  667   if(channel != 11 || panid[0] != 0x06 || panid[1] != 0x80)
        MOV     A,#0xb
        XRL     A,R6
        JNZ     ??ChannelPanidInit_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??ChannelPanidInit_0
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x80
        JZ      ??ChannelPanidInit_1
//  668   {
//  669     panid[0] = 0x06;
??ChannelPanidInit_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x6
        MOVX    @DPTR,A
//  670     panid[1] = 0x80;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
//  671     channel = 11;
//  672     zb_Writepandid(panid);
        ; Setup parameters for call to function zb_Writepandid
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??zb_Writepandid?relay
//  673     zb_Writechannel(channel);
        ; Setup parameters for call to function zb_Writechannel
        MOV     R1,#0xb
        LCALL   ??zb_Writechannel?relay
//  674     zb_SystemReset();
        ; Setup parameters for call to function zb_SystemReset
        LCALL   ??zb_SystemReset?relay
//  675   }
//  676   /* user code end */
//  677 }
??ChannelPanidInit_1:
        MOV     A,#0x2
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock22

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for myStartRetryDelay>`:
        DATA8
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for myBindRetryDelay>`:
        DATA16
        DW 2000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for myReportPeriod>`:
        DATA16
        DW 2000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for allowJoin>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleOsalEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleOsalEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_StartConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_StartConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_SendDataConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_SendDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_BindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_BindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_AllowBindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_AllowBindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_FindDeviceConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_FindDeviceConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_ReceiveDataIndication?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_ReceiveDataIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??uartRxCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    uartRxCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ChannelPanidInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ChannelPanidInit

        END
//  678 /******************************************************************************
//  679  * @fn          calcFCS
//  680  *
//  681  * @brief       This function calculates the FCS checksum for the serial message 
//  682  *
//  683  * @param       pBuf - Pointer to the end of a buffer to calculate the FCS.
//  684  *              len - Length of the pBuf.
//  685  *
//  686  * @return      The calculated FCS.
//  687  ******************************************************************************
//  688  */
//  689 static uint8 calcFCS(uint8 *pBuf, uint8 len)
//  690 {
//  691   uint8 rtrn = 0;
//  692 
//  693   while (len--)
//  694   {
//  695     rtrn ^= *pBuf++;
//  696   }
//  697 
//  698   return rtrn;
//  699 }
//  700 
// 
// 830 bytes in segment BANKED_CODE
//  60 bytes in segment BANK_RELAYS
//   6 bytes in segment XDATA_I
//   6 bytes in segment XDATA_ID
//  20 bytes in segment XDATA_ROM_C
//   7 bytes in segment XDATA_Z
// 
// 896 bytes of CODE  memory
//  20 bytes of CONST memory
//  13 bytes of XDATA memory
//
//Errors: none
//Warnings: none
